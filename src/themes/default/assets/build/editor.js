(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
    /*
     James Cryer / Huddle 2015
     URL: https://github.com/Huddle/Resemble.js
     */

    (function (root, factory) {
        if (typeof define === 'function' && define.amd) {
            define([], factory);
        } else if (typeof module === 'object' && module.exports) {
            module.exports = factory();
        } else {
            root.resemble = factory();
        }
    })(this, function () {
        'use strict';

        var pixelTransparency = 1;

        var errorPixelColor = { // Color for Error Pixels. Between 0 and 255.
            red: 255,
            green: 0,
            blue: 255,
            alpha: 255
        };

        function colorsDistance(c1, c2) {
            return (Math.abs(c1.r - c2.r) + Math.abs(c1.g - c2.g) + Math.abs(c1.b - c2.b)) / 3;
        }

        var errorPixelTransform = {
            flat: function (d1, d2) {
                return {
                    r: errorPixelColor.red,
                    g: errorPixelColor.green,
                    b: errorPixelColor.blue,
                    a: errorPixelColor.alpha
                };
            },
            movement: function (d1, d2) {
                return {
                    r: (d2.r * (errorPixelColor.red / 255) + errorPixelColor.red) / 2,
                    g: (d2.g * (errorPixelColor.green / 255) + errorPixelColor.green) / 2,
                    b: (d2.b * (errorPixelColor.blue / 255) + errorPixelColor.blue) / 2,
                    a: d2.a
                };
            },
            flatDifferenceIntensity: function (d1, d2) {
                return {
                    r: errorPixelColor.red,
                    g: errorPixelColor.green,
                    b: errorPixelColor.blue,
                    a: colorsDistance(d1, d2)
                };
            },
            movementDifferenceIntensity: function (d1, d2) {
                var ratio = colorsDistance(d1, d2) / 255 * 0.8;
                return {
                    r: (1 - ratio) * (d2.r * (errorPixelColor.red / 255)) + ratio * errorPixelColor.red,
                    g: (1 - ratio) * (d2.g * (errorPixelColor.green / 255)) + ratio * errorPixelColor.green,
                    b: (1 - ratio) * (d2.b * (errorPixelColor.blue / 255)) + ratio * errorPixelColor.blue,
                    a: d2.a
                };
            }
        };

        var errorPixelTransformer = errorPixelTransform.flat;

        var largeImageThreshold = 1200;

        var httpRegex = /^https?:\/\//;
        var document = typeof window != "undefined" ? window.document : {};
        var documentDomainRegex = new RegExp('^https?://' + document.domain);

        var resemble = function (fileData) {

            var data = {};
            var images = [];
            var updateCallbackArray = [];

            var tolerance = { // between 0 and 255
                red: 16,
                green: 16,
                blue: 16,
                alpha: 16,
                minBrightness: 16,
                maxBrightness: 240
            };

            var ignoreAntialiasing = false;
            var ignoreColors = false;
            var scaleToSameSize = false;

            function triggerDataUpdate() {
                var len = updateCallbackArray.length;
                var i;
                for (i = 0; i < len; i++) {
                    if (typeof updateCallbackArray[i] === 'function') {
                        updateCallbackArray[i](data);
                    }
                }
            }

            function loop(x, y, callback) {
                var i, j;

                for (i = 0; i < x; i++) {
                    for (j = 0; j < y; j++) {
                        callback(i, j);
                    }
                }
            }

            function parseImage(sourceImageData, width, height) {

                var pixelCount = 0;
                var redTotal = 0;
                var greenTotal = 0;
                var blueTotal = 0;
                var brightnessTotal = 0;

                loop(height, width, function (verticalPos, horizontalPos) {
                    var offset = (verticalPos * width + horizontalPos) * 4;
                    var red = sourceImageData[offset];
                    var green = sourceImageData[offset + 1];
                    var blue = sourceImageData[offset + 2];
                    var brightness = getBrightness(red, green, blue);

                    pixelCount++;

                    redTotal += red / 255 * 100;
                    greenTotal += green / 255 * 100;
                    blueTotal += blue / 255 * 100;
                    brightnessTotal += brightness / 255 * 100;
                });

                data.red = Math.floor(redTotal / pixelCount);
                data.green = Math.floor(greenTotal / pixelCount);
                data.blue = Math.floor(blueTotal / pixelCount);
                data.brightness = Math.floor(brightnessTotal / pixelCount);

                triggerDataUpdate();
            }

            function loadImageData(fileData, callback) {
                var fileReader;
                var hiddenImage = new Image();

                if (!(typeof fileData === 'string' && fileData.length > 6 && fileData.charAt(4) === ':' && fileData.charAt(5) !== '/')) {
                    if (httpRegex.test(fileData) && !documentDomainRegex.test(fileData)) {
                        hiddenImage.setAttribute('crossorigin', 'anonymous');
                    }
                }

                hiddenImage.onerror = function () {
                    hiddenImage.onerror = null; //fixes pollution between calls
                    images.push({ error: "Image load error." });
                    callback();
                };

                hiddenImage.onload = function () {
                    hiddenImage.onload = null; //fixes pollution between calls

                    var hiddenCanvas = document.createElement('canvas');
                    var imageData;

                    if (scaleToSameSize && images.length == 1) {
                        hiddenImage.width = images[0].width;
                        hiddenImage.height = images[0].height;
                    }

                    var width = hiddenImage.width;
                    var height = hiddenImage.height;

                    hiddenCanvas.width = width;
                    hiddenCanvas.height = height;
                    hiddenCanvas.getContext('2d').drawImage(hiddenImage, 0, 0, width, height);
                    imageData = hiddenCanvas.getContext('2d').getImageData(0, 0, width, height);

                    images.push(imageData);

                    callback(imageData, width, height);
                };

                if (typeof fileData === 'string') {
                    hiddenImage.src = fileData;
                    if (hiddenImage.complete && hiddenImage.naturalWidth > 0) {
                        hiddenImage.onload();
                    }
                } else if (typeof fileData.data !== 'undefined' && typeof fileData.width === 'number' && typeof fileData.height === 'number') {
                    images.push(fileData);
                    callback(fileData, fileData.width, fileData.height);
                } else {
                    fileReader = new FileReader();
                    fileReader.onload = function (event) {
                        hiddenImage.src = event.target.result;
                    };
                    fileReader.readAsDataURL(fileData);
                }
            }

            function isColorSimilar(a, b, color) {

                var absDiff = Math.abs(a - b);

                if (typeof a === 'undefined') {
                    return false;
                }
                if (typeof b === 'undefined') {
                    return false;
                }

                if (a === b) {
                    return true;
                } else if (absDiff < tolerance[color]) {
                    return true;
                } else {
                    return false;
                }
            }

            function isNumber(n) {
                return !isNaN(parseFloat(n));
            }

            function isPixelBrightnessSimilar(d1, d2) {
                var alpha = isColorSimilar(d1.a, d2.a, 'alpha');
                var brightness = isColorSimilar(d1.brightness, d2.brightness, 'minBrightness');
                return brightness && alpha;
            }

            function getBrightness(r, g, b) {
                return 0.3 * r + 0.59 * g + 0.11 * b;
            }

            function isRGBSame(d1, d2) {
                var red = d1.r === d2.r;
                var green = d1.g === d2.g;
                var blue = d1.b === d2.b;
                return red && green && blue;
            }

            function isRGBSimilar(d1, d2) {
                var red = isColorSimilar(d1.r, d2.r, 'red');
                var green = isColorSimilar(d1.g, d2.g, 'green');
                var blue = isColorSimilar(d1.b, d2.b, 'blue');
                var alpha = isColorSimilar(d1.a, d2.a, 'alpha');

                return red && green && blue && alpha;
            }

            function isContrasting(d1, d2) {
                return Math.abs(d1.brightness - d2.brightness) > tolerance.maxBrightness;
            }

            function getHue(r, g, b) {

                r = r / 255;
                g = g / 255;
                b = b / 255;
                var max = Math.max(r, g, b),
                    min = Math.min(r, g, b);
                var h;
                var d;

                if (max == min) {
                    h = 0; // achromatic
                } else {
                    d = max - min;
                    switch (max) {
                        case r:
                            h = (g - b) / d + (g < b ? 6 : 0);break;
                        case g:
                            h = (b - r) / d + 2;break;
                        case b:
                            h = (r - g) / d + 4;break;
                    }
                    h /= 6;
                }

                return h;
            }

            function isAntialiased(sourcePix, data, cacheSet, verticalPos, horizontalPos, width) {
                var offset;
                var targetPix;
                var distance = 1;
                var i;
                var j;
                var hasHighContrastSibling = 0;
                var hasSiblingWithDifferentHue = 0;
                var hasEquivalentSibling = 0;

                addHueInfo(sourcePix);

                for (i = distance * -1; i <= distance; i++) {
                    for (j = distance * -1; j <= distance; j++) {

                        if (i === 0 && j === 0) {
                            // ignore source pixel
                        } else {

                            offset = ((verticalPos + j) * width + (horizontalPos + i)) * 4;
                            targetPix = getPixelInfo(data, offset, cacheSet);

                            if (targetPix === null) {
                                continue;
                            }

                            addBrightnessInfo(targetPix);
                            addHueInfo(targetPix);

                            if (isContrasting(sourcePix, targetPix)) {
                                hasHighContrastSibling++;
                            }

                            if (isRGBSame(sourcePix, targetPix)) {
                                hasEquivalentSibling++;
                            }

                            if (Math.abs(targetPix.h - sourcePix.h) > 0.3) {
                                hasSiblingWithDifferentHue++;
                            }

                            if (hasSiblingWithDifferentHue > 1 || hasHighContrastSibling > 1) {
                                return true;
                            }
                        }
                    }
                }

                if (hasEquivalentSibling < 2) {
                    return true;
                }

                return false;
            }

            function errorPixel(px, offset, data1, data2) {
                var data = errorPixelTransformer(data1, data2);
                px[offset] = data.r;
                px[offset + 1] = data.g;
                px[offset + 2] = data.b;
                px[offset + 3] = data.a;
            }

            function copyPixel(px, offset, data) {
                px[offset] = data.r; //r
                px[offset + 1] = data.g; //g
                px[offset + 2] = data.b; //b
                px[offset + 3] = data.a * pixelTransparency; //a
            }

            function copyGrayScalePixel(px, offset, data) {
                px[offset] = data.brightness; //r
                px[offset + 1] = data.brightness; //g
                px[offset + 2] = data.brightness; //b
                px[offset + 3] = data.a * pixelTransparency; //a
            }

            function getPixelInfo(data, offset, cacheSet) {
                var r;
                var g;
                var b;
                var d;
                var a;

                r = data[offset];

                if (typeof r !== 'undefined') {
                    g = data[offset + 1];
                    b = data[offset + 2];
                    a = data[offset + 3];
                    d = {
                        r: r,
                        g: g,
                        b: b,
                        a: a
                    };

                    return d;
                } else {
                    return null;
                }
            }

            function addBrightnessInfo(data) {
                data.brightness = getBrightness(data.r, data.g, data.b); // 'corrected' lightness
            }

            function addHueInfo(data) {
                data.h = getHue(data.r, data.g, data.b);
            }

            function analyseImages(img1, img2, width, height) {

                var hiddenCanvas = document.createElement('canvas');

                var data1 = img1.data;
                var data2 = img2.data;

                hiddenCanvas.width = width;
                hiddenCanvas.height = height;

                var context = hiddenCanvas.getContext('2d');
                var imgd = context.createImageData(width, height);
                var targetPix = imgd.data;

                var mismatchCount = 0;
                var diffBounds = {
                    top: height,
                    left: width,
                    bottom: 0,
                    right: 0
                };
                var updateBounds = function (x, y) {
                    diffBounds.left = Math.min(x, diffBounds.left);
                    diffBounds.right = Math.max(x, diffBounds.right);
                    diffBounds.top = Math.min(y, diffBounds.top);
                    diffBounds.bottom = Math.max(y, diffBounds.bottom);
                };

                var time = Date.now();

                var skip;

                if (!!largeImageThreshold && ignoreAntialiasing && (width > largeImageThreshold || height > largeImageThreshold)) {
                    skip = 6;
                }

                loop(height, width, function (verticalPos, horizontalPos) {

                    if (skip) {
                        // only skip if the image isn't small
                        if (verticalPos % skip === 0 || horizontalPos % skip === 0) {
                            return;
                        }
                    }

                    var offset = (verticalPos * width + horizontalPos) * 4;
                    var pixel1 = getPixelInfo(data1, offset, 1);
                    var pixel2 = getPixelInfo(data2, offset, 2);

                    if (pixel1 === null || pixel2 === null) {
                        return;
                    }

                    if (ignoreColors) {

                        addBrightnessInfo(pixel1);
                        addBrightnessInfo(pixel2);

                        if (isPixelBrightnessSimilar(pixel1, pixel2)) {
                            copyGrayScalePixel(targetPix, offset, pixel2);
                        } else {
                            errorPixel(targetPix, offset, pixel1, pixel2);
                            mismatchCount++;
                            updateBounds(horizontalPos, verticalPos);
                        }
                        return;
                    }

                    if (isRGBSimilar(pixel1, pixel2)) {
                        copyPixel(targetPix, offset, pixel1, pixel2);
                    } else if (ignoreAntialiasing && (addBrightnessInfo(pixel1), // jit pixel info augmentation looks a little weird, sorry.
                            addBrightnessInfo(pixel2), isAntialiased(pixel1, data1, 1, verticalPos, horizontalPos, width) || isAntialiased(pixel2, data2, 2, verticalPos, horizontalPos, width))) {

                        if (isPixelBrightnessSimilar(pixel1, pixel2)) {
                            copyGrayScalePixel(targetPix, offset, pixel2);
                        } else {
                            errorPixel(targetPix, offset, pixel1, pixel2);
                            mismatchCount++;
                            updateBounds(horizontalPos, verticalPos);
                        }
                    } else {
                        errorPixel(targetPix, offset, pixel1, pixel2);
                        mismatchCount++;
                        updateBounds(horizontalPos, verticalPos);
                    }
                });

                data.rawMisMatchPercentage = mismatchCount / (height * width) * 100;
                data.misMatchPercentage = data.rawMisMatchPercentage.toFixed(2);
                data.diffBounds = diffBounds;
                data.analysisTime = Date.now() - time;

                data.getImageDataUrl = function (text) {
                    var barHeight = 0;

                    if (text) {
                        barHeight = addLabel(text, context, hiddenCanvas);
                    }

                    context.putImageData(imgd, 0, barHeight);

                    return hiddenCanvas.toDataURL("image/png");
                };
            }

            function addLabel(text, context, hiddenCanvas) {
                var textPadding = 2;

                context.font = '12px sans-serif';

                var textWidth = context.measureText(text).width + textPadding * 2;
                var barHeight = 22;

                if (textWidth > hiddenCanvas.width) {
                    hiddenCanvas.width = textWidth;
                }

                hiddenCanvas.height += barHeight;

                context.fillStyle = "#666";
                context.fillRect(0, 0, hiddenCanvas.width, barHeight - 4);
                context.fillStyle = "#fff";
                context.fillRect(0, barHeight - 4, hiddenCanvas.width, 4);

                context.fillStyle = "#fff";
                context.textBaseline = "top";
                context.font = '12px sans-serif';
                context.fillText(text, textPadding, 1);

                return barHeight;
            }

            function normalise(img, w, h) {
                var c;
                var context;

                if (img.height < h || img.width < w) {
                    c = document.createElement('canvas');
                    c.width = w;
                    c.height = h;
                    context = c.getContext('2d');
                    context.putImageData(img, 0, 0);
                    return context.getImageData(0, 0, w, h);
                }

                return img;
            }

            function compare(one, two) {

                function onceWeHaveBoth() {
                    var width;
                    var height;
                    if (images.length === 2) {
                        if (images[0].error || images[1].error) {
                            data = {};
                            data.error = images[0].error ? images[0].error : images[1].error;
                            triggerDataUpdate();
                            return;
                        }
                        width = images[0].width > images[1].width ? images[0].width : images[1].width;
                        height = images[0].height > images[1].height ? images[0].height : images[1].height;

                        if (images[0].width === images[1].width && images[0].height === images[1].height) {
                            data.isSameDimensions = true;
                        } else {
                            data.isSameDimensions = false;
                        }

                        data.dimensionDifference = { width: images[0].width - images[1].width, height: images[0].height - images[1].height };

                        analyseImages(normalise(images[0], width, height), normalise(images[1], width, height), width, height);

                        triggerDataUpdate();
                    }
                }

                images = [];
                loadImageData(one, onceWeHaveBoth);
                loadImageData(two, onceWeHaveBoth);
            }

            function getCompareApi(param) {

                var secondFileData,
                    hasMethod = typeof param === 'function';

                if (!hasMethod) {
                    // assume it's file data
                    secondFileData = param;
                }

                var self = {
                    scaleToSameSize: function () {
                        scaleToSameSize = true;

                        if (hasMethod) {
                            param();
                        }
                        return self;
                    },
                    useOriginalSize: function () {
                        scaleToSameSize = false;

                        if (hasMethod) {
                            param();
                        }
                        return self;
                    },
                    ignoreNothing: function () {

                        tolerance.red = 0;
                        tolerance.green = 0;
                        tolerance.blue = 0;
                        tolerance.alpha = 0;
                        tolerance.minBrightness = 0;
                        tolerance.maxBrightness = 255;

                        ignoreAntialiasing = false;
                        ignoreColors = false;

                        if (hasMethod) {
                            param();
                        }
                        return self;
                    },
                    ignoreAntialiasing: function () {

                        tolerance.red = 32;
                        tolerance.green = 32;
                        tolerance.blue = 32;
                        tolerance.alpha = 32;
                        tolerance.minBrightness = 64;
                        tolerance.maxBrightness = 96;

                        ignoreAntialiasing = true;
                        ignoreColors = false;

                        if (hasMethod) {
                            param();
                        }
                        return self;
                    },
                    ignoreColors: function () {

                        tolerance.alpha = 16;
                        tolerance.minBrightness = 16;
                        tolerance.maxBrightness = 240;

                        ignoreAntialiasing = false;
                        ignoreColors = true;

                        if (hasMethod) {
                            param();
                        }
                        return self;
                    },
                    repaint: function () {
                        if (hasMethod) {
                            param();
                        }
                        return self;
                    },
                    onComplete: function (callback) {

                        updateCallbackArray.push(callback);

                        var wrapper = function () {
                            compare(fileData, secondFileData);
                        };

                        wrapper();

                        return getCompareApi(wrapper);
                    }
                };

                return self;
            }

            return {
                onComplete: function (callback) {
                    updateCallbackArray.push(callback);
                    loadImageData(fileData, function (imageData, width, height) {
                        parseImage(imageData.data, width, height);
                    });
                },
                compareTo: function (secondFileData) {
                    return getCompareApi(secondFileData);
                }
            };
        };

        resemble.outputSettings = function (options) {
            var key;
            var undefined;

            if (options.errorColor) {
                for (key in options.errorColor) {
                    errorPixelColor[key] = options.errorColor[key] === undefined ? errorPixelColor[key] : options.errorColor[key];
                }
            }

            if (options.errorType && errorPixelTransform[options.errorType]) {
                errorPixelTransformer = errorPixelTransform[options.errorType];
            }

            pixelTransparency = isNaN(Number(options.transparency)) ? pixelTransparency : options.transparency;

            if (options.largeImageThreshold !== undefined) {
                largeImageThreshold = options.largeImageThreshold;
            }

            return this;
        };

        return resemble;
    });

},{}],2:[function(require,module,exports){
// TinyColor v1.4.1
// https://github.com/bgrins/TinyColor
// Brian Grinstead, MIT License

    (function (Math) {

        var trimLeft = /^\s+/,
            trimRight = /\s+$/,
            tinyCounter = 0,
            mathRound = Math.round,
            mathMin = Math.min,
            mathMax = Math.max,
            mathRandom = Math.random;

        function tinycolor(color, opts) {

            color = color ? color : '';
            opts = opts || {};

            // If input is already a tinycolor, return itself
            if (color instanceof tinycolor) {
                return color;
            }
            // If we are called as a function, call using new instead
            if (!(this instanceof tinycolor)) {
                return new tinycolor(color, opts);
            }

            var rgb = inputToRGB(color);
            this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound(100 * this._a) / 100, this._format = opts.format || rgb.format;
            this._gradientType = opts.gradientType;

            // Don't let the range of [0,255] come back in [0,1].
            // Potentially lose a little bit of precision here, but will fix issues where
            // .5 gets interpreted as half of the total, instead of half of 1
            // If it was supposed to be 128, this was already taken care of by `inputToRgb`
            if (this._r < 1) {
                this._r = mathRound(this._r);
            }
            if (this._g < 1) {
                this._g = mathRound(this._g);
            }
            if (this._b < 1) {
                this._b = mathRound(this._b);
            }

            this._ok = rgb.ok;
            this._tc_id = tinyCounter++;
        }

        tinycolor.prototype = {
            isDark: function () {
                return this.getBrightness() < 128;
            },
            isLight: function () {
                return !this.isDark();
            },
            isValid: function () {
                return this._ok;
            },
            getOriginalInput: function () {
                return this._originalInput;
            },
            getFormat: function () {
                return this._format;
            },
            getAlpha: function () {
                return this._a;
            },
            getBrightness: function () {
                //http://www.w3.org/TR/AERT#color-contrast
                var rgb = this.toRgb();
                return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
            },
            getLuminance: function () {
                //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
                var rgb = this.toRgb();
                var RsRGB, GsRGB, BsRGB, R, G, B;
                RsRGB = rgb.r / 255;
                GsRGB = rgb.g / 255;
                BsRGB = rgb.b / 255;

                if (RsRGB <= 0.03928) {
                    R = RsRGB / 12.92;
                } else {
                    R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
                }
                if (GsRGB <= 0.03928) {
                    G = GsRGB / 12.92;
                } else {
                    G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
                }
                if (BsRGB <= 0.03928) {
                    B = BsRGB / 12.92;
                } else {
                    B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
                }
                return 0.2126 * R + 0.7152 * G + 0.0722 * B;
            },
            setAlpha: function (value) {
                this._a = boundAlpha(value);
                this._roundA = mathRound(100 * this._a) / 100;
                return this;
            },
            toHsv: function () {
                var hsv = rgbToHsv(this._r, this._g, this._b);
                return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };
            },
            toHsvString: function () {
                var hsv = rgbToHsv(this._r, this._g, this._b);
                var h = mathRound(hsv.h * 360),
                    s = mathRound(hsv.s * 100),
                    v = mathRound(hsv.v * 100);
                return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
            },
            toHsl: function () {
                var hsl = rgbToHsl(this._r, this._g, this._b);
                return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };
            },
            toHslString: function () {
                var hsl = rgbToHsl(this._r, this._g, this._b);
                var h = mathRound(hsl.h * 360),
                    s = mathRound(hsl.s * 100),
                    l = mathRound(hsl.l * 100);
                return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
            },
            toHex: function (allow3Char) {
                return rgbToHex(this._r, this._g, this._b, allow3Char);
            },
            toHexString: function (allow3Char) {
                return '#' + this.toHex(allow3Char);
            },
            toHex8: function (allow4Char) {
                return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
            },
            toHex8String: function (allow4Char) {
                return '#' + this.toHex8(allow4Char);
            },
            toRgb: function () {
                return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };
            },
            toRgbString: function () {
                return this._a == 1 ? "rgb(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" : "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
            },
            toPercentageRgb: function () {
                return { r: mathRound(bound01(this._r, 255) * 100) + "%", g: mathRound(bound01(this._g, 255) * 100) + "%", b: mathRound(bound01(this._b, 255) * 100) + "%", a: this._a };
            },
            toPercentageRgbString: function () {
                return this._a == 1 ? "rgb(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" : "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
            },
            toName: function () {
                if (this._a === 0) {
                    return "transparent";
                }

                if (this._a < 1) {
                    return false;
                }

                return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
            },
            toFilter: function (secondColor) {
                var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);
                var secondHex8String = hex8String;
                var gradientType = this._gradientType ? "GradientType = 1, " : "";

                if (secondColor) {
                    var s = tinycolor(secondColor);
                    secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);
                }

                return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
            },
            toString: function (format) {
                var formatSet = !!format;
                format = format || this._format;

                var formattedString = false;
                var hasAlpha = this._a < 1 && this._a >= 0;
                var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");

                if (needsAlphaFormat) {
                    // Special case for "transparent", all other non-alpha formats
                    // will return rgba when there is transparency.
                    if (format === "name" && this._a === 0) {
                        return this.toName();
                    }
                    return this.toRgbString();
                }
                if (format === "rgb") {
                    formattedString = this.toRgbString();
                }
                if (format === "prgb") {
                    formattedString = this.toPercentageRgbString();
                }
                if (format === "hex" || format === "hex6") {
                    formattedString = this.toHexString();
                }
                if (format === "hex3") {
                    formattedString = this.toHexString(true);
                }
                if (format === "hex4") {
                    formattedString = this.toHex8String(true);
                }
                if (format === "hex8") {
                    formattedString = this.toHex8String();
                }
                if (format === "name") {
                    formattedString = this.toName();
                }
                if (format === "hsl") {
                    formattedString = this.toHslString();
                }
                if (format === "hsv") {
                    formattedString = this.toHsvString();
                }

                return formattedString || this.toHexString();
            },
            clone: function () {
                return tinycolor(this.toString());
            },

            _applyModification: function (fn, args) {
                var color = fn.apply(null, [this].concat([].slice.call(args)));
                this._r = color._r;
                this._g = color._g;
                this._b = color._b;
                this.setAlpha(color._a);
                return this;
            },
            lighten: function () {
                return this._applyModification(lighten, arguments);
            },
            brighten: function () {
                return this._applyModification(brighten, arguments);
            },
            darken: function () {
                return this._applyModification(darken, arguments);
            },
            desaturate: function () {
                return this._applyModification(desaturate, arguments);
            },
            saturate: function () {
                return this._applyModification(saturate, arguments);
            },
            greyscale: function () {
                return this._applyModification(greyscale, arguments);
            },
            spin: function () {
                return this._applyModification(spin, arguments);
            },

            _applyCombination: function (fn, args) {
                return fn.apply(null, [this].concat([].slice.call(args)));
            },
            analogous: function () {
                return this._applyCombination(analogous, arguments);
            },
            complement: function () {
                return this._applyCombination(complement, arguments);
            },
            monochromatic: function () {
                return this._applyCombination(monochromatic, arguments);
            },
            splitcomplement: function () {
                return this._applyCombination(splitcomplement, arguments);
            },
            triad: function () {
                return this._applyCombination(triad, arguments);
            },
            tetrad: function () {
                return this._applyCombination(tetrad, arguments);
            }
        };

        // If input is an object, force 1 into "1.0" to handle ratios properly
        // String input requires "1.0" as input, so 1 will be treated as 1
        tinycolor.fromRatio = function (color, opts) {
            if (typeof color == "object") {
                var newColor = {};
                for (var i in color) {
                    if (color.hasOwnProperty(i)) {
                        if (i === "a") {
                            newColor[i] = color[i];
                        } else {
                            newColor[i] = convertToPercentage(color[i]);
                        }
                    }
                }
                color = newColor;
            }

            return tinycolor(color, opts);
        };

        // Given a string or object, convert that input to RGB
        // Possible string inputs:
        //
        //     "red"
        //     "#f00" or "f00"
        //     "#ff0000" or "ff0000"
        //     "#ff000000" or "ff000000"
        //     "rgb 255 0 0" or "rgb (255, 0, 0)"
        //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
        //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
        //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
        //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
        //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
        //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
        //
        function inputToRGB(color) {

            var rgb = { r: 0, g: 0, b: 0 };
            var a = 1;
            var s = null;
            var v = null;
            var l = null;
            var ok = false;
            var format = false;

            if (typeof color == "string") {
                color = stringInputToObject(color);
            }

            if (typeof color == "object") {
                if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
                    rgb = rgbToRgb(color.r, color.g, color.b);
                    ok = true;
                    format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
                } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
                    s = convertToPercentage(color.s);
                    v = convertToPercentage(color.v);
                    rgb = hsvToRgb(color.h, s, v);
                    ok = true;
                    format = "hsv";
                } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
                    s = convertToPercentage(color.s);
                    l = convertToPercentage(color.l);
                    rgb = hslToRgb(color.h, s, l);
                    ok = true;
                    format = "hsl";
                }

                if (color.hasOwnProperty("a")) {
                    a = color.a;
                }
            }

            a = boundAlpha(a);

            return {
                ok: ok,
                format: color.format || format,
                r: mathMin(255, mathMax(rgb.r, 0)),
                g: mathMin(255, mathMax(rgb.g, 0)),
                b: mathMin(255, mathMax(rgb.b, 0)),
                a: a
            };
        }

        // Conversion Functions
        // --------------------

        // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
        // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>

        // `rgbToRgb`
        // Handle bounds / percentage checking to conform to CSS color spec
        // <http://www.w3.org/TR/css3-color/>
        // *Assumes:* r, g, b in [0, 255] or [0, 1]
        // *Returns:* { r, g, b } in [0, 255]
        function rgbToRgb(r, g, b) {
            return {
                r: bound01(r, 255) * 255,
                g: bound01(g, 255) * 255,
                b: bound01(b, 255) * 255
            };
        }

        // `rgbToHsl`
        // Converts an RGB color value to HSL.
        // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
        // *Returns:* { h, s, l } in [0,1]
        function rgbToHsl(r, g, b) {

            r = bound01(r, 255);
            g = bound01(g, 255);
            b = bound01(b, 255);

            var max = mathMax(r, g, b),
                min = mathMin(r, g, b);
            var h,
                s,
                l = (max + min) / 2;

            if (max == min) {
                h = s = 0; // achromatic
            } else {
                var d = max - min;
                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                switch (max) {
                    case r:
                        h = (g - b) / d + (g < b ? 6 : 0);break;
                    case g:
                        h = (b - r) / d + 2;break;
                    case b:
                        h = (r - g) / d + 4;break;
                }

                h /= 6;
            }

            return { h: h, s: s, l: l };
        }

        // `hslToRgb`
        // Converts an HSL color value to RGB.
        // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
        // *Returns:* { r, g, b } in the set [0, 255]
        function hslToRgb(h, s, l) {
            var r, g, b;

            h = bound01(h, 360);
            s = bound01(s, 100);
            l = bound01(l, 100);

            function hue2rgb(p, q, t) {
                if (t < 0) t += 1;
                if (t > 1) t -= 1;
                if (t < 1 / 6) return p + (q - p) * 6 * t;
                if (t < 1 / 2) return q;
                if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
                return p;
            }

            if (s === 0) {
                r = g = b = l; // achromatic
            } else {
                var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
                var p = 2 * l - q;
                r = hue2rgb(p, q, h + 1 / 3);
                g = hue2rgb(p, q, h);
                b = hue2rgb(p, q, h - 1 / 3);
            }

            return { r: r * 255, g: g * 255, b: b * 255 };
        }

        // `rgbToHsv`
        // Converts an RGB color value to HSV
        // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
        // *Returns:* { h, s, v } in [0,1]
        function rgbToHsv(r, g, b) {

            r = bound01(r, 255);
            g = bound01(g, 255);
            b = bound01(b, 255);

            var max = mathMax(r, g, b),
                min = mathMin(r, g, b);
            var h,
                s,
                v = max;

            var d = max - min;
            s = max === 0 ? 0 : d / max;

            if (max == min) {
                h = 0; // achromatic
            } else {
                switch (max) {
                    case r:
                        h = (g - b) / d + (g < b ? 6 : 0);break;
                    case g:
                        h = (b - r) / d + 2;break;
                    case b:
                        h = (r - g) / d + 4;break;
                }
                h /= 6;
            }
            return { h: h, s: s, v: v };
        }

        // `hsvToRgb`
        // Converts an HSV color value to RGB.
        // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
        // *Returns:* { r, g, b } in the set [0, 255]
        function hsvToRgb(h, s, v) {

            h = bound01(h, 360) * 6;
            s = bound01(s, 100);
            v = bound01(v, 100);

            var i = Math.floor(h),
                f = h - i,
                p = v * (1 - s),
                q = v * (1 - f * s),
                t = v * (1 - (1 - f) * s),
                mod = i % 6,
                r = [v, q, p, p, t, v][mod],
                g = [t, v, v, q, p, p][mod],
                b = [p, p, t, v, v, q][mod];

            return { r: r * 255, g: g * 255, b: b * 255 };
        }

        // `rgbToHex`
        // Converts an RGB color to hex
        // Assumes r, g, and b are contained in the set [0, 255]
        // Returns a 3 or 6 character hex
        function rgbToHex(r, g, b, allow3Char) {

            var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))];

            // Return a 3 character hex if possible
            if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
                return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
            }

            return hex.join("");
        }

        // `rgbaToHex`
        // Converts an RGBA color plus alpha transparency to hex
        // Assumes r, g, b are contained in the set [0, 255] and
        // a in [0, 1]. Returns a 4 or 8 character rgba hex
        function rgbaToHex(r, g, b, a, allow4Char) {

            var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16)), pad2(convertDecimalToHex(a))];

            // Return a 4 character hex if possible
            if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
                return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
            }

            return hex.join("");
        }

        // `rgbaToArgbHex`
        // Converts an RGBA color to an ARGB Hex8 string
        // Rarely used, but required for "toFilter()"
        function rgbaToArgbHex(r, g, b, a) {

            var hex = [pad2(convertDecimalToHex(a)), pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))];

            return hex.join("");
        }

        // `equals`
        // Can be called with any tinycolor input
        tinycolor.equals = function (color1, color2) {
            if (!color1 || !color2) {
                return false;
            }
            return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
        };

        tinycolor.random = function () {
            return tinycolor.fromRatio({
                r: mathRandom(),
                g: mathRandom(),
                b: mathRandom()
            });
        };

        // Modification Functions
        // ----------------------
        // Thanks to less.js for some of the basics here
        // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>

        function desaturate(color, amount) {
            amount = amount === 0 ? 0 : amount || 10;
            var hsl = tinycolor(color).toHsl();
            hsl.s -= amount / 100;
            hsl.s = clamp01(hsl.s);
            return tinycolor(hsl);
        }

        function saturate(color, amount) {
            amount = amount === 0 ? 0 : amount || 10;
            var hsl = tinycolor(color).toHsl();
            hsl.s += amount / 100;
            hsl.s = clamp01(hsl.s);
            return tinycolor(hsl);
        }

        function greyscale(color) {
            return tinycolor(color).desaturate(100);
        }

        function lighten(color, amount) {
            amount = amount === 0 ? 0 : amount || 10;
            var hsl = tinycolor(color).toHsl();
            hsl.l += amount / 100;
            hsl.l = clamp01(hsl.l);
            return tinycolor(hsl);
        }

        function brighten(color, amount) {
            amount = amount === 0 ? 0 : amount || 10;
            var rgb = tinycolor(color).toRgb();
            rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * -(amount / 100))));
            rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * -(amount / 100))));
            rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * -(amount / 100))));
            return tinycolor(rgb);
        }

        function darken(color, amount) {
            amount = amount === 0 ? 0 : amount || 10;
            var hsl = tinycolor(color).toHsl();
            hsl.l -= amount / 100;
            hsl.l = clamp01(hsl.l);
            return tinycolor(hsl);
        }

        // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
        // Values outside of this range will be wrapped into this range.
        function spin(color, amount) {
            var hsl = tinycolor(color).toHsl();
            var hue = (hsl.h + amount) % 360;
            hsl.h = hue < 0 ? 360 + hue : hue;
            return tinycolor(hsl);
        }

        // Combination Functions
        // ---------------------
        // Thanks to jQuery xColor for some of the ideas behind these
        // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>

        function complement(color) {
            var hsl = tinycolor(color).toHsl();
            hsl.h = (hsl.h + 180) % 360;
            return tinycolor(hsl);
        }

        function triad(color) {
            var hsl = tinycolor(color).toHsl();
            var h = hsl.h;
            return [tinycolor(color), tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }), tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })];
        }

        function tetrad(color) {
            var hsl = tinycolor(color).toHsl();
            var h = hsl.h;
            return [tinycolor(color), tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }), tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }), tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })];
        }

        function splitcomplement(color) {
            var hsl = tinycolor(color).toHsl();
            var h = hsl.h;
            return [tinycolor(color), tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }), tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l })];
        }

        function analogous(color, results, slices) {
            results = results || 6;
            slices = slices || 30;

            var hsl = tinycolor(color).toHsl();
            var part = 360 / slices;
            var ret = [tinycolor(color)];

            for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {
                hsl.h = (hsl.h + part) % 360;
                ret.push(tinycolor(hsl));
            }
            return ret;
        }

        function monochromatic(color, results) {
            results = results || 6;
            var hsv = tinycolor(color).toHsv();
            var h = hsv.h,
                s = hsv.s,
                v = hsv.v;
            var ret = [];
            var modification = 1 / results;

            while (results--) {
                ret.push(tinycolor({ h: h, s: s, v: v }));
                v = (v + modification) % 1;
            }

            return ret;
        }

        // Utility Functions
        // ---------------------

        tinycolor.mix = function (color1, color2, amount) {
            amount = amount === 0 ? 0 : amount || 50;

            var rgb1 = tinycolor(color1).toRgb();
            var rgb2 = tinycolor(color2).toRgb();

            var p = amount / 100;

            var rgba = {
                r: (rgb2.r - rgb1.r) * p + rgb1.r,
                g: (rgb2.g - rgb1.g) * p + rgb1.g,
                b: (rgb2.b - rgb1.b) * p + rgb1.b,
                a: (rgb2.a - rgb1.a) * p + rgb1.a
            };

            return tinycolor(rgba);
        };

        // Readability Functions
        // ---------------------
        // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)

        // `contrast`
        // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
        tinycolor.readability = function (color1, color2) {
            var c1 = tinycolor(color1);
            var c2 = tinycolor(color2);
            return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
        };

        // `isReadable`
        // Ensure that foreground and background color combinations meet WCAG2 guidelines.
        // The third argument is an optional Object.
        //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
        //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
        // If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.

        // *Example*
        //    tinycolor.isReadable("#000", "#111") => false
        //    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false
        tinycolor.isReadable = function (color1, color2, wcag2) {
            var readability = tinycolor.readability(color1, color2);
            var wcag2Parms, out;

            out = false;

            wcag2Parms = validateWCAG2Parms(wcag2);
            switch (wcag2Parms.level + wcag2Parms.size) {
                case "AAsmall":
                case "AAAlarge":
                    out = readability >= 4.5;
                    break;
                case "AAlarge":
                    out = readability >= 3;
                    break;
                case "AAAsmall":
                    out = readability >= 7;
                    break;
            }
            return out;
        };

        // `mostReadable`
        // Given a base color and a list of possible foreground or background
        // colors for that base, returns the most readable color.
        // Optionally returns Black or White if the most readable color is unreadable.
        // *Example*
        //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
        //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
        //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
        //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"
        tinycolor.mostReadable = function (baseColor, colorList, args) {
            var bestColor = null;
            var bestScore = 0;
            var readability;
            var includeFallbackColors, level, size;
            args = args || {};
            includeFallbackColors = args.includeFallbackColors;
            level = args.level;
            size = args.size;

            for (var i = 0; i < colorList.length; i++) {
                readability = tinycolor.readability(baseColor, colorList[i]);
                if (readability > bestScore) {
                    bestScore = readability;
                    bestColor = tinycolor(colorList[i]);
                }
            }

            if (tinycolor.isReadable(baseColor, bestColor, { "level": level, "size": size }) || !includeFallbackColors) {
                return bestColor;
            } else {
                args.includeFallbackColors = false;
                return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
            }
        };

        // Big List of Colors
        // ------------------
        // <http://www.w3.org/TR/css3-color/#svg-color>
        var names = tinycolor.names = {
            aliceblue: "f0f8ff",
            antiquewhite: "faebd7",
            aqua: "0ff",
            aquamarine: "7fffd4",
            azure: "f0ffff",
            beige: "f5f5dc",
            bisque: "ffe4c4",
            black: "000",
            blanchedalmond: "ffebcd",
            blue: "00f",
            blueviolet: "8a2be2",
            brown: "a52a2a",
            burlywood: "deb887",
            burntsienna: "ea7e5d",
            cadetblue: "5f9ea0",
            chartreuse: "7fff00",
            chocolate: "d2691e",
            coral: "ff7f50",
            cornflowerblue: "6495ed",
            cornsilk: "fff8dc",
            crimson: "dc143c",
            cyan: "0ff",
            darkblue: "00008b",
            darkcyan: "008b8b",
            darkgoldenrod: "b8860b",
            darkgray: "a9a9a9",
            darkgreen: "006400",
            darkgrey: "a9a9a9",
            darkkhaki: "bdb76b",
            darkmagenta: "8b008b",
            darkolivegreen: "556b2f",
            darkorange: "ff8c00",
            darkorchid: "9932cc",
            darkred: "8b0000",
            darksalmon: "e9967a",
            darkseagreen: "8fbc8f",
            darkslateblue: "483d8b",
            darkslategray: "2f4f4f",
            darkslategrey: "2f4f4f",
            darkturquoise: "00ced1",
            darkviolet: "9400d3",
            deeppink: "ff1493",
            deepskyblue: "00bfff",
            dimgray: "696969",
            dimgrey: "696969",
            dodgerblue: "1e90ff",
            firebrick: "b22222",
            floralwhite: "fffaf0",
            forestgreen: "228b22",
            fuchsia: "f0f",
            gainsboro: "dcdcdc",
            ghostwhite: "f8f8ff",
            gold: "ffd700",
            goldenrod: "daa520",
            gray: "808080",
            green: "008000",
            greenyellow: "adff2f",
            grey: "808080",
            honeydew: "f0fff0",
            hotpink: "ff69b4",
            indianred: "cd5c5c",
            indigo: "4b0082",
            ivory: "fffff0",
            khaki: "f0e68c",
            lavender: "e6e6fa",
            lavenderblush: "fff0f5",
            lawngreen: "7cfc00",
            lemonchiffon: "fffacd",
            lightblue: "add8e6",
            lightcoral: "f08080",
            lightcyan: "e0ffff",
            lightgoldenrodyellow: "fafad2",
            lightgray: "d3d3d3",
            lightgreen: "90ee90",
            lightgrey: "d3d3d3",
            lightpink: "ffb6c1",
            lightsalmon: "ffa07a",
            lightseagreen: "20b2aa",
            lightskyblue: "87cefa",
            lightslategray: "789",
            lightslategrey: "789",
            lightsteelblue: "b0c4de",
            lightyellow: "ffffe0",
            lime: "0f0",
            limegreen: "32cd32",
            linen: "faf0e6",
            magenta: "f0f",
            maroon: "800000",
            mediumaquamarine: "66cdaa",
            mediumblue: "0000cd",
            mediumorchid: "ba55d3",
            mediumpurple: "9370db",
            mediumseagreen: "3cb371",
            mediumslateblue: "7b68ee",
            mediumspringgreen: "00fa9a",
            mediumturquoise: "48d1cc",
            mediumvioletred: "c71585",
            midnightblue: "191970",
            mintcream: "f5fffa",
            mistyrose: "ffe4e1",
            moccasin: "ffe4b5",
            navajowhite: "ffdead",
            navy: "000080",
            oldlace: "fdf5e6",
            olive: "808000",
            olivedrab: "6b8e23",
            orange: "ffa500",
            orangered: "ff4500",
            orchid: "da70d6",
            palegoldenrod: "eee8aa",
            palegreen: "98fb98",
            paleturquoise: "afeeee",
            palevioletred: "db7093",
            papayawhip: "ffefd5",
            peachpuff: "ffdab9",
            peru: "cd853f",
            pink: "ffc0cb",
            plum: "dda0dd",
            powderblue: "b0e0e6",
            purple: "800080",
            rebeccapurple: "663399",
            red: "f00",
            rosybrown: "bc8f8f",
            royalblue: "4169e1",
            saddlebrown: "8b4513",
            salmon: "fa8072",
            sandybrown: "f4a460",
            seagreen: "2e8b57",
            seashell: "fff5ee",
            sienna: "a0522d",
            silver: "c0c0c0",
            skyblue: "87ceeb",
            slateblue: "6a5acd",
            slategray: "708090",
            slategrey: "708090",
            snow: "fffafa",
            springgreen: "00ff7f",
            steelblue: "4682b4",
            tan: "d2b48c",
            teal: "008080",
            thistle: "d8bfd8",
            tomato: "ff6347",
            turquoise: "40e0d0",
            violet: "ee82ee",
            wheat: "f5deb3",
            white: "fff",
            whitesmoke: "f5f5f5",
            yellow: "ff0",
            yellowgreen: "9acd32"
        };

        // Make it easy to access colors via `hexNames[hex]`
        var hexNames = tinycolor.hexNames = flip(names);

        // Utilities
        // ---------

        // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
        function flip(o) {
            var flipped = {};
            for (var i in o) {
                if (o.hasOwnProperty(i)) {
                    flipped[o[i]] = i;
                }
            }
            return flipped;
        }

        // Return a valid alpha value [0,1] with all invalid values being set to 1
        function boundAlpha(a) {
            a = parseFloat(a);

            if (isNaN(a) || a < 0 || a > 1) {
                a = 1;
            }

            return a;
        }

        // Take input from [0, n] and return it as [0, 1]
        function bound01(n, max) {
            if (isOnePointZero(n)) {
                n = "100%";
            }

            var processPercent = isPercentage(n);
            n = mathMin(max, mathMax(0, parseFloat(n)));

            // Automatically convert percentage into number
            if (processPercent) {
                n = parseInt(n * max, 10) / 100;
            }

            // Handle floating point rounding errors
            if (Math.abs(n - max) < 0.000001) {
                return 1;
            }

            // Convert into [0, 1] range if it isn't already
            return n % max / parseFloat(max);
        }

        // Force a number between 0 and 1
        function clamp01(val) {
            return mathMin(1, mathMax(0, val));
        }

        // Parse a base-16 hex value into a base-10 integer
        function parseIntFromHex(val) {
            return parseInt(val, 16);
        }

        // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
        // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
        function isOnePointZero(n) {
            return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
        }

        // Check to see if string passed in is a percentage
        function isPercentage(n) {
            return typeof n === "string" && n.indexOf('%') != -1;
        }

        // Force a hex value to have 2 characters
        function pad2(c) {
            return c.length == 1 ? '0' + c : '' + c;
        }

        // Replace a decimal with it's percentage value
        function convertToPercentage(n) {
            if (n <= 1) {
                n = n * 100 + "%";
            }

            return n;
        }

        // Converts a decimal to a hex value
        function convertDecimalToHex(d) {
            return Math.round(parseFloat(d) * 255).toString(16);
        }
        // Converts a hex value to a decimal
        function convertHexToDecimal(h) {
            return parseIntFromHex(h) / 255;
        }

        var matchers = function () {

            // <http://www.w3.org/TR/css3-values/#integers>
            var CSS_INTEGER = "[-\\+]?\\d+%?";

            // <http://www.w3.org/TR/css3-values/#number-value>
            var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";

            // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
            var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";

            // Actual matching.
            // Parentheses and commas are optional, but not required.
            // Whitespace can take the place of commas or opening paren
            var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
            var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";

            return {
                CSS_UNIT: new RegExp(CSS_UNIT),
                rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
                rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
                hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
                hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
                hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
                hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
                hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
                hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
                hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
                hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
            };
        }();

        // `isValidCSSUnit`
        // Take in a single string / number and check to see if it looks like a CSS unit
        // (see `matchers` above for definition).
        function isValidCSSUnit(color) {
            return !!matchers.CSS_UNIT.exec(color);
        }

        // `stringInputToObject`
        // Permissive string parsing.  Take in a number of formats, and output an object
        // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
        function stringInputToObject(color) {

            color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();
            var named = false;
            if (names[color]) {
                color = names[color];
                named = true;
            } else if (color == 'transparent') {
                return { r: 0, g: 0, b: 0, a: 0, format: "name" };
            }

            // Try to match string input using regular expressions.
            // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
            // Just return an object and let the conversion functions handle that.
            // This way the result will be the same whether the tinycolor is initialized with string or object.
            var match;
            if (match = matchers.rgb.exec(color)) {
                return { r: match[1], g: match[2], b: match[3] };
            }
            if (match = matchers.rgba.exec(color)) {
                return { r: match[1], g: match[2], b: match[3], a: match[4] };
            }
            if (match = matchers.hsl.exec(color)) {
                return { h: match[1], s: match[2], l: match[3] };
            }
            if (match = matchers.hsla.exec(color)) {
                return { h: match[1], s: match[2], l: match[3], a: match[4] };
            }
            if (match = matchers.hsv.exec(color)) {
                return { h: match[1], s: match[2], v: match[3] };
            }
            if (match = matchers.hsva.exec(color)) {
                return { h: match[1], s: match[2], v: match[3], a: match[4] };
            }
            if (match = matchers.hex8.exec(color)) {
                return {
                    r: parseIntFromHex(match[1]),
                    g: parseIntFromHex(match[2]),
                    b: parseIntFromHex(match[3]),
                    a: convertHexToDecimal(match[4]),
                    format: named ? "name" : "hex8"
                };
            }
            if (match = matchers.hex6.exec(color)) {
                return {
                    r: parseIntFromHex(match[1]),
                    g: parseIntFromHex(match[2]),
                    b: parseIntFromHex(match[3]),
                    format: named ? "name" : "hex"
                };
            }
            if (match = matchers.hex4.exec(color)) {
                return {
                    r: parseIntFromHex(match[1] + '' + match[1]),
                    g: parseIntFromHex(match[2] + '' + match[2]),
                    b: parseIntFromHex(match[3] + '' + match[3]),
                    a: convertHexToDecimal(match[4] + '' + match[4]),
                    format: named ? "name" : "hex8"
                };
            }
            if (match = matchers.hex3.exec(color)) {
                return {
                    r: parseIntFromHex(match[1] + '' + match[1]),
                    g: parseIntFromHex(match[2] + '' + match[2]),
                    b: parseIntFromHex(match[3] + '' + match[3]),
                    format: named ? "name" : "hex"
                };
            }

            return false;
        }

        function validateWCAG2Parms(parms) {
            // return valid WCAG2 parms for isReadable.
            // If input parms are invalid, return {"level":"AA", "size":"small"}
            var level, size;
            parms = parms || { "level": "AA", "size": "small" };
            level = (parms.level || "AA").toUpperCase();
            size = (parms.size || "small").toLowerCase();
            if (level !== "AA" && level !== "AAA") {
                level = "AA";
            }
            if (size !== "small" && size !== "large") {
                size = "small";
            }
            return { "level": level, "size": size };
        }

        // Node: Export function
        if (typeof module !== "undefined" && module.exports) {
            module.exports = tinycolor;
        }
        // AMD/requirejs: Define the module
        else if (typeof define === 'function' && define.amd) {
            define(function () {
                return tinycolor;
            });
        }
        // Browser: Expose to window
        else {
            window.tinycolor = tinycolor;
        }
    })(Math);

},{}],3:[function(require,module,exports){
    var DesignFacade = require('./facade/design/design');

    module.exports = function () {
        var elements = {};
        var debouncedUpdateLoaderPosition = _.debounce(updateLoaderPosition, 600);

        return {
            toggle: toggle,
            initialize: initialize,
            show: function (svgElement) {
                toggle(svgElement, true);
            },
            hide: function (svgElement) {
                toggle(svgElement, false);
            },
            hideAll: function () {
                _.each(elements, removeLoader);
            }
        };

        function initialize() {
            DesignFacade.on('image.create.optimize_resolution', _.partial(toggleLoading, true));
            DesignFacade.on('image.create.resize_external', _.partial(toggleLoading, true));
            DesignFacade.on('image.create.source.url', _.partial(toggleLoading, false));
            DesignFacade.on('image.create.optimus_resolution', _.partial(toggleLoading, false));

            DesignFacade.on('image.update.optimize_resolution', _.partial(toggleLoading, true));
            DesignFacade.on('image.update.resize_external', _.partial(toggleLoading, true));
            DesignFacade.on('image.update.source.url', _.partial(toggleLoading, false));
            DesignFacade.on('image.update.optimus_resolution', _.partial(toggleLoading, false));

            function toggleLoading(value, data) {
                var image = $('#' + data.id)[0];
                image && toggle(image, value);
            }
        }

        function toggle(svgElement, isLoadingShowed) {
            var $svgElement = $(svgElement);
            var $loader = getLoader($svgElement);

            if (!isLoadingShowed) {
                removeLoader($svgElement);
                return;
            }

            $loader || createNewLoader();
            updateLoader.call(svgElement);

            function createNewLoader() {
                var id = $svgElement.attr('id') + '-loader';

                $loader = $('<div>').attr('id', id).addClass('svg-loader').append($('<div>').addClass('animation')).appendTo('#content');

                $svgElement.data('svg-loader', $loader);
                $svgElement.on('change, move', updateLoader);

                elements[$svgElement.attr('id')] = $svgElement;
            }
        }

        function removeLoader($svgElement) {
            var $loader = getLoader($svgElement);

            $svgElement.removeData('svg-loader');
            $svgElement.off('change, move', updateLoader);
            $loader && $loader.remove();

            elements = _.omit(elements, $svgElement.attr('id'));
        }

        function getLoader($svgElement) {
            return $svgElement.data('svg-loader');
        }

        function updateLoader() {
            var svgElement = this;

            if (INKIVE.C.IS_MOBILE) {
                var $loader = getLoader($(svgElement));
                $loader.css('display', 'none');
                debouncedUpdateLoaderPosition(svgElement);
            } else updateLoaderPosition(svgElement);
        }

        function updateLoaderPosition(svgElement) {
            var $loader = getLoader($(svgElement));
            if (!svgElement || !$loader) return;
            $loader.css('display', 'block');

            var top = 0;
            var left = 0;
            var zoom = INKIVE.EditorFacade.handle('zoom', 'get');
            var svgElementBox = svgedit.utilities.getBBox(svgElement);

            addCanvasOffset();
            addTransformOffset();
            addElementOffset();

            $loader.css({
                top: top,
                left: left,
                width: svgElementBox.width * zoom,
                height: svgElementBox.height * zoom
            });

            var angle = svgedit.utilities.getRotationAngle(svgElement);
            angle && $loader.css('transform', 'rotate(' + angle + 'deg)');

            setAnimationPosition();

            function addCanvasOffset() {
                var contentPosition = $('#canvasBackground').offset();
                top = contentPosition.top;
                left = contentPosition.left;
            }

            function addTransformOffset() {
                var transforms = $(svgElement).attr('transform');
                var translateRegExp = /translate\((-?[\d|.]+),(-?[\d|.]+)\)/g;

                transforms && transforms.replace(translateRegExp, function (match, y, x) {
                    top += parseInt(x) * zoom;
                    left += parseInt(y) * zoom;
                });
            }

            function addElementOffset() {
                top += svgElementBox.y * zoom;
                left += svgElementBox.x * zoom;
            }

            function setAnimationPosition() {
                var reffineTop = 5;
                var reffineLeft = -28;

                $loader.children('.animation').css({
                    top: 0 + reffineTop,
                    left: svgElementBox.width * zoom + reffineLeft
                });
            }
        }
    }();

},{"./facade/design/design":19}],4:[function(require,module,exports){
    var decoration, base;
    var defaults = ['eventCategory', 'eventAction', 'eventLabel', 'eventValue', 'fieldsObject'];

    module.exports = function (d, b) {
        if (true) {
            base = b;
            decoration = d;

            var extension = {
                trackEvent: function (params) {
                    var defaultParams = { hitType: 'event' };
                    _.each(defaults, function (key) {
                        if (d[key]) defaultParams[key] = d[key];
                    });

                    INKIVE.C.IS_DEV || typeof ga !== 'undefined' && ga('send', _.extend(defaultParams, params));
                    INKIVE.C.IS_DEV && console.log(_.extend(defaultParams, params));
                }
            };

            _.each(decoration, processDecoratorMethod, extension);
            return b.extend ? b.extend(extension) : _.extend({}, b, extension);
        }

        return b;
    };

    function processDecoratorMethod(trackMethod, key) {
        if (_.contains(defaults, key) || !trackMethod) return;

        if (!_.isFunction(trackMethod)) {
            var trackObject = decoration[key];
            trackMethod = function () {
                this.trackEvent(trackObject);
            };
        }

        this[key] = _.partial(decoratedWrapper, trackMethod, base.prototype[key]);
    }

    function decoratedWrapper(trackMethod, baseFunc) {
        var args = _.rest(arguments, 2);

        trackMethod.apply(this, args);
        baseFunc.apply(this, args);
    }

},{}],5:[function(require,module,exports){
    INKIVE.C.IS_DEV || window.addEventListener('error', function (err) {
        var exception = err.filename + ' [' + err.lineno + ']: ' + err.message;
        ga('send', 'exception', { 'exDescription': exception });
    }, false);

},{}],6:[function(require,module,exports){
    var humps = require('../utils/humps');
    var legacy = require('./legacy-support');

    function AppBridge() {
        this.version = require('./version');
        this.util = INKIVE.Helpers;

        _.bindAll(this, 'propagate');
    }

    AppBridge.prototype = _.extend({}, Backbone.Events);

    AppBridge.prototype.initialize = function () {
        legacy.supportsDesignFacade(this) && initDesignFacade.call(this);
        legacy.supportsEditorFacade(this) && initEditorFacade.call(this);
        legacy.supportsProjectFacade(this) && initProjectFacade.call(this);

        initFactories.call(this);
        initSupportList.call(this);

        legacy.events(this);

        function initFactories() {
            var propagate = this.propagate;
            var shapesFactory = require('../factory/shapes');

            this.factories = {
                shapes: {
                    get: function () {
                        shapesFactory.get.apply(shapesFactory, arguments).then(_.partial(propagate, 'factory', 'shapes_data'));
                    },
                    getCategories: function () {
                        shapesFactory.getCategories().then(_.partial(propagate, 'factory', 'shapes_categories'));
                    }
                }
            };
        }

        function initProjectFacade() {
            var ProjectFacade = require('../facade/project/project');
            ProjectFacade.on('all', _.partial(this.propagate, 'project'));
            this.project = { call: ProjectFacade.handle };
        }

        function initDesignFacade() {
            var DesignFacade = require('../facade/design/design');
            DesignFacade.on('all', _.partial(this.propagate, 'design'));

            this.design = {
                set: DesignFacade.set,
                create: DesignFacade.create,
                call: function () {
                    var result = DesignFacade.handle.apply(DesignFacade, arguments);
                    if (!window.Android) return JSON.stringify(result);
                    appBridge.propagate('design', 'call', result);
                },
                get: function (id, path) {
                    var result = DesignFacade.get.apply(DesignFacade, arguments);
                    if (!window.Android) return JSON.stringify(result);

                    var eventKey = 'get';

                    if (!appBridge.version.isLowerThan('1.1.3')) {
                        eventKey += '.' + id;
                        eventKey += path ? '.' + path : '';
                    }

                    appBridge.propagate('design', eventKey, result);
                }
            };
        }

        function initEditorFacade() {
            var Advice = require('../utils/advice');
            var EditorFacade = require('../facade/editor/editor');
            var ImagesFactory = require('../factory/images');
            Advice.on('all', _.partial(this.propagate, 'editor.advice'));
            EditorFacade.on('all', _.partial(this.propagate, 'editor'));

            this.editor = {
                setImagesData: _.bind(ImagesFactory.setImagesData, ImagesFactory),
                call: function () {
                    var result = EditorFacade.handle.apply(EditorFacade, arguments);
                    if (!window.Android) return JSON.stringify(result);
                    appBridge.propagate('editor', 'call', result);
                },
                get: function (handler, path) {
                    var result = EditorFacade.get.apply(EditorFacade, arguments);
                    if (!window.Android) return JSON.stringify(result);

                    var eventKey = 'get';

                    if (!appBridge.version.isLowerThan('1.1.3')) {
                        eventKey += '.' + handler;
                        eventKey += path ? '.' + path : '';
                    }

                    appBridge.propagate('editor', eventKey, result);
                }
            };
        }

        function initSupportList() {
            var support = require('./support.json');
            var element = {};

            if (window.Android) {
                flatterSupport(support.element);

                this.getSupported = function () {
                    appBridge.propagate('supported', 'get', JSON.stringify({
                        element: element,
                        fonts: INKIVE.C.FONT_LIST
                    }));
                };
            } else {
                this.supported = JSON.stringify(_.extend(support, {
                    fonts: INKIVE.C.FONT_LIST
                }));
            }

            function flatterSupport(data, path) {
                var isRecursive = _.isObject(data);

                if (!isRecursive) element[path] = data;else _.each(data, function (val, key) {
                    flatterSupport(val, path ? path + '.' + key : key);
                });
            }
        }
    };

    AppBridge.prototype.propagate = function (sourceType, eventKey, data) {
        INKIVE.C.IS_DEV && console.log('Bridge triggering: ' + sourceType + '.' + eventKey, data);
        this.callBoth(sourceType + '.' + eventKey, data);
    };

    AppBridge.prototype.callBoth = function (eventName, params) {
        INKIVE.C.IS_DEV && console.log('AppBridge: call');
        if (!INKIVE.C.IS_MOBILE_APP) return false;

        window.Android && _callAndroid(eventName, params);
        window.Android || _callIOS(eventName, params);

        return true;
    };

    AppBridge.prototype.callIOS = function (eventName, params) {
        var isRightPlatform = INKIVE.C.IS_MOBILE_APP && !window.Android;
        isRightPlatform && _callIOS(eventName, params);

        return isRightPlatform;
    };

    AppBridge.prototype.callAndroid = function (eventName, params) {
        var isRightPlatform = INKIVE.C.IS_MOBILE_APP && window.Android;
        isRightPlatform && _callAndroid(eventName, params);

        return isRightPlatform;
    };

    var appBridge = new AppBridge();
    module.exports = appBridge;

    function _callAndroid(eventName, params) {
        var funcName = eventName.match(/(\w+)\.get\.svg_(\d+)/) ? eventName : humps.camelize(eventName);

        funcName = legacy.androidMethodName(funcName);
        params = legacy.androidParameters(_.extend({ cmd: funcName }, { params: params }));

        INKIVE.C.IS_DEV && console.log('Calling Android ' + funcName + ', version ' + appBridge.version.get() + (appBridge.version.isLowerThan('1.0.3') ? ' (lower than 1.0.3)' : '(greater than 1.0.2)'));
        if (appBridge.version.isLowerThan('1.0.3')) Android[funcName].apply(window.Android, params);else Android.trigger(JSON.stringify(params));
    }

    function _callIOS(eventName, params) {
        var funcName = eventName.match(/(\w+)\.get\.svg_(\d+)/) ? eventName : humps.camelize(eventName);
        funcName = legacy.iosMethodName(funcName);

        INKIVE.C.IS_DEV && console.log('Calling iOS ' + funcName);
        iOS.Trigger(legacy.iosParameters(_.extend({ cmd: funcName }, { params: params })));
    }

    var iOS = {
        Trigger: function (object) {
            var $iframe = $('<iframe src="inkive://www.awesome.com/notyourbusiness.php?event=' + encodeURIComponent(JSON.stringify(object)) + '" width="0" height="0" border="0" style="display:none;" ></iframe>').appendTo('body');
            setTimeout(function () {
                $iframe.remove();
            }, 1000);
        }
    };

},{"../facade/design/design":19,"../facade/editor/editor":45,"../facade/project/project":56,"../factory/images":66,"../factory/shapes":80,"../utils/advice":318,"../utils/humps":323,"./legacy-support":8,"./support.json":9,"./version":10}],7:[function(require,module,exports){
    var decoration, base;

    module.exports = function (d, b) {
        if (INKIVE.C.IS_MOBILE_APP) {
            base = b;
            decoration = d;

            var extension = {
                appBridge: require('./bridge')
            };

            _.each(decoration, processDecoratorMethod, extension);
            return b.extend ? b.extend(extension) : _.extend({}, b, extension);
        }

        return b;
    };

    function processDecoratorMethod(func, key) {
        var isCheckMethod = key.match(/Check$/) || key.match(/CheckOnce$/);

        if (!isCheckMethod) {
            var checkMethod = decoration[key + 'Check'];
            var checkOnceMethod = decoration[key + 'CheckOnce'];

            if (checkOnceMethod) {
                if (checkOnceMethod.call(this)) this[key] = func;
            } else if (checkMethod) {
                this[key] = _.partial(decoratedMethodWrapper, checkMethod, func, base.prototype[key]);
            } else {
                this[key] = func;
            }
        }
    }

    function decoratedMethodWrapper(checkFunc, appFunc, baseFunc) {
        var useAppFallback = checkFunc.call(this);

        useAppFallback && appFunc.apply(this, _.rest(arguments, 3));
        useAppFallback || baseFunc && baseFunc.apply(this, _.rest(arguments, 3));
    }

},{"./bridge":6}],8:[function(require,module,exports){
    var methods = {
        android: [],
        ios: [{ funcName: 'sendFacebookCredentials', oldName: 'auth_facebook', usedBefore: '1.1.2' }, { funcName: 'sendInstagramCredentials', oldName: 'auth_instagram', usedBefore: '1.1.2' }, { funcName: 'editorLoaded', oldName: 'editor_loaded', usedBefore: '1.1.2' }, { funcName: 'showTeam', oldName: 'show_team', usedBefore: '1.1.2' }, { funcName: 'catchFile', oldName: 'catch_file', usedBefore: '1.1.2' }, { funcName: 'closeEditor', oldName: 'close_overlay', usedBefore: '1.1.2' }, { funcName: 'shareWithFb', oldName: 'share_with_fb', usedBefore: '1.1.2' }, { funcName: 'design.template.update', oldName: 'design.template.updated', usedBefore: '1.2' }, { funcName: 'design.template.update.designed', oldName: 'design.template.updated.designed', usedBefore: '1.2' }]
    };

    var params = {
        ios: [{ funcName: 'openInNewWindow', usedBefore: '1.1.2', map: function (p) {
            return { cmd: p['cmd'], url: p['params']['url'] };
        } }, { funcName: 'editor_loaded', usedBefore: '1.1.2', map: function (p) {
            return { cmd: p['cmd'], book_id: p['params']['book_id'] };
        } }],
        android: [{ funcName: 'catchFile', usedBefore: '1.0.3', map: function (p) {
            return [p['params']['url']];
        } }, { funcName: 'photoUpload', usedBefore: '1.0.3', map: function (p) {
            return [p['params']['size_name']];
        } }, { funcName: 'editorLoaded', usedBefore: '1.0.3', map: function (p) {
            return [p['params']['book_id']];
        } }, { funcName: 'showTeam', usedBefore: '1.0.3', map: function (p) {
            return [p['params']['x'], p['params']['y']];
        } }]
    };

    module.exports = {
        androidMethodName: _.partial(oldNameReplace, methods.android),
        iosMethodName: _.partial(oldNameReplace, methods.ios),
        androidParameters: _.partial(oldParametersReplace, params.android),
        iosParameters: _.partial(oldParametersReplace, params.ios),
        supportsDesignFacade: function (appBridge) {
            return window.Android && appBridge.version.isGreaterThan('1.0.2') || !window.Android && appBridge.version.isGreaterThan('1.1.1');
        },
        supportsEditorFacade: function (appBridge) {
            return window.Android && !appBridge.version.isLowerThan('1.1') || !window.Android && !appBridge.version.isLowerThan('1.2');
        },
        supportsProjectFacade: function (appBridge) {
            return window.Android && !appBridge.version.isLowerThan('1.1') || !window.Android && !appBridge.version.isLowerThan('1.2');
        },
        events: function (appBridge) {
            var isOldVersion = window.Android && appBridge.version.isLowerThan('1.0.4') || !window.Android && appBridge.version.isLowerThan('1.1.2');

            if (true || isOldVersion) {
                var $ik = $('#ik-editor');

                appBridge.on = _.bind($ik.on, $ik);
                appBridge.off = _.bind($ik.off, $ik);
                appBridge.once = _.bind($ik.one, $ik);
                appBridge.trigger = _.bind($ik.trigger, $ik);
            }
        }
    };

    function oldNameReplace(data, currentName) {
        var AppBridge = require('./bridge');
        var oldMethods = _.where(data, { funcName: currentName });

        _.any(oldMethods, function (oldMethod) {
            if (AppBridge.version.isLowerThan(oldMethod.usedBefore)) {
                console.log('We will use: ' + oldMethod.oldName);
                currentName = oldMethod.oldName;
                return true;
            }
        });

        return currentName;
    }

    function oldParametersReplace(data, params) {
        var AppBridge = require('./bridge');
        var oldParameters = _.where(data, { funcName: params.cmd });

        _.any(oldParameters, function (oldParams) {
            if (AppBridge.version.isLowerThan(oldParams.usedBefore)) {
                params = oldParams.map(params);
                return true;
            }
        });

        return params;
    }

},{"./bridge":6}],9:[function(require,module,exports){
    module.exports={
        "element": {
            "default": {
                "duplicate": true,
                "remove": true,
                "unlock": true,
                "lock": true,
                "deselect": true,
                "rotate": true,
                "opacity": true,
                "resize": true,
                "send": {
                    "forward": true,
                    "backward": true
                }
            },
            "text": {
                "content": true,
                "fontfamily": true,
                "fontsize": true,
                "color": true,
                "bold": true,
                "italic": true,
                "underline": true,
                "bullets": true,
                "align": {
                    "left": true,
                    "center": true,
                    "right": true,
                    "full": true
                },
                "spacing": {
                    "line": true,
                    "word": true,
                    "letter": true
                },
                "link": false,
                "unlink": false
            },
            "image": {
                "crop": true,
                "filter": true,
                "lock_image": true,
                "unlock_image": true,
                "link": false,
                "unlink": false
            },
            "sticker": {
                "fill": {
                    "color": true
                },
                "stroke": {
                    "color": false,
                    "width": false
                },
                "flip": {
                    "horizontal": true,
                    "vertical": true
                },
                "link": false,
                "unlink": false,
            },
            "group": {
                "ungroup": true,
                "link": false,
                "unlink": false
            },
            "multiselect": {
                "duplicate": true,
                "remove": true,
                "group": true
            },
            "shape": {
                "fill": {
                    "color": true
                },
                "stroke": {
                    "color": true,
                    "width": true
                },
                "flip": {
                    "horizontal": true,
                    "vertical": true
                },
                "image_box": true,
                "link": false,
                "unlink": false
            }
        }
    }

},{}],10:[function(require,module,exports){
    var cookieStorage = require('../utils/cookie-storage');
    var currentVersion;

    module.exports = {
        isEqual: function (version) {
            currentVersion = currentVersion || cookieStorage.get('ver');
            return compare(version, currentVersion) === 0;
        },
        isLowerThan: function (version) {
            currentVersion = currentVersion || cookieStorage.get('ver');
            return compare(version, currentVersion) > 0;
        },
        isGreaterThan: function (version) {
            currentVersion = currentVersion || cookieStorage.get('ver');
            return compare(version, currentVersion) < 0;
        },
        get: function () {
            return currentVersion || cookieStorage.get('ver');
        }
    };

    function compare(left, right) {
        if (typeof left + typeof right != 'stringstring') return false;

        var a = left.split('.'),
            b = right.split('.'),
            i = 0,
            len = Math.max(a.length, b.length);

        for (; i < len; i++) {
            if (a[i] && !b[i] && parseInt(a[i]) > 0 || parseInt(a[i]) > parseInt(b[i])) return 1;else if (b[i] && !a[i] && parseInt(b[i]) > 0 || parseInt(a[i]) < parseInt(b[i])) return -1;
        }

        return 0;
    }

},{"../utils/cookie-storage":321}],11:[function(require,module,exports){
    var humps = require('../../utils/humps');

    function Facade() {
        this.handlers = {};
    }

    Facade.prototype = _.extend({}, Backbone.Events);
    Facade.prototype.initialize = function () {
        _.bindAll(this, 'propagate', 'handle');

        this.editor = INKIVE.Tool.getInstance().editor;
        this.canvas = this.editor.canvas;

        _.each(this.handlers, function (handler, key) {
            handler.initialize();
            handler.on('all', _.partial(this.propagate, key));
        }, this);
    };

    Facade.prototype.handle = function (type, action, data) {
        var funcName = humps.camelize(type);
        if (_.isString(type) && _.isFunction(this[funcName])) return this[funcName](action);

        if (action) {
            funcName = humps.camelize(action);

            if (_.isString(type) && this.handlers[type] && _.isFunction(this.handlers[type][funcName])) return this.handlers[type][funcName](data);

            if (_.isString(type) && _.isFunction(this[funcName])) return this[funcName](type);
        }

        if (!_.isString(action) && !data) {
            data = action;
            var elements = _.toArray(this.canvas.getSelectedElems());
            _.each(elements, function (element) {
                singleCall.call(this, this.getType(element), element);
            }, this);

            this.canvas.selectOnly(elements);
        } else {
            var element = $('#' + type)[0];
            var elementType = this.handlers[type] ? type : this.getType(element);
            return singleCall.call(this, elementType, element);
        }

        function singleCall(elementType, element) {
            if (this.handlers[elementType] && _.isFunction(this.handlers[elementType][funcName])) {
                element || this.handlers[elementType][funcName](data);
                element && this.handlers[elementType][funcName](element, data);
            }
        }
    };

    Facade.prototype.propagate = function (handler, eventKey, data) {
        this.trigger(handler + '.' + eventKey, data);
    };

    Facade.prototype.getType = function (element) {
        if (!element) return;

        if ($(element).is('.textarea')) return 'text';
        if ($(element).is('.sticker')) return 'sticker';
        if ($(element).is('.group')) return 'group';

        if (element.nodeName === 'image') return $(element).parent().is('.clipperImage') ? 'imageclipper' : 'image';

        return 'shape';
    };

    Facade.prototype.trigger = function (eventKey, data) {
        if (INKIVE.C.IS_DEV) {
            var now = new Date();
            now = now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds();
            console.log(now + ': ' + eventKey, data);
        }

        Backbone.Events.trigger.apply(this, arguments);
    };

    module.exports = Facade;

},{"../../utils/humps":323}],12:[function(require,module,exports){
    module.exports = ElementCreator;

    function ElementCreator() {};
    ElementCreator.prototype = _.extend({}, Backbone.Events);
    ElementCreator.prototype.initialize = function () {
        this.editor = INKIVE.Tool.getInstance().editor;
        this.canvas = this.editor.canvas;
        this.mandatory = [];
        this.defaults = {
            'position': { 'x': 100, 'y': 100 },
            'rotation': 0,
            'size': { 'width': 100, 'height': 100 },
            'opacity': 1
        };

        _.bindAll(this, 'create', 'getDefinedData');
    };

    ElementCreator.prototype.getDefinedData = function (data, attributeChain) {
        var key,
            path = attributeChain.split('.');
        var defaultValue = this.defaults;

        while (path.length > 0) {
            key = path.shift();
            if (typeof data !== 'undefined') data = data[key];
            if (typeof defaultValue !== 'undefined') defaultValue = defaultValue[key];
        }

        return typeof data === 'undefined' ? defaultValue : data;
    };

},{}],13:[function(require,module,exports){
    var ElementCreator = require('./element');

    module.exports = GraphicCreator;

    function GraphicCreator() {};
    GraphicCreator.prototype = new ElementCreator();
    GraphicCreator.prototype.constructor = GraphicCreator;

    GraphicCreator.prototype.initialize = function () {
        ElementCreator.prototype.initialize.call(this);

        _.bindAll(this, 'updateContent');
        _.extend(this.defaults, {
            'content': null
        });
    };

    GraphicCreator.prototype.updateContent = function (oldElement, data) {
        var content = Base64.decode(data['content']);
        var newElement = INKIVE.Helpers.getStickerFromString(content, data['sticker_id']);

        if (newElement) {
            var oldId = oldElement.getAttribute('id');
            newElement.classList = _(oldElement.classList).without('selected').join(' ');
            this.editor.replaceElement(oldElement, newElement);

            var batchCmd = new svgedit.history.BatchCommand('Paste elements');
            batchCmd.addSubCommand(new svgedit.history.InsertElementCommand(newElement));
            this.canvas.undoMgr.addCommandToHistory(batchCmd);

            this.trigger('delete', oldId);

            var newId = newElement.getAttribute('id');
            this.trigger('', newId);
            this.trigger('content', newId, { content: data['content'] });
        }
    };

},{"./element":12}],14:[function(require,module,exports){
    module.exports = GroupCreator;

    function GroupCreator() {};
    GroupCreator.prototype = _.extend({}, Backbone.Events);
    GroupCreator.prototype.constructor = GroupCreator;

    GroupCreator.prototype.initialize = function () {
        var editor = INKIVE.Tool.getInstance().editor;
        this.canvas = editor.canvas;
    };

    GroupCreator.prototype.create = function () {
        this.canvas.groupSelectedElements();

        var element = this.canvas.getSelectedElems()[0];
        this.trigger('', element.getAttribute('id'));
    };

},{}],15:[function(require,module,exports){
    var ElementCreator = require('./abstract/element');
    var ImageSetter = require('../setters/image');
    var EditorFacade = require('../../editor/editor');
    var ImagesFactory = require('../../../factory/images');

    module.exports = ImageCreator;

    function ImageCreator() {}

    ImageCreator.prototype = _.extend(new ElementCreator(), ImageSetter.prototype);
    ImageCreator.prototype.constructor = ImageCreator;

    ImageCreator.prototype.initialize = function () {
        ElementCreator.prototype.initialize.call(this);

        this.mandatory = ['source.url'];
        _.extend(this.defaults, {
            'placeholder': true,
            'source': {
                'url': INKIVE.C.BASE_URL + 'assets/img/placeholders/imageplaceholder_new.svg',
                'smart_load': true,
                'external_resize': false
            }
        });
    };

    ImageCreator.prototype.create = function (data) {
        var isExternal = this.getDefinedData(data, 'source.external_resize');
        var isLayoutBox = this.getDefinedData(data, 'placeholder');

        element = this.canvas.addElement('image', this.getAddData(data));

        if (isLayoutBox) {
            var id = element.getAttribute('id');
            EditorFacade.once('image.rename.' + id, _.bind(function (data) {
                element = $('#' + data['id'])[0];
                onElementRedy.call(this);
            }, this));

            EditorFacade.handle(id, 'crop', {
                quiet: true, scale: 1
            });
        } else onElementRedy.call(this);

        function onElementRedy() {
            isExternal && this.resizeExternalSearchFoto(element, data);
            !isExternal && this.getDefinedData(data, 'source.smart_load') && this.onVersionData(element, data);

            this.trigger('', element.getAttribute('id'));
        }
    };

    ImageCreator.prototype.onVersionData = function (element, data) {
        ImagesFactory.storeImageData(data['source']['url']);
        ImageSetter.prototype.onVersionData.apply(this, arguments);
    };

    ImageCreator.prototype.getSize = function (element, data) {
        return {
            width: this.getDefinedData(data, 'size.width'),
            height: this.getDefinedData(data, 'size.height')
        };
    };

    ImageCreator.prototype.getAddData = function (data) {
        var getDefinedData = _.bind(this.getDefinedData, this, data);

        return {
            url: getDefinedData('source.url'),
            x: getDefinedData('position.x'),
            y: getDefinedData('position.y'),
            width: getDefinedData('size.width'),
            height: getDefinedData('size.height')
        };
    };

},{"../../../factory/images":66,"../../editor/editor":45,"../setters/image":38,"./abstract/element":12}],16:[function(require,module,exports){
    var GraphicCreator = require('./abstract/graphic');
    var EditorFacade = require('../../editor/editor');
    var ShapesFactory = require('../../../factory/shapes');
    var ElementSetter = require('../setters/abstract/element');

    module.exports = ShapeCreator;

    function ShapeCreator() {};
    ShapeCreator.prototype = new GraphicCreator();
    ShapeCreator.prototype.constructor = ShapeCreator;

    ShapeCreator.prototype.initialize = function () {
        GraphicCreator.prototype.initialize.call(this);
        _.extend(this.defaults, { 'shape_id': null });
    };

    ShapeCreator.prototype.create = function (data) {
        data['content'] && this._create(data);
        data['shape_id'] && this.load(data);
    };

    ShapeCreator.prototype.load = function (data) {
        var id = data['shape_id'].split('_');
        ShapesFactory.get(id[0], id[1]).then(_.bind(function (shape) {
            data['content'] = shape['path'];
            this._create(data);
        }, this));
    };

    ShapeCreator.prototype._create = function (data) {
        var element = this.canvas.addSvgElementFromJson({
            element: 'path',
            curStyles: true,
            attr: this.getAddData(data)
        });

        this.setSize(element, data['size'] ? data : { size: {
            width: this.getDefinedData(data, 'size.width'),
            height: this.getDefinedData(data, 'size.height')
        } });

        this.setPosition(element, { position: {
            x: this.getDefinedData(data, 'position.x'),
            y: this.getDefinedData(data, 'position.y')
        } });

        this.trigger('', element.getAttribute('id'));
    };

    ShapeCreator.prototype.setSize = ElementSetter.prototype.updateSize;

    ShapeCreator.prototype.setPosition = function (element, data) {
        var p = data['position'];
        var bb = element.getBBox();
        var zoom = EditorFacade.handle('zoom', 'get');

        this.canvas.clearSelection();
        this.canvas.selectOnly([element]);
        this.canvas.moveSelectedElements((p.x - bb.x) * zoom, (p.y - bb.y) * zoom);
    };

    ShapeCreator.prototype.getAddData = function (data) {
        return {
            d: data['content'],
            id: this.canvas.getNextId(),
            opacity: this.getDefinedData(data, 'opacity')
        };
    };

},{"../../../factory/shapes":80,"../../editor/editor":45,"../setters/abstract/element":33,"./abstract/graphic":13}],17:[function(require,module,exports){
    var GraphicCreator = require('./abstract/graphic');

    module.exports = StickerCreator;

    function StickerCreator() {};
    StickerCreator.prototype = new GraphicCreator();
    StickerCreator.prototype.constructor = StickerCreator;

    StickerCreator.prototype.initialize = function () {
        GraphicCreator.prototype.initialize.call(this);

        this.mandatory = ['sticker_id'];
        _.extend(this.defaults, {
            'sticker_id': null,
            'thumb_src': INKIVE.C.BASE_URL + 'assets/img/placeholders/imageplaceholder_new.svg'
        });
    };

    StickerCreator.prototype.create = function (data) {
        var element = this.canvas.addElement('sticker', this.getAddData(data));

        data['content'] || this.fetchContent(element, data);
        data['content'] && this.updateContent(element, data);
        this.trigger('', element.getAttribute('id'));
    };

    StickerCreator.prototype.fetchContent = function (element, data) {
        var updateContent = _.partial(this.updateContent, element);
        INKIVE.Helpers.api('search/sticker', 'GET', { id: data['sticker_id'] }, function (result) {
            updateContent(_.extend(data, { 'content': result.content }));
        });
    };

    StickerCreator.prototype.getAddData = function (data) {
        var getDefinedData = _.bind(this.getDefinedData, this, data);

        return {
            x: getDefinedData('position.x'),
            y: getDefinedData('position.y'),
            url: getDefinedData('thumb_src'),
            width: getDefinedData('size.width'),
            height: getDefinedData('size.height'),
            favouiritesId: data['sticker_id']
        };
    };

},{"./abstract/graphic":13}],18:[function(require,module,exports){
    var ElementCreator = require('./abstract/element');

    module.exports = TextCreator;

// We should probably mix INKIVE.Text.Textarea here
    function TextCreator() {};
    TextCreator.prototype = new ElementCreator();
    TextCreator.prototype.constructor = TextCreator;

    TextCreator.prototype.initialize = function () {
        ElementCreator.prototype.initialize.call(this);

        this.mandatory = ['text'];
        _.extend(this.defaults, {
            'content': null,
            'font': {
                'family': 'Lato',
                'size': '21',
                'weight': null,
                'style': null
            },
            'decoration': null
        });
    };

    TextCreator.prototype.create = function (data) {
        var element = this.canvas.addElement('textarea', this.getAddData(data));
        this.trigger('', element.getAttribute('id'));
    };

    TextCreator.prototype.getAddData = function (data) {
        var getDefinedData = _.bind(this.getDefinedData, this, data);

        return {
            x: getDefinedData('position.x'),
            y: getDefinedData('position.y'),
            width: getDefinedData('size.width'),
            text: {
                'font_size': getDefinedData('font.size'),
                'font_family': getDefinedData('font.family'),
                'font_weight': getDefinedData('font.weight'),
                'font_style': getDefinedData('font.style'),
                'text_decoration': getDefinedData('decoration'),
                'textContent': getDefinedData('content')
            }
        };
    };

},{"./abstract/element":12}],19:[function(require,module,exports){
    var Facade = require('./facade');

    function DesignFacade() {}
    DesignFacade.prototype = new Facade();
    DesignFacade.prototype.constructor = DesignFacade;

    DesignFacade.prototype.initialize = function () {
        Facade.prototype.initialize.call(this);
        _.bindAll(this, 'set', 'get', 'create');
    };

    DesignFacade.prototype.delete = function (id) {
        id && this.preSelect(id);
        var elements = this.canvas.getSelectedElems();
        elements.length && this.canvas.deleteSelectedElements();
    };

    DesignFacade.prototype.duplicate = function (id) {
        id && this.preSelect(id);
        var elements = this.canvas.getSelectedElems();
        elements.length && this.canvas.cloneSelectedElements(20, 20);
    };

    DesignFacade.prototype.sendForward = function (id) {
        id && this.preSelect(id);
        var elements = this.canvas.getSelectedElems();
        elements.length && this.canvas.moveUpDownSelected('Up');
    };

    DesignFacade.prototype.sendBackward = function (id) {
        id && this.preSelect(id);
        var elements = this.canvas.getSelectedElems();
        elements.length && this.canvas.moveUpDownSelected('Down');
    };

    DesignFacade.prototype.preSelect = function (id) {
        var element = $('#' + id)[0];
        this.canvas.selectOnly([element]);
    };

    module.exports = new DesignFacade();

},{"./facade":20}],20:[function(require,module,exports){
    var Base = require('../abstract/facade');

    var components = {
        creators: {
            sticker: require('./creators/sticker'),
            shape: require('./creators/shape'),
            image: require('./creators/image'),
            group: require('./creators/group'),
            text: require('./creators/text')
        },
        setters: {
            sticker: require('./setters/sticker'),
            shape: require('./setters/shape'),
            image: require('./setters/image'),
            background: require('./setters/background'),
            text: require('./setters/text'),
            group: require('./setters/group'),
            template: require('./setters/template')
        },
        getters: {
            template: require('./getters/template'),
            text: require('./getters/text'),
            image: require('./getters/image'),
            sticker: require('./getters/sticker'),
            background: require('./getters/background'),
            group: require('./getters/group'),
            shape: require('./getters/shape')
        }
    };

    function Facade() {
        this.handlers = {
            sticker: require('./handlers/sticker'),
            shape: require('./handlers/shape'),
            group: require('./handlers/group')
        };

        _.each(components, function (component, componentName) {
            var componentGroup = {};
            _.each(component, function (ComponentConstructor, componentType) {
                componentGroup[componentType] = new ComponentConstructor();
            });

            this[componentName] = componentGroup;
        }, this);
    }

    Facade.prototype = new Base();
    Facade.prototype.constructor = Facade;
    Facade.prototype.initialize = function () {
        Base.prototype.initialize.call(this);

        _.invoke(this.getters, 'initialize');

        _.each(this.setters, function (setter, key) {
            setter.initialize();
            setter.on('all', _.partial(this.propagate, key + '.update'));
        }, this);

        _.each(this.creators, function (creator, key) {
            creator.initialize();
            creator.on('all', _.partial(this.propagate, key + '.create'));
        }, this);
    };

    Facade.prototype.get = function (id, attributeChain) {
        var element = $('#' + id)[0];
        var elementType = this.getters[id] ? id : this.getType(element);

        if (this.getters[elementType]) {
            var data = element ? this.getters[elementType].get(element, attributeChain) : this.getters[elementType].get(attributeChain);

            return _.extend(data, { type: elementType });
        }
    };

    Facade.prototype.create = function (elementType, data) {
        if (this.creators[elementType]) return this.creators[elementType].create(data);
    };

    Facade.prototype.set = function (id, data) {
        var isApplyToSelected = !_.isString(id) && !data;

        if (isApplyToSelected) {
            data = id;
            var elements = _.toArray(this.canvas.getSelectedElems());
            _.each(elements, function (element) {
                singleSet.call(this, this.getType(element), element);
            }, this);

            this.canvas.selectOnly(elements);
        } else {
            var element = $('#' + id)[0];
            var elementType = this.setters[id] ? id : this.getType(element);
            singleSet.call(this, elementType, element);
        }

        function singleSet(elementType, element) {
            if (this.setters[elementType]) {
                element || this.setters[elementType].set(data);
                element && this.setters[elementType].set(element, data);
            }
        }
    };

    Facade.prototype.propagate = function (handler, eventKey, id, data) {
        if (id) {
            data = _.extend(data || {}, { id: id });
            this.trigger(id + (eventKey ? '.' + eventKey : ''), data);
        }

        this.trigger(handler + (eventKey ? '.' + eventKey : ''), data);
    };

    module.exports = Facade;

},{"../abstract/facade":11,"./creators/group":14,"./creators/image":15,"./creators/shape":16,"./creators/sticker":17,"./creators/text":18,"./getters/background":23,"./getters/group":24,"./getters/image":25,"./getters/shape":26,"./getters/sticker":27,"./getters/template":28,"./getters/text":29,"./handlers/group":30,"./handlers/shape":31,"./handlers/sticker":32,"./setters/background":36,"./setters/group":37,"./setters/image":38,"./setters/shape":39,"./setters/sticker":40,"./setters/template":41,"./setters/text":42}],21:[function(require,module,exports){
    var Getter = require('./getter');

    module.exports = Element;

    function Element() {};
    Element.prototype = new Getter();
    Element.prototype.constructor = Element;

    Element.prototype.initialize = function () {
        this.editor = INKIVE.Tool.getInstance().editor;
        this.canvas = this.editor.canvas;

        this.structure = {
            'id': null,
            'z_index': null,
            'position': { 'x': null, 'y': null },
            'rotation': null,
            'size': { 'width': null, 'height': null },
            'opacity': null,
            'locked': null
        };
    };

    Element.prototype.getId = function () {
        return this.element.getAttribute('id');
    };

    Element.prototype.getRotation = function () {
        return this.canvas.getRotationAngle(this.element);
    };

    Element.prototype.getOpacity = function () {
        var opacity = parseFloat(this.element.getAttribute('opacity'));
        return _.isNaN(opacity) ? 1 : opacity;
    };

    Element.prototype.getPositionX = function () {
        this.bb = this.bb || this.element.getBBox();
        return this.bb.x;
    };

    Element.prototype.getPositionY = function () {
        this.bb = this.bb || this.element.getBBox();
        return this.bb.y;
    };

    Element.prototype.getSizeWidth = function () {
        this.bb = this.bb || this.element.getBBox();
        return this.bb.width;
    };

    Element.prototype.getSizeHeight = function () {
        this.bb = this.bb || this.element.getBBox();
        return this.bb.height;
    };

    Element.prototype.getLocked = function () {
        return $(this.element).hasClass('locked');
    };

},{"./getter":22}],22:[function(require,module,exports){
    var humps = require('../../../../utils/humps');

    module.exports = Getter;

    function Getter() {};
    Getter.prototype = _.extend({}, Backbone.Events);
    Getter.prototype.initialize = function () {
        this.structure = {};
    };

    Getter.prototype.get = function (element, attributeChain) {
        this.element = element;
        this.bb = this.element && this.element.getBBox();

        attributeChain = attributeChain || '';
        this.data = {};
        this.collections = {};
        this.processData = {};

        var attributes = this.getChainAttributes(attributeChain);
        var processModels = _.bind(this.processModels, this, attributeChain);

        _.each(_.filter(attributes, isCollectionAttribute), this.processCollections, this);
        _.each(_.filter(attributes, isModelAttribute), processModels, this);
        this.addCollectionResults(attributeChain);

        return this.data;

        function isCollectionAttribute(attribute) {
            return attribute.split('..').length > 1;
        }

        function isModelAttribute(attribute) {
            return !isCollectionAttribute(attribute);
        }
    };

    Getter.prototype.processCollections = function (finalChain) {
        var keys = finalChain.split('..');
        var collectionName = keys[0];
        var collectionAttribute = keys[1];

        this.collections[collectionName] || createCollection.call(this);

        var collection = this.collections[collectionName];
        var ownGetterMethodName = humps.camelize('get_' + collectionName.replace(/\./g, '_') + '_' + collectionAttribute.replace(/\./g, '_'));
        var remoteGetterMethodName = humps.camelize('get_' + collectionAttribute.replace(/\./g, '_'));

        _.each(this.processData[collectionName], function (result, index) {
            if (!this[ownGetterMethodName] && !result[remoteGetterMethodName]) return;

            var result = result[remoteGetterMethodName] ? result[remoteGetterMethodName](index) : this[ownGetterMethodName](result, index);

            this.addDataResult(collectionAttribute, result, collection[index]);
        }, this);

        function createCollection() {
            var key = 'get_' + collectionName.replace(/\./g, '_');
            var getterMethodName = humps.camelize(key);

            this.collections[collectionName] = {};
            this.processData[collectionName] = this[getterMethodName] ? this[getterMethodName]() : [];

            _.each(this.processData[collectionName], function (result, index) {
                this.collections[collectionName][index] = {};
            }, this);
        }
    };

    Getter.prototype.addCollectionResults = function (attributeChain) {
        var prev = new RegExp(attributeChain + '[\.]?');

        _.each(this.collections, function (collection, index) {
            this.addDataResult(index.replace(prev, ''), collection);
        }, this);
    };

    Getter.prototype.processModels = function (attributeChain, finalChain) {
        var key = 'get_' + finalChain.replace(/\./g, '_');
        var getterMethodName = humps.camelize(key);
        var prev = new RegExp(attributeChain + '[\.]?');

        this[getterMethodName] && this.addDataResult(finalChain.replace(prev, ''), this[getterMethodName]());
    };

    Getter.prototype.addDataResult = function (attributeChain, result, object) {
        var key,
            path = _.compact(attributeChain.split('..')[0].split('.'));
        var current = object || this.data;

        if (!path.length) {
            if (object) object = result;else this.data = result;
            return;
        }

        while (path.length > 1) {
            key = path.shift();
            if (!current[key]) current[key] = {};
            current = current[key];
        }

        current[path.shift()] = result;
    };

    Getter.prototype.getChainAttributes = function (attributeChain, obj) {
        obj = obj || this.getChainEnd(attributeChain);
        var attributes = [];

        typeof obj !== 'undefined' && !_.isObject(obj) && attributes.push(attributeChain);

        _.each(obj, function (value, key) {
            if (attributeChain) key = attributeChain + '.' + (_.isArray(obj) ? '' : key);
            if (value) attributes = _.union(attributes, this.getChainAttributes(key, value));else attributes.push(key);
        }, this);

        return attributes;
    };

    Getter.prototype.getChainEnd = function (attributeChain) {
        var key,
            path = _.compact(attributeChain.split('.'));
        var structureValue = this.structure;

        while (path.length > 0) {
            key = path.shift();
            if (typeof structureValue === 'undefined') return;

            structureValue = structureValue[key];
        }

        return structureValue;
    };

},{"../../../../utils/humps":323}],23:[function(require,module,exports){
    var Getter = require('./abstract/getter');
    var tinycolor = require('../../../../../bower_components/tinycolor/tinycolor');

    module.exports = Background;

    function Background() {};
    Background.prototype = new Getter();
    Background.prototype.constructor = Background;

    Background.prototype.initialize = function () {
        Getter.prototype.initialize.call(this);

        this.structure = {
            'color': null,
            'source': null,
            'background_id': null
        };
    };

    Background.prototype.get = function (attributeChain) {
        return Getter.prototype.get.call(this, $('#svgcontent > .background')[0], attributeChain);
    };

    Background.prototype.getColor = function () {
        var rect = $(this.element).find('rect')[0];
        var color = tinycolor(rect ? rect.getAttribute('fill') : '');
        if (!color.isValid() || !color.getAlpha()) return null;

        return color.toString();
    };

    Background.prototype.getSource = function () {
        var image = $(this.element).find('image')[0];
        return image ? image.getAttribute('xlink:href') : null;
    };

    Background.prototype.getBackgroundId = function () {
        var image = $(this.element).find('image')[0];
        if (!image) return null;

        var className = image.getAttribute('class');

        if (className) {
            var match = className.match(/favourites-background-image-id-(\d+)/);
            return match && match[1];
        }
    };

},{"../../../../../bower_components/tinycolor/tinycolor":2,"./abstract/getter":22}],24:[function(require,module,exports){
    var ElementGetter = require('./abstract/element');
    var AbstractFacade = require('../../abstract/facade');

    module.exports = GroupGetter;

    function GroupGetter() {};
    GroupGetter.prototype = new ElementGetter();
    GroupGetter.prototype.constructor = GroupGetter;

    GroupGetter.prototype.initialize = function () {
        var editor = INKIVE.Tool.getInstance().editor;
        this.canvas = editor.canvas;

        this.structure = {
            'id': null,
            'position': { 'x': null, 'y': null },
            'size': { 'width': null, 'height': null },
            'elements': null,
            'rotation': null,
            'opacity': null,
            'locked': null
        };
    };

    GroupGetter.prototype.getElements = function () {
        return _.map($(this.element).children(), function (element) {
            return { id: element.getAttribute('id'), type: this.getType(element) };
        }, this);
    };

    GroupGetter.prototype.getType = AbstractFacade.prototype.getType;

},{"../../abstract/facade":11,"./abstract/element":21}],25:[function(require,module,exports){
    var Element = require('./abstract/element');
    var ShapeGetter = require('./shape');

    module.exports = Image;

    function Image() {}
    Image.prototype = new Element();
    Image.prototype.constructor = Image;

    Image.prototype.initialize = function () {
        Element.prototype.initialize.call(this);

        this.structure = _.extend(this.structure, {
            'source': { 'url': null },
            'locked_image': null,
            'filter': {
                // TODO
            },
            'crop_area': [{
                'position': { 'x': null, 'y': null },
                'size': { 'width': null, 'height': null },
                'type': null
            }]
        });
    };

    Image.prototype.getSourceUrl = function () {
        return this.element.getAttribute('xlink:href');
    };

    Image.prototype.getLockedImage = function () {
        return $(this.element).hasClass('locked-image');
    };

    Image.prototype.getCropArea = function () {
        var shapes = {};
        var clipID,
            clipPath = this.element.getAttribute('clip-path');

        if (!clipPath) return shapes;
        clipID = clipPath.match(/url\(\"?([^\"\)]*)\"?\)/)[1];
        $(clipID).children('.layoutClipper').each(function (index, elem) {
            shapes[index] = new ShapeGetter();
            shapes[index].element = elem;
        });

        return shapes;
    };

},{"./abstract/element":21,"./shape":26}],26:[function(require,module,exports){
    var Element = require('./abstract/element');
    var TextGetter = require('./text');
    var tinycolor = require('../../../../../bower_components/tinycolor/tinycolor');

    module.exports = Shape;

    function Shape() {};
    Shape.prototype = new Element();
    Shape.prototype.constructor = Shape;

    Shape.prototype.initialize = function () {
        Element.prototype.initialize.call(this);

        this.structure = _.extend(this.structure, {
            'type': null,
            'fill': { 'color': null },
            'stroke': {
                'color': null,
                'width': null,
                'dasharray': null,
                'linejoin': null,
                'linecap': null
            }
        });
    };

    Shape.prototype.getType = function () {
        return this.element.nodeName;
    };

    Shape.prototype.getFillColor = function (element) {
        element = _.isElement(element) ? element : this.element;
        var color = tinycolor(element.getAttribute('fill'));

        return color.isValid() && color.getAlpha() ? color.toString() : null;
    };

    Shape.prototype.getStrokeColor = function () {
        if (!this.element.getAttribute('stroke') && !this.element.getAttribute('stroke-width')) return;

        var color = tinycolor(this.element.getAttribute('stroke') || '#000');
        if (!color.isValid() || !color.getAlpha()) return;

        return color.toString();
    };

    Shape.prototype.getStrokeWidth = function () {
        if (!this.element.getAttribute('stroke')) return;
        return parseInt(this.element.getAttribute('stroke-width')) || 1;
    };

    Shape.prototype.getStrokeDasharray = function () {
        return this.element.getAttribute('stroke-dasharray');
    };

    Shape.prototype.getStrokeLinejoin = function () {
        return this.element.getAttribute('stroke-linejoin');
    };

    Shape.prototype.getStrokeLinecap = function () {
        return this.element.getAttribute('stroke-linecap');
    };

},{"../../../../../bower_components/tinycolor/tinycolor":2,"./abstract/element":21,"./text":29}],27:[function(require,module,exports){
    var Element = require('./abstract/element');
    var TextGetter = require('./text');
    var ShapeGetter = require('./shape');

    module.exports = Sticker;

    function Sticker() {};
    Sticker.prototype = new Element();
    Sticker.prototype.constructor = Sticker;

    Sticker.prototype.initialize = function () {
        Element.prototype.initialize.call(this);

        this.supportedSubElements = ['image', 'ellipse', 'line', 'rect', 'text', 'polygon', 'circle', 'ellipse', 'path', 'g'];
        this.structure = _.extend(this.structure, {
            'texts': [{
                'content': null,
                'decoration': null,
                'color': null,
                'anchor': null,
                'font': {
                    'family': null,
                    'weight': null,
                    'style': null
                }
            }],
            'shapes': [{
                'type': null,
                'fill': { 'color': null },
                'stroke': {
                    'color': null,
                    'width': null,
                    'dasharray': null
                }
            }]
        });
    };

    Sticker.prototype.getTexts = function () {
        return _.map($(this.element).find('.textarea'), function (text) {
            var textGetter = new TextGetter();
            textGetter.element = text;
            textGetter.textarea = new INKIVE.Text.Textarea().setDOM(text);
            textGetter.text = textGetter.textarea.text;

            return textGetter;
        });
    };

    Sticker.prototype.getShapes = function () {
        var shapes = {};

        _.each(this.getElements(), function (elem, index) {
            shapes[index] = new ShapeGetter();
            shapes[index].element = elem;
        });

        return shapes;
    };

    Sticker.prototype.getElementsWithColor = function (element) {
        element = element || this.element;

        var result = {};
        var defaultFillTypes = ['path', 'line', 'polygon', 'rect', 'circle', 'ellipse'];

        _.each(this.getElements(element), checkForColor);

        return result;

        function checkForColor(elem, index) {
            var parentGroup = $(elem).closest('g')[0];

            var inheritFillColor = parentGroup && $.contains(element, parentGroup) && parentGroup.getAttribute('fill');

            var hasAutomaticColor = !inheritFillColor && _.contains(defaultFillTypes, elem.tagName);

            if (elem.getAttribute('fill') || hasAutomaticColor) result[index] = elem;
        }
    };

    Sticker.prototype.getElements = function (element) {
        element = element || this.element;

        var subElements = [element];

        _.each($(element).children(), function (elem) {
            if (_.contains(this.supportedSubElements, elem.tagName)) {
                var isGroup = elem.tagName === 'g';
                var isTextArea = $(elem).hasClass('textarea');

                if (isGroup && !isTextArea) subElements = _.union(subElements, this.getElements(elem));else subElements.push(elem);
            }
        }, this);

        return subElements;
    };

},{"./abstract/element":21,"./shape":26,"./text":29}],28:[function(require,module,exports){
    var Getter = require('./abstract/getter');

    module.exports = Template;

    function Template() {};
    Template.prototype = new Getter();
    Template.prototype.constructor = Template;

    Template.prototype.initialize = function () {
        this.editor = INKIVE.Tool.getInstance().editor;
        this.canvas = this.editor.canvas;

        this.structure = {
            'size': { 'width': null, 'height': null },
            'format': { 'id': null },
            'grid': { 'index_in_set': null, 'number_of_photos': null },
            'designed': { 'id': null }
        };
    };

    Template.prototype.get = function (attributeChain1, attributeChain2) {
        return attributeChain2 ? Getter.prototype.get.call(this, attributeChain1, attributeChain2) : Getter.prototype.get.call(this, $('#svgcontent')[0], attributeChain1);
    };

    Template.prototype.getSizeWidth = function () {
        return this.canvas.contentW;
    };

    Template.prototype.getSizeHeight = function () {
        return this.canvas.contentH;
    };

    Template.prototype.getDesignedId = function () {
        return this.getClassExpData(/layout-id-(\d+)/);
    };

    Template.prototype.getFormatId = function () {
        return this.getClassExpData(/format-id-(\d+)/);
    };

    Template.prototype.getGridIndexInSet = function () {
        return this.getClassExpData(/grid-id-[\d+]-(\d+)/);
    };

    Template.prototype.getGridNumberOfPhotos = function () {
        return this.getClassExpData(/grid-id-(\d+)-[\d+]/);
    };

    Template.prototype.getClassExpData = function (exp) {
        var data;
        var $main = $(this.element).children('g.main');

        _.any($main.attr('class').split(' '), function (className) {
            var match = className.match(exp);
            if (match) return data = match[1];
        });

        return data;
    };

},{"./abstract/getter":22}],29:[function(require,module,exports){
    var Element = require('./abstract/element');

    module.exports = Text;

    function Text() {};
    Text.prototype = new Element();
    Text.prototype.constructor = Text;

    Text.prototype.initialize = function () {
        Element.prototype.initialize.call(this);

        this.structure = _.extend(this.structure, {
            'color': null,
            'anchor': null,
            'content': null,
            'decoration': null,
            'bullet_points': null,
            'font': {
                'family': null,
                'size': null,
                'weight': null,
                'style': null
            },
            'spacing': {
                'letter': null,
                'word': null,
                'line': null
            }
        });
    };

    Text.prototype.get = function (element) {
        this.textarea = new INKIVE.Text.Textarea().setDOM(element);
        this.text = this.textarea.text;

        return Element.prototype.get.apply(this, arguments);
    };

    Text.prototype.getSpacingLetter = function () {
        return this.text['letter_spacing'];
    };
    Text.prototype.getSpacingWord = function () {
        return this.text['word_spacing'];
    };
    Text.prototype.getSpacingLine = function () {
        return this.text['line_spacing'];
    };
    Text.prototype.getFontFamily = function () {
        return this.text['font_family'];
    };
    Text.prototype.getFontSize = function () {
        return this.text['font_size'];
    };
    Text.prototype.getFontWeight = function () {
        return this.text['font_weight'];
    };
    Text.prototype.getFontStyle = function () {
        return this.text['font_style'];
    };
    Text.prototype.getDecoration = function () {
        return this.text['text_decoration'];
    };
    Text.prototype.getAnchor = function () {
        return this.text['text_anchor'];
    };
    Text.prototype.getColor = function () {
        return this.text['fill'];
    };
    Text.prototype.getBulletPoints = function () {
        return this.text['bullets'];
    };
    Text.prototype.getContent = function () {
        var conflictSpace = new RegExp(String.fromCharCode(160), 'g');
        return this.text.textContent.replace(conflictSpace, ' ');
    };

},{"./abstract/element":21}],30:[function(require,module,exports){
    module.exports = _.extend({
        initialize: function () {
            var tool = INKIVE.Tool.getInstance();
            this.canvas = tool.editor.canvas;
        },

        ungroup: function (element) {
            this.canvas.selectOnly([element]);
            this.canvas.ungroupSelectedElement();
        }
    }, Backbone.Events);

},{}],31:[function(require,module,exports){
    module.exports = _.extend({
        initialize: function () {
            this.tool = INKIVE.Tool.getInstance();
            this.editor = this.tool.editor;
            this.canvas = this.editor.canvas;
        },

        flipVertical: function (element) {
            this.canvas.selectOnly([element]);
            this.canvas.setFlip('v');
        },

        flipHorizontal: function (element) {
            this.canvas.selectOnly([element]);
            this.canvas.setFlip('h');
        },

        convertToImageBox: function (element) {
            var clipPathBB = this.canvas.getBBox(element);

            var rect = this.canvas.copyElem(element);
            rect.removeAttribute('stroke');
            rect.removeAttribute('stroke-width');
            rect.removeAttribute('stroke-dasharray');
            rect.removeAttribute('stroke-linejoin');
            rect.removeAttribute('stroke-linecap');
            rect.removeAttribute('stroke-opacity');
            rect.removeAttribute('fill');
            rect.setAttribute('fill-opacity', '1');

            var batchCmd = new svgedit.history.BatchCommand('Convert to imagebox');
            batchCmd.addSubCommand(new svgedit.history.RemoveElementCommand(element, element.nextSibling, element.parentNode));

            svgedit.history.UndoManager.prototype.toggleUndoStackLock(true);
            this.canvas.deleteSelectedElements();
            svgedit.history.UndoManager.prototype.toggleUndoStackLock(false);

            rect.removeAttribute('id');

            var layoutBox = this.canvas.runExtensions('addLayoutBox', {
                elem: rect,
                clipPathBB: clipPathBB
            });

            batchCmd.addSubCommand(new svgedit.history.InsertElementCommand(layoutBox));
            this.canvas.undoMgr.addCommandToHistory(batchCmd);

            INKIVE.Tool.autoSave(rect);
        }
    }, Backbone.Events);

},{}],32:[function(require,module,exports){
    module.exports = _.extend({
        initialize: function () {
            this.tool = INKIVE.Tool.getInstance();
            this.editor = this.tool.editor;
            this.canvas = this.editor.canvas;
        },

        flipVertical: function (element) {
            this.canvas.selectOnly([element]);
            this.canvas.setFlip('v');
        },

        flipHorizontal: function (element) {
            this.canvas.selectOnly([element]);
            this.canvas.setFlip('h');
        }
    }, Backbone.Events);

},{}],33:[function(require,module,exports){
    var humps = require('../../../../utils/humps');
    var EditorFacade = require('../../../editor/editor');

    module.exports = ElementSetter;

    function ElementSetter() {
        this.handledAttributes = ['position', 'rotation', 'opacity', 'size', 'locked'];
    };

    ElementSetter.prototype = _.extend({}, Backbone.Events);
    ElementSetter.prototype.initialize = function () {
        this.editor = INKIVE.Tool.getInstance().editor;
        this.canvas = this.editor.canvas;

        _.bindAll(this, 'set');
    };

    ElementSetter.prototype.set = function (element, data) {
        _.each(data, function (value, attributeName) {
            if (_.contains(this.handledAttributes, attributeName)) {
                var updateMethod = humps.camelize('update_' + attributeName);
                this[updateMethod](element, data);
            }
        }, this);

        this.trigger('', element.getAttribute('id'), data);
    };

    ElementSetter.prototype.selectElement = function (element) {
        var currentSelection = _.compact(_.toArray(this.canvas.getSelectedElems()));

        if (currentSelection.length !== 1 || currentSelection[0] !== element) {
            this.canvas.clearSelection();
            this.canvas.selectOnly([element]);
        }
    };

    ElementSetter.prototype.updatePosition = function (element, data) {
        var p = data['position'];
        var bb = element.getBBox();
        var zoom = EditorFacade.handle('zoom', 'get');

        this.selectElement(element);
        this.canvas.moveSelectedElements((p.x - bb.x) * zoom, (p.y - bb.y) * zoom);
        this.trigger('position', element.getAttribute('id'), { position: p });
    };

    ElementSetter.prototype.updateRotation = function (element, data) {
        this.selectElement(element);
        this.canvas.setRotationAngle(data['rotation']);
        this.trigger('rotation', element.getAttribute('id'), {
            rotation: data['rotation']
        });
    };

    ElementSetter.prototype.updateOpacity = function (element, data) {
        this.updateAttributeNoUndo(element, 'opacity', data['opacity']);
        this.trigger('opacity', element.getAttribute('id'), {
            opacity: data['opacity']
        });
    };

    ElementSetter.prototype.updateLocked = function (element, data) {
        $(element).toggleClass('locked', data['locked']);
        this.trigger('locked', element.getAttribute('id'), {
            locked: data['locked']
        });
    };

    ElementSetter.prototype.updateSize = function (element, data) {
        var size = data['size'];
        if (!size.width && !size.height) return;

        var svgroot = $('#svgroot').get(0);
        var nBB = element.getBBox();

        var translate = svgroot.createSVGTransform();
        var scale = svgroot.createSVGTransform();
        var rtranslate = svgroot.createSVGTransform();

        var tlist = svgedit.transformlist.getTransformList(element);

        if (!size.width || !size.height) {
            var currentRatio = nBB.width / nBB.height;

            if (!size.width) size.width = size.height * currentRatio;
            if (!size.height) size.height = size.width / currentRatio;
        }

        var offsetX = nBB.x + nBB.width / 2;
        var offsetY = nBB.y + nBB.height / 2;

        translate.setTranslate(offsetX, offsetY);
        scale.setScale(size.width / nBB.width, size.height / nBB.height);
        rtranslate.setTranslate(-offsetX, -offsetY);

        tlist.appendItem(translate);
        tlist.appendItem(scale);
        tlist.appendItem(rtranslate);

        svgedit.recalculate.recalculateDimensions(element, nBB);
    };

    ElementSetter.prototype.updateAttributeNoUndo = function (element, attributeName, value) {
        this.canvas.undoMgr.beginUndoableChange(attributeName, [element]);
        this.canvas.changeSelectedAttributeNoUndo(attributeName, value, [element]);

        var batchCmd = this.canvas.undoMgr.finishUndoableChange();
        batchCmd.isEmpty() || this.canvas.undoMgr.addCommandToHistory(batchCmd);
    };

},{"../../../../utils/humps":323,"../../../editor/editor":45}],34:[function(require,module,exports){
    var Element = require('./element');

    module.exports = Graphic;

    function Graphic() {};
    Graphic.prototype = new Element();
    Graphic.prototype.constructor = Graphic;

},{"./element":33}],35:[function(require,module,exports){
    var StickerCreator = require('../../creators/sticker');

    module.exports = {
        setCheckOnce: function () {
            return !window.Android && this.appBridge.version.isEqual('1.1.3');
        },

        set: function (data) {
            if (!this.stickerCreator) {
                this.stickerCreator = new StickerCreator();
                this.stickerCreator.initialize();
            }

            this.stickerCreator.create(data);
        }
    };

},{"../../creators/sticker":17}],36:[function(require,module,exports){
    var humps = require('../../../utils/humps');
    var ElementSetter = require('./abstract/element');
    var ImagesFactory = require('../../../factory/images');
    var EditorFacade = require('../../editor/editor');

    module.exports = BackgroundSetter;

    function BackgroundSetter() {
        this.handledAttributes = ['color', 'source'];
    };

    BackgroundSetter.prototype = new ElementSetter();
    BackgroundSetter.prototype.constructor = BackgroundSetter;

    BackgroundSetter.prototype.set = function (data) {
        _.each(data, function (value, attributeName) {
            if (_.contains(this.handledAttributes, attributeName)) {
                var updateMethod = humps.camelize('update_' + attributeName);
                this[updateMethod](data);
            }
        }, this);

        this.trigger('', null, data);
    };

    BackgroundSetter.prototype.updateSource = function (data) {
        var element = this.editor.replaceBackground({
            type: 'image',
            data: data['source'],
            favouiritesId: data['background_id']
        });

        this.updateResolution(element, data);
        this.trigger('source', null, { 'source': data['source'] });
    };

    BackgroundSetter.prototype.updateColor = function (data) {
        var element = this.editor.replaceBackground({
            type: 'color',
            data: data['color']
        });

        this.trigger('color', null, { 'color': data['color'] });
    };

    BackgroundSetter.prototype.updateResolution = function (element, data) {
        ImagesFactory.smartLoad(data['source'], getBackgroundSize.call(this), _.bind(function (status, optimusImage) {
            var isSameBackground = data['source'] === data['source'];
            if (isSameBackground && status === INKIVE.C.Status.success) {
                data['source'] = optimusImage.src;
                svgedit.utilities.assignAttributes(element, {
                    'xlink:href': data['source']
                });

                this.trigger('source', null, { 'source': data['source'] });
            }
        }, this));

        function getBackgroundSize() {
            var zoom = EditorFacade.handle('zoom', 'get');

            return {
                width: this.canvas.contentW * zoom,
                height: this.canvas.contentH * zoom
            };
        }
    };

},{"../../../factory/images":66,"../../../utils/humps":323,"../../editor/editor":45,"./abstract/element":33}],37:[function(require,module,exports){
    var ElementSetter = require('./abstract/element');

    module.exports = GroupSetter;

    function GroupSetter() {
        this.handledAttributes = ['rotation', 'opacity', 'locked'];
    };

    GroupSetter.prototype = new ElementSetter();
    GroupSetter.prototype.constructor = GroupSetter;

},{"./abstract/element":33}],38:[function(require,module,exports){
    var ElementSetter = require('./abstract/element');
    var EditorFacade = require('../../editor/editor');
    var ImagesFactory = require('../../../factory/images');

    module.exports = ImageSetter;

    function ImageSetter() {
        this.handledAttributes = _.union(['source', 'locked_image'], this.handledAttributes);
    }

    ImageSetter.prototype = new ElementSetter();
    ImageSetter.prototype.constructor = ImageSetter;

    ImageSetter.prototype.updateSourceLock = function (element, data) {
        $(element.getAttribute('id')).toggleClass('locked-image', data['source_lock']);
        this.trigger('source_lock', element.getAttribute('id'), {
            'source_lock': data['source_lock']
        });
    };

    ImageSetter.prototype.updateSource = function (element, data) {
        var isExternal = data['source']['external_resize'];
        var useSmartResize = typeof data['source']['smart_load'] === 'undefined' ? true : data['source']['smart_load'];

        isExternal && this.resizeExternalSearchFoto(element, data);

        if (!isExternal) {
            useSmartResize || this.updateSourceUrl(element, data);
            useSmartResize && this.onVersionData(element, data);
        }

        this.trigger('source', element.getAttribute('id'), {
            'source_lock': data['source_lock']
        });
    };

    ImageSetter.prototype.updateLockedImage = function (element, data) {
        $(element).toggleClass('locked-image', data['locked_image']);
        this.trigger('locked_image', element.getAttribute('id'), {
            'locked_image': data['locked_image']
        });
    };

    ImageSetter.prototype.updateSourceUrl = function (element, data) {
        var useSmartResize = typeof data['source']['smart_load'] === 'undefined' ? true : data['source']['smart_load'];

        if (element.getAttribute('xlink:href') == data['source']['url']) {
            this.trigger('optimus_resolution', element.getAttribute('id'));
            return;
        }

        svgedit.utilities.assignAttributes(element, { 'xlink:href': data['source']['url'] });

        if (useSmartResize || data['source']['external_resize']) {
            var image = new Image();
            image.onload = _.bind(this._onImage, this, element, data, image);
            image.src = data['source']['url'];
        }

        this.trigger('source.url', element.getAttribute('id'), {
            'source': { 'url': data['source']['url'] }
        });
    };

    ImageSetter.prototype._onImage = function (element, data, image) {
        var clipPath = svgedit.utilities.getClipPath(element);
        var clipPathElem = clipPath && clipPath.childNodes[0];
        var bbox = clipPathElem ? clipPathElem.getBBox() : element.getBBox();
        var imageRatio = image.width / image.height;
        var boxRatio = bbox.width / bbox.height;

        data['keep_box_size'] || updateImageBox.call(this);
        data['keep_box_size'] && updateImageSize.call(this);

        function updateImageSize() {
            var newSize = imageRatio > boxRatio ? {
                width: bbox.height * imageRatio,
                height: bbox.height
            } : {
                width: bbox.width,
                height: bbox.width / imageRatio
            };

            this.updateSize(element, { size: newSize });
            this.selectElement(element);

            EditorFacade.handle(element.getAttribute('id'), 'crop', {
                'quiet': true,
                'clip_path': bbox,
                'scale': 1
            });

            this.canvas.clearSelection();
        }

        function updateImageBox() {
            var newSize = imageRatio > boxRatio ? {
                width: bbox.width,
                height: bbox.width / imageRatio
            } : {
                width: bbox.height * imageRatio,
                height: bbox.height
            };

            this.updateSize(element, { size: newSize });
        }
    };

    ImageSetter.prototype.onVersionData = function (element, data) {
        var size = this.getSize(element, data);

        this.trigger('optimize_resolution', element.getAttribute('id'));
        ImagesFactory.smartLoad(data['source']['url'], size, _.bind(function (status, optimusImage) {
            var canUpdateImage = status === INKIVE.C.Status.success || data['source']['url'];
            data['source']['url'] = status === INKIVE.C.Status.success ? optimusImage.src : data['source']['url'];

            canUpdateImage && this.updateSourceUrl(element, data);
        }, this));
    };

    ImageSetter.prototype.getSize = function (element, data) {
        return {
            width: data['size'] ? data['width'] : element.getAttribute('width'),
            height: data['size'] ? data['height'] : element.getAttribute('height')
        };
    };

    ImageSetter.prototype.resizeExternalSearchFoto = function (element, data) {
        var neededSize = getNeededSize.call(this);
        var params = {
            book_id: INKIVE.C.BOOK.id,
            photo_url: ImagesFactory.getOriginalUrl(data['source']['url']),
            platform: neededSize
        };

        var url = INKIVE.C.BASE_URL + 'inkive/resizeexternalsearchphoto';

        $(element).addClass('resizing');
        this.trigger('resize_external', element.getAttribute('id'));
        $.api(url, 'POST', params, _.bind(function (result) {
            if (result.STATUS === 'success') {
                var imageData = {
                    thumb: result['MESSAGE'].replace('/' + neededSize + '/', '/thumb/'),
                    original: result['MESSAGE'].replace('/' + neededSize + '/', '/original/')
                };

                imageData[neededSize] = result['MESSAGE'];
                data['source']['url'] = result['MESSAGE'];

                ImagesFactory.addImageData(imageData, ImagesFactory.defaultAmazonDataNames);
            }

            this.onVersionData(element, data);
            $(element).removeClass('resizing');
        }, this));

        function getNeededSize() {
            var size = this.getSize(element, data);
            var fackedUrl = 'https://s3.amazonaws.com/thumb/';
            var fackedRightSizeUrl = ImagesFactory.getRightSizeUrl(fackedUrl, size);
            var neededSize = _.last(_.compact(fackedRightSizeUrl.split('/'))) || 'web';

            if (neededSize === 'thumb') neededSize = 'mobile';
            if (neededSize === 'original') neededSize = 'largweb';

            return neededSize;
        }
    };

},{"../../../factory/images":66,"../../editor/editor":45,"./abstract/element":33}],39:[function(require,module,exports){
    var GraphicSetter = require('./abstract/graphic');

    module.exports = ShapeSetter;

    function ShapeSetter() {
        this.handledAttributes = _.union(['fill', 'stroke'], this.handledAttributes);
    };

    ShapeSetter.prototype = new GraphicSetter();
    ShapeSetter.prototype.constructor = ShapeSetter;

    ShapeSetter.prototype.updateFill = function (element, data) {
        this.updateAttributeNoUndo(element, 'fill', data['fill']['color']);
        this.trigger('fill', element.getAttribute('id'), {
            fill: data['fill']
        });
    };

    ShapeSetter.prototype.updateStroke = function (element, data) {
        var stroke = data['stroke'];

        typeof stroke['color'] !== 'undefined' && this.updateAttributeNoUndo(element, 'stroke', stroke['color']);

        typeof stroke['width'] !== 'undefined' && this.updateAttributeNoUndo(element, 'stroke-width', stroke['width']);

        typeof stroke['dasharray'] !== 'undefined' && this.updateAttributeNoUndo(element, 'stroke-dasharray', stroke['dasharray']);

        typeof stroke['linejoin'] !== 'undefined' && this.updateAttributeNoUndo(element, 'stroke-linejoin', stroke['linejoin']);

        typeof stroke['linecap'] !== 'undefined' && this.updateAttributeNoUndo(element, 'stroke-linecap', stroke['linecap']);

        this.trigger('stroke', element.getAttribute('id'), {
            stroke: data['stroke']
        });
    };

},{"./abstract/graphic":34}],40:[function(require,module,exports){
    var GraphicSetter = require('./abstract/graphic');
    var ShapeSetter = require('./shape');
    var TextSetter = require('./text');
    var StickerGetter = require('../getters/sticker');
    var AppDecorate = require('../../../app/decorate');

    module.exports = StickerSetter;

    function StickerSetter() {
        this.handledAttributes = _.union(['texts', 'shapes'], this.handledAttributes);

        this.supportedSubElements = ['image', 'ellipse', 'line', 'rect', 'text', 'polygon', 'circle', 'ellipse', 'path', 'g'];
    };

    StickerSetter.prototype = new GraphicSetter();
    StickerSetter.prototype.constructor = StickerSetter;

    StickerSetter.prototype.updateTexts = function (element, data) {
        var textSetter = new TextSetter();
        var subTexts = $(element).find('.textarea');

        textSetter.initialize();
        _.each(data['texts'], function (textData, index) {
            textSetter.set(subTexts[index], textData);
        });

        this.trigger('texts', element.getAttribute('id'), {
            texts: data['texts']
        });
    };

    StickerSetter.prototype.updateShapes = function (element, data) {
        var shapeSetter = new ShapeSetter();
        var elements = this.getElements(element);

        shapeSetter.initialize();
        _.each(data['shapes'], function (shapeData, index) {
            if (elements[index]) {
                var elementsWithColor = this.getElementsWithColor(elements[index]);
                _.each(elementsWithColor, function (elem) {
                    shapeSetter.set(elem, shapeData);
                });
            }
        }, this);

        this.trigger('shapes', element.getAttribute('id'), {
            shapes: data['shapes']
        });
    };

    StickerSetter.prototype.getElements = StickerGetter.prototype.getElements;
    StickerSetter.prototype.getElementsWithColor = StickerGetter.prototype.getElementsWithColor;
    StickerSetter.prototype = AppDecorate(require('./app/sticker'), StickerSetter.prototype);

},{"../../../app/decorate":7,"../getters/sticker":27,"./abstract/graphic":34,"./app/sticker":35,"./shape":39,"./text":42}],41:[function(require,module,exports){
    var ElementSetter = require('./abstract/element');
    var ImagesFactory = require('../../../factory/images');
    var EditorFacade = require('../../../facade/editor/editor');

    module.exports = TemplateSetter;

    function TemplateSetter() {
        this.handledAttributes = [
            //'keep_stage_size',
            'size.width', 'size.height', 'size.unit', 'grid.index_in_set', 'grid.number_of_photos', 'designed.id', 'designed.content'];
    }

    TemplateSetter.prototype = new ElementSetter();
    TemplateSetter.prototype.constructor = TemplateSetter;

    TemplateSetter.prototype.set = function (data) {
        var isTemplateSetCommand = data['designed'] && (data['designed']['id'] || data['designed']['content']);

        var isGridSetCommand = data['grid'] && data['grid']['index_in_set'] && data['grid']['number_of_photos'];

        var isSetCommand = isGridSetCommand || isTemplateSetCommand;

        isTemplateSetCommand && this.setDesignedTemplate(data);
        isGridSetCommand && this.setGridTemplate(data);
        isSetCommand || data['size'] && this.updateSize(data);

        this.trigger('', null, data);
    };

    TemplateSetter.prototype.setDesignedTemplate = function (data) {
        if (data['designed']['content']) onLayoutData.call(this, data['designed']['content']);else INKIVE.Helpers.api('search/layout', 'GET', { id: data['designed']['id'] }, _.bind(onLayoutData, this));

        function onLayoutData(layoutData) {
            data['format'] = { 'id': layoutData['format_id'] };
            data['designed']['id'] = data['designed']['id'] || data['designed']['content']['id'];

            if (!data['keep_stage_size']) {
                data['size'] = {
                    width: layoutData['format_width'],
                    height: layoutData['format_height']
                };
                this.updateSize(data);
            }

            this.onSVGData(data, {
                defs: Base64.decode(layoutData['defs']),
                content: Base64.decode(layoutData['content']),
                background: Base64.decode(layoutData['background'])
            }, layoutData);

            this.trigger('designed', null, { 'designed': data['designed'] });
        }
    };

    TemplateSetter.prototype.setGridTemplate = function (data) {
        var convertToPixels = INKIVE.Helpers.convertUnitsToPixels;

        var url = INKIVE.C.BASE_URL + 'grid/fetch/' + data['grid']['index_in_set'];
        var newWidth = !data['size'] ? this.canvas.contentW : data['size']['unit'] ? convertToPixels(data['size']['width'], data['size']['unit']) : parseInt(data['size']['width']);

        var newHeight = !data['size'] ? this.canvas.contentHeight : data['size']['unit'] ? convertToPixels(data['size']['height'], data['size']['unit']) : parseInt(data['size']['height']);

        var params = {
            width: newWidth,
            height: newHeight,
            number_of_photos: data['grid']['number_of_photos']
        };

        INKIVE.Helpers.sendCmd(url, params, _.bind(function (result) {
            var isSameFormat = params.width == this.canvas.contentW && params.height == this.canvas.contentH;

            result = $.parseJSON(result);
            isSameFormat || this.updateSize(data);

            result['STATUS'] === 'SUCCESS' && this.onSVGData(data, {
                defs: result['MESSAGE'].defs,
                content: result['MESSAGE'].svg
            });

            this.trigger('grid', null, { 'grid': data['grid'] });
        }, this));
    };

    TemplateSetter.prototype.updateSize = function (data) {
        var convertToPixels = INKIVE.Helpers.convertUnitsToPixels;

        var newWidth = data['size']['unit'] ? convertToPixels(data['size']['width'], data['size']['unit']) : parseInt(data['size']['width']);

        var newHeight = data['size']['unit'] ? convertToPixels(data['size']['height'], data['size']['unit']) : parseInt(data['size']['height']);

        var oldWidth = this.canvas.contentW;
        var oldHeight = this.canvas.contentH;

        if (newWidth != oldWidth || newHeight != oldHeight) {
            this.canvas.contentW = newWidth;
            this.canvas.contentH = newHeight;

            removeInfoClasses();
            EditorFacade.handle('zoom', 'fit');
            this.trigger('size', null, { 'size': data['size'] });
        }

        function removeInfoClasses() {
            var element = $('#svgcontent > g.main')[0];
            if (!element) return;
            var list = element.classList;

            _.each(_.compact(list), function (className) {
                className.match(/format-id-[\d+]/) && element.classList.remove(className);
                className.match(/layout-id-[\d+]/) && element.classList.remove(className);
            });
        }
    };

    TemplateSetter.prototype.onSVGData = function (data, layoutInfo, layoutData) {
        this.editor.addElement('layout', $.extend({
            keep: data.setCurrentPage
        }, layoutInfo));

        data['keep_stage_size'] || addInfoClasses($('#svgcontent > g.main'));
        cleanNonsenseTextNodes($('#svgcontent')[0]);
        INKIVE.Helpers.converterCurrentPage();

        data['keep_stage_size'] && fitLayoutContentIntoStage.call(this);

        function addInfoClasses($element) {
            data['designed'] && data['designed']['id'] && $element.addClass('layout-id-' + data['designed']['id']);

            data['format'] && data['format']['id'] && $element.addClass('format-id-' + data['format']['id']);

            data['grid'] && data['grid']['index_in_set'] && data['grid']['number_of_photos'] && $element.addClass('grid-id-' + data['grid']['number_of_photos'] + '-' + data['grid']['index_in_set']);
        }

        function fitLayoutContentIntoStage() {
            var convertToPixels = INKIVE.Helpers.convertUnitsToPixels;

            INKIVE.Helpers.converterLayoutSizeChange(this.canvas.contentW, this.canvas.contentH, convertToPixels(layoutData['format_width'], layoutData['unit']), convertToPixels(layoutData['format_height'], layoutData['unit']));
        }

        function cleanNonsenseTextNodes(node) {
            node.firstChild && cleanNonsenseTextNodes(node.firstChild);
            node.nextSibling && cleanNonsenseTextNodes(node.nextSibling);

            if (node.nodeType === 3) node.nodeValue.match(/(\r\n|\r|\n)+/g) && node.remove();
        }
    };

},{"../../../facade/editor/editor":45,"../../../factory/images":66,"./abstract/element":33}],42:[function(require,module,exports){
    var ElementSetter = require('./abstract/element');

    module.exports = TextSetter;

    function TextSetter() {
        this.handledAttributes = _.union(['content', 'font', 'spacing', 'decoration', 'color', 'anchor', 'bullet_points'], this.handledAttributes);
    };

    TextSetter.prototype = new ElementSetter();
    TextSetter.prototype.constructor = TextSetter;

    TextSetter.prototype.set = function (element) {
        this.textarea = new INKIVE.Text.Textarea().setDOM(element);
        ElementSetter.prototype.set.apply(this, arguments);
        this.textarea.render(this.canvas);
    };

    TextSetter.prototype.updateSpacing = function (element, data) {
        var isUnsettingUnderline = typeof data['decoration'] !== 'undefined' && data['decoration'] !== 'underline';
        var hasUnderline = this.textarea.text['text_decoration'] === 'underline' && !isUnsettingUnderline;

        data = data['spacing'];

        if (hasUnderline && (data['letter'] || data['word'])) require('../../../utils/advice').show('spacing-and-underline');

        if (typeof data['letter'] !== 'undefined' && (!hasUnderline || !data['letter'])) {
            this.textarea.text.setValues({ 'letter_spacing': data['letter'] });
            this.trigger('spacing.letter', element.getAttribute('id'), data['letter']);
        }

        if (typeof data['word'] !== 'undefined' && (!hasUnderline || !data['word'])) {
            this.textarea.text.setValues({ 'word_spacing': data['word'] });
            this.trigger('spacing.word', element.getAttribute('id'), data['word']);
        }

        if (typeof data['line'] !== 'undefined') {
            this.textarea.text.setValues({ 'line_spacing': data['line'] });
            this.trigger('spacing.line', element.getAttribute('id'), data['line']);
        }

        this.trigger('spacing', element.getAttribute('id'), data);
    };

    TextSetter.prototype.updateFont = function (element, data) {
        data = data['font'];

        if (typeof data['family'] !== 'undefined') {
            this.textarea.text.setValues({ 'font_family': data['family'] });
            this.trigger('font.family', element.getAttribute('id'), data['family']);
        }

        if (typeof data['size'] !== 'undefined') {
            this.textarea.text.setValues({ 'font_size': data['size'] });
            this.trigger('font.size', element.getAttribute('id'), data['size']);
        }

        if (typeof data['weight'] !== 'undefined') {
            this.textarea.text.setValues({ 'font_weight': data['weight'] });
            this.trigger('font.weight', element.getAttribute('id'), data['weight']);
        }

        if (typeof data['style'] !== 'undefined') {
            this.textarea.text.setValues({ 'font_style': data['style'] });
            this.trigger('font_style', element.getAttribute('id'), data['style']);
        }

        this.trigger('font', element.getAttribute('id'), data);
    };

    TextSetter.prototype.updateBulletPoints = function (element, data) {
        var isAlignedLeft = this.textarea.text['text_anchor'] == 'start';
        isAlignedLeft || this.updateAnchor(element, { 'anchor': 'start' });

        this.textarea.text.setValues({ 'bullets': data['bullet_points'] });
        this.trigger('bullet_points', element.getAttribute('id'), data['bullet_points']);
    };

    TextSetter.prototype.updateContent = function (element, data) {
        this.textarea.text.setValues({
            'textContent': data['content'].replace(' ', String.fromCharCode(160))
        });

        this.trigger('content', element.getAttribute('id'), data['content']);
    };

    TextSetter.prototype.updateDecoration = function (element, data) {
        var spacing = data['spacing'];
        var isUnsettingLetterSpacing = spacing && typeof spacing['letter'] !== 'undefined' && !spacing['letter'];
        var isUnsettingWordSpacing = spacing && typeof spacing['word'] !== 'undefined' && !spacing['word'];
        var hasLockingSpacing = this.textarea.text['letter_spacing'] && !isUnsettingLetterSpacing || this.textarea.text['word_spacing'] && !isUnsettingWordSpacing;

        if (hasLockingSpacing && data['decoration'] === 'underline') require('../../../utils/advice').show('spacing-and-underline');else {
            this.textarea.text.setValues({ 'text_decoration': data['decoration'] });
            this.trigger('decoration', element.getAttribute('id'), data['decoration']);
        }
    };

    TextSetter.prototype.updateAnchor = function (element, data) {
        this.textarea.text.setValues({ 'text_anchor': data['anchor'] });
        this.trigger('anchor', element.getAttribute('id'), data['anchor']);
    };

    TextSetter.prototype.updateColor = function (element, data) {
        this.textarea.text.setValues({ 'fill': data['color'] });
        this.trigger('color', element.getAttribute('id'), data['color']);
    };

},{"../../../utils/advice":318,"./abstract/element":33}],43:[function(require,module,exports){
    module.exports = {
        _close: function () {
            INKIVE.Helpers.api('inkive/close', 'GET', { scrapbook: INKIVE.C.BOOK.id }, _.bind(onClose, this));

            function onClose() {
                INKIVE.Modal.togglePageLoader(false);
                this.appBridge.callBoth('close_editor');
            }
        }
    };

},{}],44:[function(require,module,exports){
    module.exports = {
        _onSavedCheckOnce: function () {
            return !window.Android && !this.appBridge.version.isLowerThan('2.2.1') || window.Android && !this.appBridge.version.isLowerThan('2.1');
        },

        _onSaved: function (params, deferred, result) {
            params['quiet'] || INKIVE.Modal.togglePageLoader(false);

            if (result) {
                deferred.resolve();
                this.trigger('saved');
            } else {
                deferred.reject();
                this.trigger('403');
            }
        }
    };

},{}],45:[function(require,module,exports){
    var Facade = require('../abstract/facade');
    var AppDecorate = require('../../app/decorate');
    var StickerGetter = require('../design/getters/sticker');

    function EditorFacade() {
        this.handlers = {
            'align': require('./handlers/align'),
            'zoom': require('./handlers/zoom'),
            'page': require('./handlers/page'),
            'cache': require('./handlers/cache'),
            'history': require('./handlers/history'),
            'image': require('./handlers/image'),
            'download': require('./handlers/download'),
            'tool_mode': require('./handlers/tool-mode')
        };

        this.getters = {
            'page': require('./getters/page')
        };
    }

    EditorFacade.prototype = new Facade();
    EditorFacade.prototype.constructor = EditorFacade;
    EditorFacade.prototype.initialize = function (curConfig) {
        Facade.prototype.initialize.call(this);
        this.handlers.zoom.curConfig = curConfig;

        _.bindAll(this, 'get', 'close', 'deselectAll', '_close', '_doubleTap');

        this.tool = INKIVE.Tool.getInstance();
        this.editor = this.tool.editor;

        this.initSelectEvent();
        this.editor.gesture.on('double_click', this._doubleTap);
    };

    EditorFacade.prototype.initSelectEvent = function () {
        var canvas = this.canvas;

        canvas.bind('editor.sub_selected', _.bind(function (c, subElements) {
            subElements = _.compact(subElements);

            if (!isSameSelection(this.subElements, subElements)) this._select(subElements);
        }, this));

        canvas.bind('editor.elem_selected', _.bind(function (c, currentElems) {
            this.subElements.length && this._select(_.compact(currentElems));
        }, this));

        canvas.bind('editor.selected', _.bind(function (c, currentElems) {
            currentElems = _.compact(currentElems);

            if (!isSameSelection(this.selectedElements, currentElems)) {
                canvas.runExtensions('selectedChanged', { elems: currentElems });
                this._select(currentElems);
            }
        }, this));

        function isSameSelection(selectedElements, currentElems) {
            return selectedElements && currentElems.length === selectedElements.length && _.all(currentElems, function (elem1) {
                    return _.any(selectedElements, function (elem2) {
                        return elem1.getAttribute('id') === elem2.getAttribute('id');
                    });
                });
        }
    };

    EditorFacade.prototype.get = function (elementType, attributeChain) {
        if (this.getters[elementType]) return this.getters[elementType].get(attributeChain);
    };

    EditorFacade.prototype.deselectAll = function () {
        this.subElements = [];
        this.selectedElements = [];
        this.canvas.clearSelection();
    };

    EditorFacade.prototype.close = function () {
        var svgCont = this.editor.getSvgString();
        var projectName = Base64.decode(INKIVE.C.BOOK.name).trim().toLowerCase();

        if (!INKIVE.EditorModeManager.isMode('logo') && !INKIVE.C.IS_MOBILE_APP && (projectName == 'new project' || projectName == '')) {
            $('.tool-menu li:not(.active) a[role="tab"][href="#tabSettings"]').trigger('click');
            $('.tool-content #tabSettings .accordion-section-title:not(.active)').trigger('click');
            $('.tool-content #tabSettings #ik-project-name').select().focus();

            this.canvas.call('advice.show', 'project-name');
        } else {
            var saveBeforeClose = !INKIVE.Helpers.areEqual(svgCont, this.handle('cache', 'get'));

            saveBeforeClose || this._close();
            saveBeforeClose && this.handlers['page'].save().then(this._close);
        }
    };

    EditorFacade.prototype.convertToImageBox = function () {
        var elem = this.canvas.getSelectedElems()[0];
        var clipPathBB = this.canvas.getBBox(elem);
        var removeAttributes = ['stroke', 'stroke-width', 'stroke-dasharray', 'stroke-linejoin', 'stroke-linecap', 'stroke-opacity', 'fill'];
        var rect = this.canvas.copyElem(elem);

        _.each(removeAttributes, rect.removeAttribute, rect);
        rect.setAttribute('fill-opacity', '1');

        var batchCmd = new svgedit.history.BatchCommand('Convert to imagebox');
        batchCmd.addSubCommand(new svgedit.history.RemoveElementCommand(elem, elem.nextSibling, elem.parentNode));

        svgedit.history.UndoManager.prototype.toggleUndoStackLock(true);
        this.canvas.deleteSelectedElements();
        svgedit.history.UndoManager.prototype.toggleUndoStackLock(false);

        rect.removeAttribute('id');

        var layoutBox = this.canvas.runExtensions('addLayoutBox', {
            'elem': rect,
            'clipPathBB': clipPathBB
        });

        batchCmd.addSubCommand(new svgedit.history.InsertElementCommand(layoutBox));
        this.canvas.undoMgr.addCommandToHistory(batchCmd);

        INKIVE.Tool.autoSave(rect);
    };

    EditorFacade.prototype._close = function () {
        INKIVE.Modal.togglePageLoader(true);
        INKIVE.Helpers.api('inkive/close', 'GET', { scrapbook: INKIVE.C.BOOK.id }, function () {
            INKIVE.Modal.togglePageLoader(false);
            window.location = INKIVE.EditorModeManager.isMode('logo') ? BASE_URL + 'library' : BASE_URL;
        });
    };

    EditorFacade.prototype._select = function (elems) {
        var designFacade = require('../design/design');

        this.subElements = [];
        this.selectedElements = _.compact(_.map(elems, function (elem) {
            return $(elem).is('.subelement') ? $(elem).closest('.element')[0] : elem;
        }));

        this.trigger('select', _.compact(_.map(elems, _.bind(function (elem) {
            if (elem) {
                if ($(elem).is('.subelement')) {
                    var subElement = elem;
                    elem = $(elem).closest('.element')[0];
                    var innerElement = getInnerElement.call(this, elem, subElement);
                    this.subElements.push(subElement);
                }

                return elem && _.extend(designFacade.get(elem.getAttribute('id')), { inner_element: innerElement });
            }
        }, this))));

        function getInnerElement(elem, subElement) {
            var innerElement;
            var superElementType = this.getType(elem);

            if (superElementType === 'sticker') {
                var stickerGetter = new StickerGetter();
                stickerGetter.element = elem;
                _.any(stickerGetter.getTexts(), function (textGetter, index) {
                    if (textGetter.element === subElement) return innerElement = { type: 'text', index: index };
                });
            }

            return innerElement;
        }
    };

    EditorFacade.prototype._doubleTap = function (event) {
        var designFacade = require('../design/design');
        var elems = this.canvas.getSelectedElems();

        this.trigger('double_tap', _.map(elems, _.bind(function (elem) {
            var innerElement;
            var type = this.getType(elem);

            if (type === 'sticker') {
                var textArea = $(event.target).closest('g.textarea')[0];
                if (textArea) {
                    var stickerGetter = new StickerGetter();
                    stickerGetter.element = elem;
                    _.any(stickerGetter.getTexts(), function (textGetter, index) {
                        if (textGetter.element === textArea) return innerElement = { type: 'text', index: index };
                    });
                }
            }

            return _.extend(designFacade.get(elem.getAttribute('id')), { inner_element: innerElement });
        }, this)));
    };

    module.exports = AppDecorate(require('./app/editor'), new EditorFacade());

},{"../../app/decorate":7,"../abstract/facade":11,"../design/design":19,"../design/getters/sticker":27,"./app/editor":43,"./getters/page":46,"./handlers/align":47,"./handlers/cache":48,"./handlers/download":49,"./handlers/history":50,"./handlers/image":51,"./handlers/page":52,"./handlers/tool-mode":53,"./handlers/zoom":54}],46:[function(require,module,exports){
    module.exports = {
        get: function (attributeChain) {
            if (attributeChain === 'current') return parseInt(INKIVE.Tool._current_page_id);
            if (attributeChain === 'total') return parseInt(INKIVE.C.BOOK.num_pages);
        }
    };

},{}],47:[function(require,module,exports){
    module.exports = _.extend({
        initialize: function () {
            this.tool = INKIVE.Tool.getInstance();
            this.editor = this.tool.editor;
            this.canvas = this.editor.canvas;
            this.svgroot = $('#svgroot').get(0);
        },

        verticalMiddle: function () {
            this.doAlign(function (mainBB, bb) {
                return { x: 0, y: mainBB.y + mainBB.height / 2 - (bb.y + bb.height / 2) };
            });
        },

        horizontalMiddle: function (params) {
            this.doAlign(function (mainBB, bb) {
                return { x: mainBB.x + mainBB.width / 2 - (bb.x + bb.width / 2), y: 0 };
            });
        },

        left: function () {
            this.doAlign(function (mainBB, bb) {
                return { x: mainBB.x - bb.x, y: 0 };
            });
        },

        right: function () {
            this.doAlign(function (mainBB, bb) {
                return { x: mainBB.x + mainBB.width - (bb.x + bb.width), y: 0 };
            });
        },

        top: function () {
            this.doAlign(function (mainBB, bb) {
                return { x: 0, y: mainBB.y - bb.y };
            });
        },

        bottom: function () {
            this.doAlign(function (mainBB, bb) {
                return { x: 0, y: mainBB.y + mainBB.height - (bb.y + bb.height) };
            });
        },

        doAlign: function (callback) {
            var that = this;
            var elems = this.canvas.getSelectedElems();
            if (!elems) return;

            var mainBB,
                len = elems.length;
            if (len > 2) {
                len--;
                mainBB = this.getBBox(elems[len]);
            } else {

                mainBB = svgedit.utilities.getBBox($('#canvasBackground').get(0));
                var offset = Math.min(mainBB.width * 0.1, mainBB.height * 0.1);

                var bbox = this.getBBox(elems[0]);
                if (bbox.height + offset > mainBB.height || bbox.width + offset > mainBB.width) offset = 0;

                mainBB.x += offset;
                mainBB.y += offset;
                mainBB.width -= offset * 2;
                mainBB.height -= offset * 2;
            }

            for (var i = 0; i < len; i++) {
                var bb = this.getBBox(elems[i]);
                that.setPosition(elems[i], callback(mainBB, bb));
            }

            this.canvas.runExtensions("clear", {});
        },

        getBBox: function (selected) {
            var zoom = this.canvas.getZoom();
            var coords = INKIVE.Helpers.getSelectedCoordinates(selected);

            return {
                'x': coords.x1 / zoom,
                'y': coords.y1 / zoom,
                'width': (coords.x2 - coords.x1) / zoom,
                'height': (coords.y3 - coords.y1) / zoom
            };
        },

        setPosition: function (elem, coords) {
            var xform = this.svgroot.createSVGTransform();
            var tlist = svgedit.transformlist.getTransformList(elem);

            xform.setTranslate(coords.x, coords.y);
            tlist.appendItem(xform);

            svgedit.recalculate.recalculateDimensions(elem);
            this.canvas.selectorManager.requestSelector(elem).resize();
        }

    }, Backbone.Events);

},{}],48:[function(require,module,exports){
    var cache = {};

    module.exports = _.extend({
        initialize: function () {},
        clear: function () {
            cache = {};
        },

        set: function (params) {
            params['page_number'] = params['page_number'] || INKIVE.Tool._current_page_id;
            cache[params['page_number']] = params['data'];
        },

        get: function (params) {
            params = params || { 'page_number': INKIVE.Tool._current_page_id };
            return cache[params['page_number']];
        },

        remove: function (params) {
            var newCache = {};
            params = params || { 'page_number': INKIVE.Tool._current_page_id };

            _.each(cache, function (data, index) {
                if (index != params['page_number']) {
                    var newIndex = index > params['page_number'] ? parseInt(index) - 1 : index;
                    newCache[newIndex] = data;
                }
            });

            cache = newCache;
        },

        add: function (params) {
            var newCache = {};
            params = params || { 'page_number': INKIVE.Tool._current_page_id };

            _.each(cache, function (data, index) {
                var newIndex = index >= params['page_number'] ? parseInt(index) + 1 : index;
                newCache[newIndex] = data;
            });

            cache = newCache;
        }
    }, Backbone.Events);

},{}],49:[function(require,module,exports){
    module.exports = _.extend({
        initialize: function () {
            this.tool = INKIVE.Tool.getInstance();
            this.editor = this.tool.editor;
            this.canvas = this.editor.canvas;
        },

        pdf: function () {
            return this.displayModal('pdf');
        },
        jpeg: function () {
            return this.displayModal('jpeg');
        },
        png: function () {
            return this.displayModal('png');
        },

        displayModal: function (format) {
            var download = _.bind(this._download, this);
            var translate = INKIVE.TranslateHelper.translate;

            var modalData = new INKIVE.ModalDownload({
                format: format,
                contentW: this.canvas.contentW,
                contentH: this.canvas.contentH
            });

            var modal = INKIVE.Modal.modalWindow(modalData.getFormHtml(), {
                width: 600,
                headerIcon: 'icon-cloud-download',
                headerTitle: translate('modal.title.download_format', { format: format.toUpperCase() }),
                buttons: [{
                    title: translate('modal.buttons.download'),
                    onClick: function () {
                        download($(this), modal, modalData);
                    }
                }]
            });
        },

        _download: function ($button, modal, modalData) {
            var tool = this.tool;
            $button.addClass('disabled');

            var alert = INKIVE.Modal.alertMessage(INKIVE.TemplatesHelper('alert_bold', {
                message: 'modal.alert.preparing_file'
            }), { skip: false, loader: true });

            INKIVE.EditorFacade.handle('page', 'save').then(function () {
                modalData.download(afterSave);
            });

            function afterSave(status) {
                if (status) {
                    modal.close();
                    INKIVE.C.IS_MOBILE && tool.onMobileBackMenu();
                } else $button.removeClass('disabled');

                alert.close();
            }
        }
    }, Backbone.Events);

},{}],50:[function(require,module,exports){
    module.exports = _.extend({
        initialize: function () {
            this.tool = INKIVE.Tool.getInstance();
            this.canvas = this.tool.editor.canvas;
        },

        undo: function () {
            this.canvas.undoMgr.undo();
        },
        redo: function () {
            this.canvas.undoMgr.redo();
        }
    }, Backbone.Events);

},{}],51:[function(require,module,exports){
    module.exports = _.extend({
        initialize: function () {
            this.tool = INKIVE.Tool.getInstance();
            this.editor = this.tool.editor;
            this.canvas = this.editor.canvas;
        },

        filter: function (element) {
            $('<div>').filterpicker({
                $svgImageElement: $(element)
            }).trigger('click');
        },

        crop: function (element, params) {
            params = params || {};

            if (!$(element).hasClass('layoutBox')) {
                element = this._convertToLayoutBox(element, params);
                this.canvas.call('advice.show', 'convert-to-layout-box');

                var count = 10;
                var timerId = setInterval(function () {
                    $('symbol#arrow circle').attr('fill', count % 2 ? '#ffdd17' : '#ffffff');
                    count-- || clearInterval(timerId);
                }, 400);

                this.canvas.addToSelection([element], true);
            } else if (params['clip_path']) {
                this._resizeClipPaht(element, params);
            }

            if (!params['quiet']) {
                var editorFacade = require('../editor');
                var zoom = editorFacade.handle('zoom', 'get');

                _.defer(_.bind(function () {
                    this._fitZoomToImageSize(editorFacade, element);
                    this.canvas.runExtensions('showLayoutClipper', {
                        layout: element,
                        callback: _.partial(editorFacade.handle, 'zoom', 'set', { zoom: zoom })
                    });
                }, this));
            }
        },

        _resizeClipPaht: function (element, params) {
            var clipPath = svgedit.utilities.getClipPath(element);
            var clipPathElem = clipPath.childNodes[0];

            clipPathElem.setAttribute('x', params['clip_path'].x);
            clipPathElem.setAttribute('y', params['clip_path'].y);
            clipPathElem.setAttribute('width', params['clip_path'].width);
            clipPathElem.setAttribute('height', params['clip_path'].height);
        },

        _convertToLayoutBox: function (element, params) {
            var originalBox = this.canvas.getBBox(element);
            var clipPathBB = params['clip_path'] || originalBox;
            var oldId = element.getAttribute('id');
            var src = element.getAttribute('xlink:href');
            var layoutBox = this.canvas.addSvgElementFromJson({
                element: 'rect',
                curStyles: false,
                attr: {
                    x: clipPathBB.x,
                    y: clipPathBB.y,
                    id: this.canvas.getNextId(),
                    width: clipPathBB.width,
                    height: clipPathBB.height
                }
            });

            svgedit.history.UndoManager.prototype.toggleUndoStackLock(true);
            $(element).remove();
            svgedit.history.UndoManager.prototype.toggleUndoStackLock(false);

            element = this.canvas.runExtensions('addLayoutBox', {
                elem: layoutBox,
                clipPathBB: clipPathBB,
                'xlink:href': src
            });

            var scale = params['scale'] || 1.2;
            var newWidth = originalBox.width * scale;
            var newHeight = originalBox.height * scale;

            this.trigger('rename.' + oldId, { id: element.getAttribute('id') });
            element.setAttribute('width', newWidth);
            element.setAttribute('height', newHeight);
            element.setAttribute('x', originalBox.x - (newWidth - originalBox.width) / 2);
            element.setAttribute('y', originalBox.y - (newHeight - originalBox.height) / 2);

            $(element).addClass('layoutBox');

            return element;
        },

        _fitZoomToImageSize: function (editorFacade, element) {
            var clipBox = svgedit.utilities.getBBox(element);
            isFullImageZoom() || editorFacade.handle('zoom', 'fit', svgedit.utilities.getBBox(element));

            clipBox && editorFacade.handle('zoom', 'center', {
                x: clipBox.x + clipBox.height / 2,
                y: clipBox.y + clipBox.width / 2
            });

            function isFullImageZoom() {
                var padding = 10;
                var imageBox = element.getBoundingClientRect();
                var canvasBox = $('#svgcanvas')[0].getBoundingClientRect();

                return imageBox.width < canvasBox.width && imageBox.height < canvasBox.height;
            }
        }
    }, Backbone.Events);

},{"../editor":45}],52:[function(require,module,exports){
    var AppDecorate = require('../../../app/decorate');
    var EditorModeManager = require('../../../ui/editor-mode-manager');

    module.exports = AppDecorate(require('../app/page'), _.extend({
        initialize: function () {
            this.tool = INKIVE.Tool.getInstance();
            this.editor = this.tool.editor;
            this.canvas = this.editor.canvas;
        },

        unload: function (params) {
            var editorFacade = require('../editor');

            params = params || {};
            params['page_number'] = params['page_number'] || INKIVE.Tool._current_page_id;
            params['remove_from_cache'] && editorFacade.handle('cache', 'remove', params['page_number']);

            if (INKIVE.Tool._current_page_id == params['page_number']) INKIVE.Tool._current_page_id = 0;
        },

        moveTo: function (params) {
            var currentPage = INKIVE.Tool._current_page_id;
            var hasToSave = currentPage && params['save'] !== false;
            var deferred = $.Deferred();
            this.canvas.clearSelection();

            if (params['page_number'] == currentPage) {
                if (INKIVE.C.IS_MOBILE && $('#pages-panel').height()) this.tool.onMobileBackMenu();

                deferred.resolve();

                return deferred.promise();
            }

            params['quiet'] || INKIVE.Modal.togglePageLoader(true);
            hasToSave || onSaved.call(this);
            hasToSave && this.save({ quiet: true }).then(_.bind(onSaved, this));

            return deferred.promise();

            function onSaved() {
                this._moveTo(params['page_number']).then(function () {
                    params['quiet'] || INKIVE.Modal.togglePageLoader(false);
                    deferred.resolve();
                });
            }
        },

        save: function (params) {
            params = params || { quiet: false };
            var savingDeferred,
                deferred = $.Deferred();
            var svgCont = this.editor.getSvgString();
            var currentLayer = this.canvas.getCurrentDrawing().getCurrentLayer();

            // NEED TO CLEAN THIS
            var isLegacySave = _.contains(['template', 'sticker', 'banner', 'placeholder'], EditorModeManager.getMode());

            if (isLegacySave) {
                params['quiet'] || INKIVE.Modal.togglePageLoader(true);
                this.tool.save(null, function () {
                    params['quiet'] || INKIVE.Modal.togglePageLoader(false);
                    deferred.resolve();
                });

                return deferred.promise();
            }
            // ------------------

            if (INKIVE.Helpers.areEqual(svgCont, INKIVE.EditorFacade.handle('cache', 'get')) || currentLayer && currentLayer.getAttribute('class') == 'clipperImage') {
                deferred.resolve();

                this.trigger('already_saved');
                this.editor.canvas.call('advice.show', 'already-saved');

                return deferred.promise();
            }

            params['quiet'] || INKIVE.Modal.togglePageLoader(true);
            this.trigger('saving');
            this.tool.savePage(params['quiet'], _.bind(this._onSaved, this, params, deferred));

            return deferred.promise();
        },

        _onSaved: function (params, deferred, result) {
            params['quiet'] || INKIVE.Modal.togglePageLoader(false);

            if (result) {
                deferred.resolve();
                this.trigger('saved');
            } else {
                INKIVE.Modal.alertMessage(INKIVE.TemplatesHelper('alert_default', {
                    message: 'modal.alert.save',
                    try_again: true
                }));
                deferred.reject();
            }
        },

        _moveTo: function (pageNumber) {
            var deferred = $.Deferred();

            this.tool.load(pageNumber, _.bind(function (boolen) {
                this.trigger('move_to');
                INKIVE.C.IS_MOBILE && this.tool.updateCurrentPageInfo();

                if (INKIVE.C.IS_MOBILE && $('#pages-panel').height()) this.tool.onMobileBackMenu();

                deferred.resolve();
            }, this));

            return deferred.promise();
        }
    }, Backbone.Events));

},{"../../../app/decorate":7,"../../../ui/editor-mode-manager":102,"../app/page":44,"../editor":45}],53:[function(require,module,exports){
    module.exports = _.extend({
        initialize: function () {
            this.tool = INKIVE.Tool.getInstance();
            this.editor = this.tool.editor;
        },

        select: function () {
            this.editor.setMode('select');
        },
        fhpath: function () {
            this.editor.setMode('fhpath');
        },
        square: function () {
            this.editor.setMode('square');
        },
        rect: function () {
            this.editor.setMode('rect');
        },
        circle: function () {
            this.editor.setMode('circle');
        },
        ellipse: function () {
            this.editor.setMode('ellipse');
        },
        line: function () {
            this.editor.setMode('line');
        }
    }, Backbone.Events);

},{}],54:[function(require,module,exports){
    module.exports = _.extend({
        initialize: function () {
            this.tool = INKIVE.Tool.getInstance();
            this.editor = this.tool.editor;
            this.canvas = this.editor.canvas;

            this.zoomIncrement = 0.05;
            this.zoomLowLimit = 0.3;
            this.zoomHightLimit = 4;
        },

        get: function () {
            return this.canvas.getZoom();
        },

        set: function (params) {
            params && this.canvas.setZoom(params['zoom']);
        },

        fit: function (params) {
            params = params || {
                    width: this.canvas.contentW,
                    height: this.canvas.contentH
                };

            var wWidth = $(this.curConfig.workarea).width();
            var wHeight = $(this.curConfig.workarea).height();
            var offset = INKIVE.C.IS_MOBILE ? 5 : 90;

            var cWidth = parseFloat(params['width']) + offset;
            var cHeight = parseFloat(params['height']) + offset;

            var wCoof = wWidth / cWidth;
            var hCoof = wHeight / cHeight;
            var zoom = wCoof > hCoof ? hCoof : wCoof;

            this.canvas.setZoom(this.getForcedZoomLimits(zoom));
        },

        center: function (params) {
            var zoom = this.canvas.getZoom();
            var center = {
                top: params['y'] * zoom,
                left: params['x'] * zoom
            };

            var workareaCenter = {
                top: $(this.curConfig.workarea).height() / 2,
                left: $(this.curConfig.workarea).width() / 2
            };

            var $container = $('#ik-editor > .antiscroll-inner');
            $container.scrollTop(center['top'] - workareaCenter['top']);
            $container.scrollLeft(center['left'] - workareaCenter['left']);
        },

        original: function () {
            this.canvas.setZoom(1.0);
        },

        in: function () {
            var zoom = this.canvas.getZoom();
            var proportions = this.getZoomProportions();
            zoom += this.zoomIncrement * proportions.avg * zoom;

            this.canvas.setZoom(this.getForcedZoomLimits(zoom, proportions));
        },

        out: function () {
            var zoom = this.canvas.getZoom();
            var proportions = this.getZoomProportions();
            zoom -= this.zoomIncrement * proportions.avg * zoom;

            this.canvas.setZoom(this.getForcedZoomLimits(zoom, proportions));
        },

        getForcedZoomLimits: function (zoom, proportions) {
            proportions = proportions || this.getZoomProportions();
            var increment = this.zoomIncrement * proportions.avg * this.canvas.getZoom();

            if (proportions.avg * zoom >= this.zoomHightLimit) zoom -= increment;else if (proportions.hight * zoom <= this.zoomLowLimit && zoom < 1) zoom += increment;

            return zoom;
        },

        getZoomProportions: function () {
            var wWidth = $(this.curConfig.workarea).width();
            var wHeight = $(this.curConfig.workarea).height();
            var proportionalW = this.canvas.contentW / wWidth;
            var proportionalH = this.canvas.contentH / wHeight;

            return {
                low: proportionalW < proportionalH ? proportionalW : proportionalH,
                hight: proportionalW > proportionalH ? proportionalW : proportionalH,
                avg: (proportionalW + proportionalH) / 2
            };
        }
    }, Backbone.Events);

},{}],55:[function(require,module,exports){
    var EditorFacade = require('../../editor/editor');
    var DesignFacade = require('../../design/design');

    module.exports = _.extend({
        initialize: function () {
            _.bindAll(this, '_onAdd', 'add', '_onRemove', 'remove');

            this.tool = INKIVE.Tool.getInstance();
            this.editor = this.tool.editor;
        },

        remove: function (params) {
            var deferred = $.Deferred();
            var data = {
                'page': params['page_number'] || INKIVE.Tool._current_page_id,
                'scrapbookId': INKIVE.C.BOOK.id
            };

            var onRemove = _.partial(this._onRemove, params, deferred);
            var proceeds = _.partial(INKIVE.Helpers.api, 'page/page', 'DELETE', data, onRemove);

            this.editor.canvas.clearSelection();

            INKIVE.Modal.alertMessage(INKIVE.TemplatesHelper('alert_span', {
                text: INKIVE.C.BOOK.num_pages == 1 ? INKIVE.TranslateHelper.translate('modal.alert.can_delete_last') : INKIVE.TranslateHelper.translate('modal.alert.delete_page', {
                    page_number: params['page_number'],
                    is_current_page: INKIVE.Tool._current_page_id == params['page_number']
                })
            }), { callback: [proceeds, function () {
                deferred.reject();
            }] });

            return deferred.promise();
        },

        _onRemove: function (params, deferred, result) {
            if (result && result.status == 'success') {
                if (INKIVE.C.BOOK.num_pages == 1 && !INKIVE.C.IS_MOBILE_APP) window.location = INKIVE.EditorModeManager.isMode('logo') ? BASE_URL + 'library' : BASE_URL;else {
                    INKIVE.C.BOOK.num_pages--;
                    this.trigger('removed', params);

                    if (INKIVE.Tool._current_page_id == params['page_number']) EditorFacade.handle('page', 'move_to', {
                        'page_number': params['page_number'] + 1 >= INKIVE.C.BOOK.num_pages ? 1 : params['page_number'] + 1
                    }).then(function () {
                        deferred.resolve();
                    });else deferred.resolve();
                }
            } else deferred.reject();
        },

        add: function (params) {
            var deferred = $.Deferred();
            var canvas = this.editor.canvas;
            params = _.extend({
                'page_number': parseInt(INKIVE.C.BOOK.num_pages) + 1,
                'size': { width: canvas.contentW, height: canvas.contentH }
            }, params);

            var url = INKIVE.C.BASE_URL + 'inkiveeditor/addPage/' + INKIVE.C.BOOK.id + '/' + params['page_number'];

            canvas.clearSelection();
            INKIVE.Modal.togglePageLoader(true);
            $.get(url, null, _.partial(this._onAdd, params, deferred));

            return deferred.promise();
        },

        _onAdd: function (params, deferred, result) {
            INKIVE.Modal.togglePageLoader(false);
            result = $.parseJSON(result);

            if (result.status == 'success') {
                INKIVE.C.BOOK.num_pages++;
                EditorFacade.handle('cache', 'clear');

                this.trigger('added', params);
                EditorFacade.handle('page', 'move_to', {
                    'page_number': result.data['now']
                }).then(_.debounce(function () {
                    DesignFacade.set('template', { size: params['size'] });
                    deferred.resolve();
                }, 0));
            } else deferred.reject();
        }
    }, Backbone.Events);

},{"../../design/design":19,"../../editor/editor":45}],56:[function(require,module,exports){
    var Facade = require('../abstract/facade');

    function ProjectFacade() {
        this.handlers = {
            'design': require('./handlers/design')
        };
    }

    ProjectFacade.prototype = new Facade();
    ProjectFacade.prototype.constructor = ProjectFacade;
    module.exports = new ProjectFacade();

},{"../abstract/facade":11,"./handlers/design":55}],57:[function(require,module,exports){
    var decoration, base;

    module.exports = function (d, b) {
        if (INKIVE.C.BOOK.book_type == '3') {
            base = b;
            decoration = d;

            var extension = {
                restrictionsFacade: require('./restrictions')
            };

            _.each(decoration, processDecoratorMethod, extension);
            return b.extend ? b.extend(extension) : _.extend({}, b, extension);
        }

        return b;
    };

    function processDecoratorMethod(func, key) {
        var isCheckMethod = key.match(/Check$/) || key.match(/CheckOnce$/);

        if (!isCheckMethod) {
            var checkMethod = decoration[key + 'Check'];
            var checkOnceMethod = decoration[key + 'CheckOnce'];

            if (checkOnceMethod) {
                if (checkOnceMethod.call(this)) this[key] = func;
            } else if (checkMethod) {
                this[key] = _.partial(decoratedMethodWrapper, checkMethod, func, base.prototype[key]);
            } else {
                this[key] = func;
            }
        }
    }

    function decoratedMethodWrapper(checkFunc, restrictionFunc, baseFunc) {
        var useRestrictionFallback = checkFunc.call(this);

        useRestrictionFallback && restrictionFunc.apply(this, _.rest(arguments, 3));
        useRestrictionFallback || baseFunc && baseFunc.apply(this, _.rest(arguments, 3));
    }

},{"./restrictions":62}],58:[function(require,module,exports){
    var UserInfoFactory = require('../../factory/user-info');
    var MenuActionsConf = require('./menu-actions.json');

    function RestrictionsFactory() {}

    RestrictionsFactory.prototype.initialize = function () {
        var deferred = $.Deferred();

        UserInfoFactory.get().then(_.bind(function (data) {
            var credentials = {
                username: data['user_token'],
                password: data['user_hash']
            };

            this.loadDesignInfo(credentials).then(_.bind(this.loadTemplatePermissions, this, credentials)).then(deferred.resolve);
        }, this));

        return deferred.promise();
    };

    RestrictionsFactory.prototype.loadDesignInfo = function (credentials) {
        var DesignModel = Backbone.Model.extend({
            url: INKIVE.C.DESYGNER_BUSINESS + 'api/brand/designs/' + INKIVE.C.BOOK.encodedId
        });

        var designModel = new DesignModel();
        designModel.credentials = credentials;

        return designModel.fetch();
    };

    RestrictionsFactory.prototype.loadTemplatePermissions = function (credentials, designData) {
        var url = INKIVE.C.DESYGNER_BUSINESS + 'api/brand/permission/';

        var TemplatePermissionsModel = Backbone.Model.extend({
            url: url + 'templatepermissions/' + designData['template']
        });

        var ElementPermissionsCollection = Backbone.Collection.extend({
            url: url + 'elementpermissions?me&template=' + designData['template']
        });

        this.templatePermissions = new TemplatePermissionsModel();
        this.elementsPermissions = new ElementPermissionsCollection();

        this.templatePermissions.credentials = credentials;
        this.elementsPermissions.credentials = credentials;

        return $.when(this.templatePermissions.fetch(), this.elementsPermissions.fetch());
    };

    RestrictionsFactory.prototype.constructor = RestrictionsFactory;
    module.exports = RestrictionsFactory;

},{"../../factory/user-info":81,"./menu-actions.json":61}],59:[function(require,module,exports){
    module.exports = {
        initialize: function (permissionsFactory) {
            this.permissionsFactory = permissionsFactory;
        }
    };

},{}],60:[function(require,module,exports){
    module.exports = {
        initialize: function (permissionsFactory) {
            this.canvas = INKIVE.Tool.getInstance().editor.canvas;
            this.permissionsFactory = permissionsFactory;
        },

        restrictMovement: function (element, restrictions, data) {
            var r = restrictions[0];
            if (!r) return data;

            return {
                x: r['horizontal'] ? data.x : 0,
                y: r['vertical'] ? data.y : 0
            };
        },

        restrictMargin: function (element, restrictions, data) {
            var r = restrictions[0];
            if (!r) return typeof data.x !== 'undefined' ? data.y : data.x;

            var margin = r['size'];
            var box = svgedit.utilities.getBBox(element);
            var dx = data.x;
            var dy = data.y;

            if (box.x + data.x < margin) dx = margin - box.x;else if (box.x + box.width + data.x > this.canvas.contentW - margin) dx = this.canvas.contentW - margin - box.x - box.width;

            if (box.y + data.y < margin) dy = margin - box.y;else if (box.y + box.height + data.y > this.canvas.contentH - margin) dy = this.canvas.contentH - margin - box.y - box.height;

            return { x: dx, y: dy };
        }
    };

},{}],61:[function(require,module,exports){
    module.exports={
        "text": {
            "TEXT_EDITING": [ "text_change_content" ],
            "INCREASE": [ "text_size" ],
            "DECREASE": [ "text_size" ],
            "UNLOCK": [ "text_position" ],
            "DUPLICATE": [ "text_duplication" ],
            "REMOVE": [ "text_deletion" ],
            "TEXT_FONTFAMILY": [ "text_font_family" ],
            "TEXT_FONTSIZE": [ "text_font_size" ],
            "OPACITY": [ "text_opacity" ],
            "FILL_COLOR": [ "text_colour" ],
            "TEXT_BOLD": [ "text_decoration" ],
            "TEXT_ITALIC": [ "text_decoration" ],
            "TEXT_UNDERLINE": [ "text_decoration" ],
            "TEXT_CASE": [ "text_change_content" ],
            "TEXT_BULLETS": [ "text_decoration" ],
            "TEXT_ALIGN": [ "text_alignment" ],
            "LOCK": [ "text_position" ],
            "ORDER": [ "text_z_index" ],
            "ROTATE_LEFT": [ "text_rotation" ],
            "ROTATE_RIGHT": [ "text_rotation" ],
            "TEXT_TYPING": [ "text_change_content" ],
            "ALIGNMENT": [ "text_position" ],
            "TEXT_SPACING": [ "text_spacing" ]
        },
        "image": {
            "INCREASE": [ "image_size" ],
            "DECREASE": [ "image_size" ],
            "UNLOCK": [ "image_position" ],
            "DUPLICATE": [ "image_duplication" ],
            "REMOVE": [ "image_deletion" ],
            "IMAGE_REPOSITION": [ "image_crop" ],
            "IMAGE_FILTER": [ "image_filter" ],
            "OPACITY": [ "image_opacity" ],
            "LOCK": [ "image_position" ],
            "LOCK_IMAGE": [ "image_replace" ],
            "UNLOCK_IMAGE": [ "image_replace" ],
            "ORDER": [ "image_z_index" ],
            "ROTATE_LEFT": [ "image_rotation" ],
            "ROTATE_RIGHT": [ "image_rotation" ],
            "ALIGNMENT": [ "image_position" ]
        },
        "vector": {
            "INCREASE": [ "vector_size" ],
            "DECREASE": [ "vector_size" ],
            "UNLOCK": [ "vector_position" ],
            "DUPLICATE": [ "vector_duplication" ],
            "REMOVE": [ "vector_deletion" ],
            "OPACITY": [ "vector_opacity" ],
            "FILL_COLOR": [ "vector_colour" ],
            "STROKE_COLOR": [ "vector_stroke" ],
            "STROKE": [ "vector_stroke" ],
            "FLIP_H": [ "vector_rotation" ],
            "FLIP_V": [ "vector_rotation" ],
            "LOCK": [ "vector_position" ],
            "ORDER": [ "vector_z_index" ],
            "ROTATE_LEFT": [ "vector_rotation" ],
            "ROTATE_RIGHT": [ "vector_rotation" ],
            "ALIGNMENT": [ "vector_position" ]
        },
        "default": {
            "INCREASE": [ "element_size" ],
            "DECREASE": [ "element_size" ],
            "UNLOCK": [ "element_position" ],
            "DUPLICATE": [ "element_duplication" ],
            "REMOVE": [ "element_deletion" ],
            "GROUP_UNGROUP": [ "element_ungrouping" ],
            "OPACITY": [ "element_opacity" ],
            "LOCK": [ "element_position" ],
            "ORDER": [ "element_z_index" ],
            "ROTATE_LEFT": [ "element_rotation" ],
            "ROTATE_RIGHT": [ "element_rotation" ],
            "ALIGNMENT": [ "element_position" ],
            "GROUP_GROUP": [ "element_grouping" ],
            "IMAGE_BOX": [ "image_content" ],
            "FILL_COLOR": [ "element_colour" ],
            "STROKE_COLOR": [ "vector_stroke" ],
            "STROKE": [ "vector_stroke" ],
            "FLIP_H": [ "element_rotation" ],
            "FLIP_V": [ "element_rotation" ]
        }
    }

},{}],62:[function(require,module,exports){
    var RestrictionsFactory = require('./factory');
    var MenuActionsConf = require('./menu-actions.json');

    function RestrictionsFacade() {
        this.initialized = false;
        this.handlers = {
            'vector': require('./handlers/vector'),
            'text': require('./handlers/text')
        };
    }

    RestrictionsFacade.prototype.initialize = function () {
        _.bindAll(this, 'canChange', 'isFunctionalityAllowed', 'isActionAllowed', 'applyRestriction', '_getElementRestrictions');

        this.initialized = true;

        var handlers = this.handlers;
        var factory = this.factory = new RestrictionsFactory();
        var promise = this.factory.initialize();

        promise.then(function () {
            _(handlers).each(function (handler) {
                handler.initialize(factory);
            });
        });

        return promise;
    };

    RestrictionsFacade.prototype.applyPreLoadRestrictions = function (sXML) {
        if (!this.initialized) return sXML;

        return sXML;
    };

    RestrictionsFacade.prototype.applyPostLoadRestrictions = function (out) {
        if (!this.initialized) return out;

        return out;
    };

    RestrictionsFacade.prototype.isFunctionalityAllowed = function (functionality) {
        if (!this.initialized) return true;
        return this.factory.templatePermissions.get(functionality);
    };

    RestrictionsFacade.prototype.filterMenuOptions = function (element, buttons) {
        if (!this.initialized) return buttons;

        var elementType = this.getType(element);

        return _(buttons).filter(function (button) {
            return this.isActionAllowed(MenuActionsConf[elementType][button], element);
        }, this);
    };

    RestrictionsFacade.prototype.applyRestriction = function (element, action, data) {
        if (!this.initialized) return data;
        var elementType = this.getType(element);
        var methodName = 'restrict' + action.charAt(0).toUpperCase() + action.slice(1);
        var restrictions = this._getElementRestrictions(element.getAttribute('id'), action);

        if (!this.handlers[elementType] || !this.handlers[elementType][methodName]) {
            console.warn('Restriction handler not found: ' + elementType + ' > ' + methodName);
            return data;
        }

        return this.handlers[elementType][methodName](element, restrictions, data);
    };

    RestrictionsFacade.prototype.canChange = function (element, action) {
        var action = this.getType(element) + '_' + action;
        return this.isActionAllowed(action, element);
    };

    RestrictionsFacade.prototype.isActionAllowed = function (checks, element) {
        if (!this.initialized || !element) return true;

        checks = _.isArray(checks) ? checks : [checks];

        var elementRestrictions = this._getElementRestrictions(element.getAttribute('id'));

        return hasElementRestrictions.call(this, checks) ? checkElementPermissions(checks) : _.every(checks, function (check) {
            return this.factory.templatePermissions.get(check);
        }, this);

        function hasElementRestrictions(checks) {
            return _.any(checks, function (check) {
                return _.any(elementRestrictions, function (er) {
                    return typeof er[check] !== 'undefined';
                });
            });
        }

        function checkElementPermissions(checks) {
            return _.any(elementRestrictions, function (er) {
                return _.every(checks, function (check) {
                    return typeof er[check] === 'undefined' || er[check];
                });
            });
        }
    };

    RestrictionsFacade.prototype.getType = function (element) {
        if (!element) return;
        if ($(element).is('.group')) return 'element';

        if ($(element).is('.textarea')) return 'text';
        if ($(element).is('.sticker')) return 'vector';
        if ($(element).is('image')) return 'image';

        return 'vector';
    };

    RestrictionsFacade.prototype._getElementRestrictions = function (id, type) {
        type = type || 'basic';

        return _.chain(this.factory.elementsPermissions.filter({ element_id: id })).map(function (m) {
            return JSON.parse(m.get('restrictions'))[type];
        }).compact().value();
    };

    RestrictionsFacade.prototype.constructor = RestrictionsFacade;
    module.exports = new RestrictionsFacade();

},{"./factory":58,"./handlers/text":59,"./handlers/vector":60,"./menu-actions.json":61}],63:[function(require,module,exports){
    module.exports = ApiBase;

    function ApiBase() {
        this.baseUrl = INKIVE.C.BASE_URL + 'api/';
    }

    ApiBase.prototype = _.extend({}, Backbone.Events);
    ApiBase.prototype.api = function (route, data, method) {
        method = method || data ? 'POST' : 'GET';
        var deferred = $.Deferred();

        $.ajax({
            type: method,
            url: this.baseUrl + route,
            data: data,
            success: function (response) {
                deferred.resolve(response);
            },
            error: function () {
                deferred.reject('API call error');
            }
        });

        return deferred.promise();
    };

    ApiBase.prototype.init = function () {
        var deferred = $.Deferred();

        if (this.data) deferred.resolve(clone(this.data));else this.api(this.resource).then(_.bind(function (data) {
            this.data = data;
            deferred.resolve(clone(data));
        }, this), function (err) {
            deferred.reject(err + ' | API Init error');
        });

        return deferred.promise();

        function clone(data) {
            return _.isArray(data) ? _.toArray($.extend(true, {}, data)) : $.extend(true, {}, data);
        }
    };

},{}],64:[function(require,module,exports){
    var LibraryFactory = require('./library');
    var UserInfoFactory = require('./user-info');
    var template = require('./library/font-template.hbs');
    var fontsList;

    module.exports = {
        initialize: function () {
            UserInfoFactory.get().then(function (userInfo) {
                var hasLibrary = _(userInfo['roles']).contains('ROLE_LIBRARY');
                var hasFonts = _(userInfo['roles']).contains('ROLE_INDEPENDENT');

                if (hasLibrary) {
                    if (hasFonts) {
                        var textPromise = LibraryFactory.get('texts');
                        var customFontsPromise = LibraryFactory.get('fonts');

                        $.when(customFontsPromise, textPromise).then(function (userFonts, userTexts) {
                            addCSSFonts(userFonts);

                            fontsList = _.union(ownFontsInfo(userInfo, userFonts), defaultFontsInfo(INKIVE.C.FONT_LIST, userTexts));
                        });
                    } else {
                        LibraryFactory.get('texts').then(function (userFonts, userTexts) {
                            fontsList = defaultFontsInfo(INKIVE.C.FONT_LIST, userTexts);
                        });
                    }
                } else fontsList = defaultFontsInfo(INKIVE.C.FONT_LIST);
            });
        },

        get: function () {
            return fontsList;
        }
    };

    function addCSSFonts(fonts) {
        var $fonts = $('<style type="text/css">');

        _.each(fonts, function (font) {
            $fonts.append(template({
                family: font['data']['family'],
                sources: _(font['data']['sources']).indexBy('type')
            }));
        });

        $('head').prepend($fonts);
    }

    function ownFontsInfo(userInfo, userFonts) {
        return _.map(userFonts, function (font) {
            return {
                family: font['data']['family'],
                support: {
                    b: true,
                    bi: true,
                    i: true,
                    w: {}
                },
                customOwner: userInfo['data']['user_id']
            };
        });
    }

    function defaultFontsInfo(defaultFonts, userTexts) {
        var usedFonts = {};

        userTexts && _.each(userTexts, function (text) {
            var family = text['data']['family'];
            usedFonts[family] = usedFonts[family] || 0;
            usedFonts[family]++;
        });

        var dataInfo = _.map(defaultFonts, function (support, family) {
            return { family: family, support: support };
        });

        return _.sortBy(dataInfo, function (data) {
            return -(usedFonts[data['family']] || 0);
        });
    }

},{"./library":67,"./library/font-template.hbs":70,"./user-info":81}],65:[function(require,module,exports){
    var ApiBase = require('./api');

    function FormatsFactory() {
        this.resource = 'management/formatgroups';
    }

    FormatsFactory.prototype = new ApiBase();
    FormatsFactory.prototype.init = _.memoize(ApiBase.prototype.init);

    FormatsFactory.prototype.getGroup = function (key) {
        var deferred = $.Deferred();

        this.getGroups([key]).then(function (data) {
            deferred.resolve(data[0]);
        }, function (err) {
            deferred.reject(err + ' | Formats GetGroup error');
        });

        return deferred.promise();
    };

    FormatsFactory.prototype.getGroups = function (keys) {
        var deferred = $.Deferred();

        this.init().then(function (data) {
            if (!keys) deferred.resolve(data);else deferred.resolve(_.filter(data, function (group) {
                return _.any(keys, function (key) {
                    return key == group['key'];
                });
            }));
        }, function (err) {
            deferred.reject(err + ' | Formats GetGroups error');
        });

        return deferred.promise();
    };

    FormatsFactory.prototype.getFormat = function (key) {
        var deferred = $.Deferred();

        this.getFormats([key]).then(function (data) {
            deferred.resolve(data[0]);
        }, function (err) {
            deferred.reject(err + ' | Formats GetFormat error');
        });

        return deferred.promise();
    };

    FormatsFactory.prototype.getFormats = function (keys) {
        var deferred = $.Deferred();

        this.init().then(function (data) {
            var formats = _.flatten(_.map(data, function (group) {
                return group['data'];
            }));

            if (!keys) deferred.resolve(formats);else deferred.resolve(_.filter(formats, function (format) {
                return _.any(keys, function (key) {
                    return key == format['string_id'] || key == format['id'];
                });
            }));
        }, function (err) {
            deferred.reject(err + ' | Formats GetFormats error');
        });

        return deferred.promise();
    };

    FormatsFactory.prototype.getFormatsBasedOnSize = function (size) {
        var deferred = $.Deferred();

        this.getFormats().then(function (data) {
            var convertToPixels = INKIVE.Helpers.convertUnitsToPixels;

            deferred.resolve(_.filter(data, function (format) {
                var w = convertToPixels(format['width'], format['unit']);
                var h = convertToPixels(format['height'], format['unit']);

                return size.width === w && size.height === h;
            }));
        }, function (err) {
            deferred.reject(err + ' | Formats GetFormatsBasedOnSize error');
        });

        return deferred.promise();
    };

    FormatsFactory.prototype.getCurrentFormat = function (size) {
        var deferred = $.Deferred();
        var tool = INKIVE.Tool.getInstance();
        var canvas = tool.editor.canvas;
        var filterId = getInlineLayoutID() || INKIVE.Helpers.getFragmentParam('filter');
        var size = { width: canvas.contentW, height: canvas.contentH };
        var convertToPixels = INKIVE.Helpers.convertUnitsToPixels;

        if (filterId) {
            $.when(this.getFormat(filterId), this.getFormatsBasedOnSize(size)).then(function (format, formats) {
                if (format) {
                    var w = convertToPixels(format['width'], format['unit']);
                    var h = convertToPixels(format['height'], format['unit']);

                    deferred.resolve(w == size.width && h == size.height ? format : formats[0]);
                } else deferred.resolve(formats[0]);
            });
        } else {
            this.getFormatsBasedOnSize(size).then(function (formats) {
                deferred.resolve(formats[0]);
            });
        }

        return deferred.promise();

        function getInlineLayoutID() {
            var className = $('#svgcontent > g.main').attr('class');
            if (!className) return null;

            className = _.find(className.split(' '), function (className) {
                return className.match(/format-id-[\d+]/);
            });

            return className ? className.split('-')[2] : null;
        }
    };

    module.exports = new FormatsFactory();

},{"./api":63}],66:[function(require,module,exports){
    function ImagesFactory() {
        this.imagesData = {};
    }

    ImagesFactory.prototype = {
        convertFormats: ['/thumb/', '/mobile/', '/tab/', '/web/', '/largeweb/', '/original/'],
        defaultAmazonDataNames: {
            name: 'name',
            thumb: 'thumb',
            mobile: 'mobile',
            tab: 'tab',
            web: 'web',
            largeweb: 'largeweb',
            original: 'original'
        },

        defaultAmazonVersionDataNames: {
            name: 'name',
            thumb: 'version.thumb',
            mobile: 'version.mobile',
            tab: 'version.tab',
            web: 'version.web',
            largeweb: 'version.largeweb',
            original: 'version.original'
        },

        defaultAPIDataNames: {
            name: 'name',
            thumb: 'src',
            mobile: 'src_mobile',
            tab: 'src_tab',
            web: 'src_web',
            largeweb: 'src_big',
            original: 'src_big'
        },

        getFacebookPhotos: function (params, callback) {
            this.sendCommand('load/photos/facebook', params, _.bind(function (result) {
                result = $.parseJSON(result);

                if (INKIVE.Helpers.isResponseExists(result)) {
                    var newImageData = this.setFacebookImagesData(result);
                    callback(true, newImageData, result);
                } else callback(false);
            }, this));
        },

        setFacebookImagesData: function (albums) {
            var newData = {};

            _.each(albums, function (album) {
                _.extend(newData, this.setImagesData(album.data, 'fb'));
            }, this);

            return newData;
        },

        getDropboxPhotos: function (params, callback) {
            this.fetchGenericData('load/photos/dropbox', params, callback, 'db');
        },

        getGooglePhotos: function (params, callback) {
            this.fetchGenericData('load/photos/google', params, callback, 'go');
        },

        getFlickerPhotos: function (params, callback) {
            this.fetchGenericData('load/photos/flickr', params, callback, 'fl');
        },

        getInstagramPhotos: function (params, callback) {
            this.fetchGenericData('load/photos/instagram', params, callback, 'in');
        },

        fetchGenericData: function (url, params, callback, loadType) {
            this.sendCommand(url, params, _.bind(function (result) {
                result = $.parseJSON(result);

                if (INKIVE.Helpers.isResponseExists(result)) {
                    var newImageData = this.setImagesData(result, loadType);
                    callback(true, newImageData, result);
                } else callback(false);
            }, this));
        },

        getOriginalUrl: function (url) {
            if (!url) return;
            if (this.imagesData[url]) return url;

            var convertFormats = this.convertFormats;
            var imageData = _.find(this.imagesData, function (imageData) {
                return _.contains(imageData.version, url);
            });

            return imageData ? imageData.version.original : getGeneratedOriginalUrl();

            function getGeneratedOriginalUrl() {
                var isAmazonImage = url.match(/^((http|https):\/\/s3.amazonaws.com)/) !== null;

                if (isAmazonImage) {
                    _.each(convertFormats, function (format) {
                        url = url.replace(format, '/original/');
                    });

                    return url;
                }

                return null;
            }
        },

        getVersionUrl: function (url, size) {
            if (!url) return;

            var imageData = _.find(this.imagesData, function (imageData) {
                return _.contains(imageData.version, url);
            });

            if (imageData) return imageData.version[size];

            var isAmazonImage = url.match(/^((http|https):\/\/s3.amazonaws.com)/) !== null;
            isAmazonImage && _.each(this.convertFormats, function (format) {
                url = url.replace(format, '/' + size + '/');
            });

            return url;
        },

        getRightSizeUrl: function (url, imageSize) {
            var EditorFacade = require('../facade/editor/editor');
            var zoom = EditorFacade.handle('zoom', 'get');
            var sizesData = getAvailableImageSizes.call(this);

            var width = imageSize.width * zoom;
            var height = imageSize.height * zoom;
            var rightSize = _.find(sizesData, function (sizeData) {
                return width < sizeData.width && height < sizeData.height;
            });

            return rightSize ? this.getVersionUrl(url, rightSize.name) : url;

            function getAvailableImageSizes() {
                var defaultSizes = [{ name: 'thumb', width: 168, height: 168 }, { name: 'mobile', width: 499, height: 499 }, { name: 'tab', width: 800, height: 800 }, { name: 'web', width: 1200, height: 1200 }, { name: 'largeweb', width: 2500, height: 2500 }, { name: 'original', width: Infinity, height: Infinity }];

                var originalUrl = this.getOriginalUrl(url) || url;
                var imageData = this.getImageOriginalData(originalUrl);
                if (imageData) {
                    var attributesNames = this.imagesData[originalUrl].attributesNames;
                    var customSizes = _.compact(_.map(['thumb', 'mobile', 'tab', 'web', 'largeweb'], getSizeInfoObject, this));

                    if (customSizes.length) {
                        customSizes.push({ name: 'original', width: Infinity, height: Infinity });
                        return customSizes;
                    }
                }

                return defaultSizes;

                function getSizeInfoObject(name) {
                    var height = this.getAttribute(imageData, attributesNames[name] + '_height');
                    var width = this.getAttribute(imageData, attributesNames[name] + '_width');

                    if (height && width) return { name: name, width: parseInt(width), height: parseInt(height) };
                }
            }
        },

        getImageDataFromData: function (imageData, attributesNames) {
            var originalUrl = this.getAttribute(imageData, attributesNames.original);
            var oldData = this.imagesData[originalUrl] || {};

            return {
                name: this.getAttribute(imageData, attributesNames.name),
                stored: oldData.stored || false,
                originalData: imageData,
                attributesNames: attributesNames,
                version: {
                    web: this.getAttribute(imageData, attributesNames.web),
                    tab: this.getAttribute(imageData, attributesNames.tab),
                    thumb: this.getAttribute(imageData, attributesNames.thumb),
                    mobile: this.getAttribute(imageData, attributesNames.mobile),
                    largeweb: this.getAttribute(imageData, attributesNames.largeweb),
                    original: originalUrl
                }
            };
        },

        getAttribute: function (imageData, name) {
            if (!imageData || !name) return;
            var nameChain = name.split('.');
            var tmpObj = imageData;

            while (tmpObj && nameChain[0]) tmpObj = tmpObj[nameChain.shift()];

            return tmpObj;
        },

        getImageOriginalData: function (url) {
            var originalSrc = this.getOriginalUrl(url);
            var imageData = this.imagesData[originalSrc];

            return imageData && imageData.originalData;
        },

        getImageOriginalSizeData: function (url, callback) {
            var originalSrc = this.getOriginalUrl(url);
            var imageData = this.imagesData[originalSrc];

            if (imageData) {
                var originalData = imageData.originalData;
                if (originalData['original_width'] && originalData['original_height']) {
                    callback({
                        width: parseFloat(originalData['original_width']),
                        height: parseFloat(originalData['original_height'])
                    });

                    return;
                }
            }

            var hasSize;
            var img = new Image();
            var supportsNatural = 'naturalWidth' in img;
            var interval = setInterval(checkSize, 100);

            img.onload = onHasSize;
            img.src = originalSrc;

            function onHasSize() {
                if (hasSize) return;
                clearInterval(interval);
                hasSize = true;

                img.onload = img.onerror = $.noop;
                callback({
                    width: supportsNatural ? img.naturalWidth : img.width,
                    height: supportsNatural ? img.naturalHeight : img.height
                });

                img.src = '';
            }

            function checkSize() {
                var hasSize = img.naturalWidth || img.width > 50;
                hasSize && onHasSize();
            }
        },

        storeImageData: function (img) {
            var originalSrc = this.getOriginalUrl(img);
            var imageData = this.imagesData[originalSrc];

            if (!imageData || imageData.stored || !imageData.loadType) return;

            var params = {
                scrapbookId: INKIVE.C.BOOK.id,
                images: JSON.stringify(imageData.originalData),
                loadType: imageData.loadType
            };

            this.sendCommand('inkiveeditor/storeImageData', params, function () {
                imageData.stored = true;
            });
        },

        setImagesData: function (imagesData, loadType, attributesNames) {
            var newData = {};
            attributesNames = attributesNames ? attributesNames : loadType ? this.defaultAPIDataNames : this.defaultAmazonDataNames;

            _.each(imagesData, function (imageData) {
                var newImageData = this.getImageDataFromData(imageData, attributesNames);
                if (loadType) newImageData.loadType = loadType;
                var originalSrc = newImageData.version.original;
                newData[originalSrc] = this.imagesData[originalSrc] = newImageData;
            }, this);

            return newData;
        },

        // We need to redesign (encapsulate) every outside call to this function
        addImageData: function (imageData, dataNames) {
            dataNames = dataNames || this.defaultAmazonVersionDataNames;
            var newImageData = this.getImageDataFromData(imageData, dataNames);
            var originalSrc = newImageData.version.original;
            this.imagesData[originalSrc] = newImageData;
        },

        smartLoad: function (url, containerSize, callback) {
            var totalAttempts = 4;
            var newAttemptDelay = 5000;

            var attempt = 0;
            var img = new Image();
            var optimusImageToLoad = this.getRightSizeUrl(url, containerSize);

            img.onerror = _.bind(onImageLoadError, this);
            img.onload = _.partial(callback, INKIVE.C.Status.success, img);
            img.src = optimusImageToLoad;

            function onImageLoadError() {
                attempt++;

                if (attempt <= totalAttempts) _.delay(_.bind(function () {
                    img.src = attempt < totalAttempts ? optimusImageToLoad : this.getOriginalUrl(url);
                }, this), newAttemptDelay);else callback(INKIVE.C.Status.timeout, img);
            }
        },

        sendCommand: function (url, data, callback) {
            console.warn('Images Factory: Called old sendCmd: ' + url);

            $.ajax({
                url: INKIVE.C.BASE_URL + url,
                type: 'POST',
                data: data,
                dataType: 'json',
                complete: function (r) {
                    callback(r.responseText);
                }
            });
        }
    };

    module.exports = new ImagesFactory();

},{"../facade/editor/editor":45}],67:[function(require,module,exports){
    var UserInfoFactory = require('./user-info');
    var Models = {
        colors: require('./library/color-model'),
        texts: require('./library/text-model'),
        images: require('./library/image-model'),
        logos: require('./library/logo-model'),
        fonts: require('./library/font-model')
    };

    function LibraryFactory() {
        _.bindAll(this, 'initialize', 'get', '_collectionFetch', 'cacheClear');
        this.collections = {};
        this.cache = {};
    }

    LibraryFactory.prototype = _.extend({}, Backbone.Events);

    LibraryFactory.prototype.initialize = _.memoize(function () {
        var deferred = $.Deferred();

        UserInfoFactory.get().then(_.bind(function (data) {
            this.credentials = {
                username: data['user_token'],
                password: data['user_hash']
            };

            deferred.resolve();
        }, this));

        return deferred.promise();
    });

    LibraryFactory.prototype.get = function (resource, filter) {
        var deferred = $.Deferred();

        this.initialize().then(_.partial(this._collectionFetch, resource)).then(_.bind(function () {
            var results = !filter ? this.collections[resource].toArray() : this.collections[resource].filter(function (model) {
                var data = model.get('data');

                return _.all(filter, function (value, key) {
                    return data[key] === value || model.get(key) === value;
                });
            });

            deferred.resolve(_(results).map(function (model) {
                return model.toJSON();
            }));
        }, this));

        return deferred.promise();
    };

    LibraryFactory.prototype.cacheClear = function (resource) {
        this.cache = _(this.cache).omit(resource);
    };

    LibraryFactory.prototype._collectionFetch = function (resource) {
        if (this.cache[resource]) return this.cache[resource];
        this.collections[resource] || this._initCollection(resource);
        this.cache[resource] = this.collections[resource].fetch();

        return this.cache[resource];
    };

    LibraryFactory.prototype._initCollection = function (resource) {
        var Collection = Backbone.Collection.extend({
            model: Models[resource],
            url: INKIVE.C.DESYGNER_BUSINESS + 'api/library/' + resource
        });

        this.collections[resource] = new Collection();
        this.collections[resource].credentials = this.credentials;
    };

    module.exports = new LibraryFactory();

},{"./library/color-model":68,"./library/font-model":69,"./library/image-model":71,"./library/logo-model":72,"./library/text-model":73,"./user-info":81}],68:[function(require,module,exports){
    var tinycolor = require('../../../../bower_components/tinycolor/tinycolor');

    module.exports = Backbone.Model.extend({
        url: function () {
            return this.id ? 'api/library/colors/' + this.id : 'api/library/colors';
        },

        parse: function (resource) {
            var b = parseInt(resource['data']['color_code'] / 65536);
            var g = parseInt((resource['data']['color_code'] - b * 65536) / 256);
            var r = parseInt(resource['data']['color_code'] - b * 65536 - g * 256);
            var color = tinycolor('rgb(' + r + ',' + g + ',' + b + ')');

            resource['data']['color_code'] = color.toHexString();
            resource['data']['is_dark'] = color.isDark();

            return resource;
        },

        getServerModel: function () {
            var result = _(this.attributes).clone();
            var rgb = tinycolor(result['data']['color_code']).toRgb();

            result['data'] = _(result['data']).omit('is_dark');
            result['data']['color_code'] = rgb.b * 65536 + rgb.g * 256 + rgb.r;

            return result;
        },

        sync: function () {
            this.toJSON = this.getServerModel;
            var result = Backbone.sync.apply(this, arguments);
            this.toJSON = Backbone.Model.prototype.toJSON;

            return result;
        }
    });

},{"../../../../bower_components/tinycolor/tinycolor":2}],69:[function(require,module,exports){
    module.exports = Backbone.Model.extend({
        url: function () {
            return this.id ? 'api/library/fonts/' + this.id : 'api/library/fonts';
        }
    });

},{}],70:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=helpers.blockHelperMissing, buffer =
            "\n        ";
        stack1 = ((helper = (helper = helpers.woff2 || (depth0 != null ? depth0.woff2 : depth0)) != null ? helper : alias2),(options={"name":"woff2","hash":{},"fn":container.program(2, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.woff2) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += "\n        ";
        stack1 = ((helper = (helper = helpers.woff || (depth0 != null ? depth0.woff : depth0)) != null ? helper : alias2),(options={"name":"woff","hash":{},"fn":container.program(4, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.woff) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += "\n        ";
        stack1 = ((helper = (helper = helpers.svg || (depth0 != null ? depth0.svg : depth0)) != null ? helper : alias2),(options={"name":"svg","hash":{},"fn":container.program(6, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.svg) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += "\n        ";
        stack1 = ((helper = (helper = helpers.otf || (depth0 != null ? depth0.otf : depth0)) != null ? helper : alias2),(options={"name":"otf","hash":{},"fn":container.program(8, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.otf) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += "\n        ";
        stack1 = ((helper = (helper = helpers.ttf || (depth0 != null ? depth0.ttf : depth0)) != null ? helper : alias2),(options={"name":"ttf","hash":{},"fn":container.program(10, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.ttf) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "\n    ";
    },"2":function(container,depth0,helpers,partials,data) {
        var helper;

        return ",url('"
            + container.escapeExpression(((helper = (helper = helpers.source || (depth0 != null ? depth0.source : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : {},{"name":"source","hash":{},"data":data}) : helper)))
            + "') format('woff2')";
    },"4":function(container,depth0,helpers,partials,data) {
        var helper;

        return ",url('"
            + container.escapeExpression(((helper = (helper = helpers.source || (depth0 != null ? depth0.source : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : {},{"name":"source","hash":{},"data":data}) : helper)))
            + "') format('woff')";
    },"6":function(container,depth0,helpers,partials,data) {
        var helper;

        return ",url('"
            + container.escapeExpression(((helper = (helper = helpers.source || (depth0 != null ? depth0.source : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : {},{"name":"source","hash":{},"data":data}) : helper)))
            + "') format('svg')";
    },"8":function(container,depth0,helpers,partials,data) {
        var helper;

        return ",url('"
            + container.escapeExpression(((helper = (helper = helpers.source || (depth0 != null ? depth0.source : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : {},{"name":"source","hash":{},"data":data}) : helper)))
            + "') format('opentype')";
    },"10":function(container,depth0,helpers,partials,data) {
        var helper;

        return ",url('"
            + container.escapeExpression(((helper = (helper = helpers.source || (depth0 != null ? depth0.source : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : {},{"name":"source","hash":{},"data":data}) : helper)))
            + "') format('truetype')";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", buffer =
            "@font-face {\n    font-family: '"
            + container.escapeExpression(((helper = (helper = helpers.family || (depth0 != null ? depth0.family : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"family","hash":{},"data":data}) : helper)))
            + "';\n    src: local('☺')";
        stack1 = ((helper = (helper = helpers.sources || (depth0 != null ? depth0.sources : depth0)) != null ? helper : alias2),(options={"name":"sources","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.sources) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + ";\n}\n";
    },"useData":true});

},{"hbsfy/runtime":373}],71:[function(require,module,exports){
    var ImagesFactory = require('../images');

    module.exports = Backbone.Model.extend({
        url: function () {
            return this.id ? 'api/library/images/' + this.id : 'api/library/images';
        },

        parse: function (resource) {
            var source = resource['data']['source'];

            resource['data']['tab'] = source.replace('/original/', '/tab/');
            resource['data']['web'] = source.replace('/original/', '/web/');
            resource['data']['thumb'] = source.replace('/original/', '/thumb/');
            resource['data']['mobile'] = source.replace('/original/', '/mobile/');
            resource['data']['largeweb'] = source.replace('/original/', '/largeweb/');
            resource['data']['original'] = source;

            ImagesFactory.setImagesData({ version: {
                src: resource['data']['thumb'],
                src_web: resource['data']['web'],
                src_tab: resource['data']['tab'],
                src_mobile: resource['data']['mobile'],
                src_big: resource['data']['largeweb'],
                src_original: source
            } }, 'library');

            return resource;
        }
    });

},{"../images":66}],72:[function(require,module,exports){
    var ImagesFactory = require('../images');

    module.exports = Backbone.Model.extend({
        url: function () {
            return this.id ? 'api/library/logos/' + this.id : 'api/library/logos';
        },

        parse: function (resource) {
            var source = resource['data']['source'];

            resource['data']['tab'] = source.replace('/original/', '/tab/');
            resource['data']['web'] = source.replace('/original/', '/web/');
            resource['data']['thumb'] = source.replace('/original/', '/thumb/');
            resource['data']['mobile'] = source.replace('/original/', '/mobile/');
            resource['data']['largeweb'] = source.replace('/original/', '/largeweb/');
            resource['data']['original'] = source;

            ImagesFactory.setImagesData({ version: {
                src: resource['data']['thumb'],
                src_web: resource['data']['web'],
                src_tab: resource['data']['tab'],
                src_mobile: resource['data']['mobile'],
                src_big: resource['data']['largeweb'],
                src_original: source
            } }, 'library');

            return resource;
        }
    });

},{"../images":66}],73:[function(require,module,exports){
    var ColorModel = require('./color-model');

    module.exports = Backbone.Model.extend({
        url: function () {
            return this.id ? 'api/library/texts/' + this.id : 'api/library/texts';
        },

        parse: ColorModel.prototype.parse,
        getServerModel: ColorModel.prototype.getServerModel,
        sync: ColorModel.prototype.sync
    });

},{"./color-model":68}],74:[function(require,module,exports){
    var EditorFacade = require('../facade/editor/editor');
    var ProjectFacade = require('../facade/project/project');

    function PageThumbnailFactory() {
        this.data = {};
        this.defaultSize = 110;

        _.bindAll(this, 'get', 'remove');
        EditorFacade.on('page.saved', _.bind(function () {
            this.remove(INKIVE.Tool._current_page_id);
        }, this));

        ProjectFacade.on('design.removed', _.bind(function (data) {
            var preRemovePageNumber = INKIVE.C.BOOK.num_pages + 1;
            for (var i = parseInt(data['page_number']); i <= preRemovePageNumber; i++) this.remove(i);
        }, this));
    }

    PageThumbnailFactory.prototype = _.extend({}, Backbone.Events);
    PageThumbnailFactory.prototype.get = function (pageNumber, size, bookId) {
        var id = this.getId.apply(this, arguments);
        this.data[id] = this.data[id] || getThumbnailURL(id);

        return this.data[id];
    };

    PageThumbnailFactory.prototype.remove = function (pageNumber, bookId) {
        var newData = {};
        bookId = bookId || INKIVE.C.BOOK.id;

        _.each(this.data, function (url, key) {
            var parts = key.split(' ');
            var isSameBook = parts[0] == bookId;
            var isUpdatedPage = parts[1] == pageNumber || typeof pageNumber === 'undefined';

            if (!isSameBook || !isUpdatedPage) newData[key] = url;else this.notify.call(this, parts[1], parts[2], parts[0]);
        }, this);

        this.data = newData;
    };

    PageThumbnailFactory.prototype.notify = function (pageNumber, size, bookId) {
        var id = this.getId.apply(this, arguments).split(' ');

        this.trigger('update', { bookId: id[0], pageNumber: id[1], size: id[2] });
        this.trigger('update.' + id[0], { bookId: id[0], size: id[2] });
        this.trigger('update.' + id[0] + ' ' + id[1], { size: id[2] });
        this.trigger('update.' + id[0] + ' ' + id[1] + ' ' + id[2]);
    };

    PageThumbnailFactory.prototype.getId = function (pageNumber, size, bookId) {
        size = size || this.defaultSize;
        pageNumber = pageNumber || INKIVE.Tool._current_page_id;
        bookId = bookId || INKIVE.C.BOOK.id;

        return bookId + ' ' + pageNumber + ' ' + size;
    };

    module.exports = new PageThumbnailFactory();

    function getThumbnailURL(id) {
        id = id.split(' ');
        var now = new Date();

        return INKIVE.C.BASE_URL + 'design/displaythumbnail/' + id[0] + '/' + id[1] + '/' + id[2] + '?' + now.getTime();
    }

},{"../facade/editor/editor":45,"../facade/project/project":56}],75:[function(require,module,exports){
    var UserInfoFactory = require('./user-info');
    var templateData;
    var Models = {
        groups: require('./restrictions/group-model'),
        'permission/templatepermissions': require('./restrictions/templatepermissions-model'),
        'permission/elementpermissions': require('./restrictions/elementpermissions-model')
    };

    function RestrictionsFactory() {
        _.bindAll(this, 'initialize', 'get', '_collectionFetch', 'saveTemplateRestrictions');
        this.collections = {};
        this.cache = {};

        this.debouncedSaveElementRestrictions = _.debounce(this.saveElementRestrictions, 5000);
        this.debouncedSaveTemplateRestrictions = _.debounce(this.saveTemplateRestrictions, 5000);
    }

    RestrictionsFactory.prototype = _.extend({}, Backbone.Events);

    RestrictionsFactory.prototype.initialize = _.memoize(function () {
        var deferred = $.Deferred();

        UserInfoFactory.get().then(_.bind(function (data) {
            this.credentials = {
                username: data['user_token'],
                password: data['user_hash']
            };

            var resource = 'api/brand/templates/' + INKIVE.C.BOOK.encodedId;
            var TemplateModel = Backbone.Model.extend({
                url: INKIVE.C.DESYGNER_BUSINESS + resource
            });

            var templateModel = new TemplateModel();
            templateModel.credentials = this.credentials;
            templateModel.fetch().then(_.bind(function (data) {
                if (data) {
                    templateData = data;
                    this._collectionFetch('permission/templatepermissions').then(deferred.resolve);
                } else deferred.reject('Access not granted');
            }, this));
        }, this));

        return deferred.promise();
    });

    RestrictionsFactory.prototype.cacheClear = function (resource) {
        this.cache = _(this.cache).omit(resource);
    };

    RestrictionsFactory.prototype.setTemplateRestriction = function (groupId, permissionName, permissionValue) {
        var defaults = this.getGroupDefaults(groupId);
        var deferred = $.Deferred();

        defaults || deferred.reject();
        defaults && getTemplatePermissions.call(this).then(_.bind(function (permissions) {
            permissions.set(permissionName, permissionValue);
            this.debouncedSaveTemplateRestrictions(permissions);
            deferred.resolve();
        }, this));

        return deferred.promise();

        function getTemplatePermissions() {
            var deferred = $.Deferred();
            var permissions = this.collections['permission/templatepermissions'].find(function (p) {
                return p.get('group') == groupId;
            });

            permissions && deferred.resolve(permissions);
            permissions || createNewPermission.call(this, deferred);

            return deferred.promise();
        }

        function createNewPermission(deferred) {
            var model = this.collections['permission/templatepermissions'].create(_.extend(_.omit(defaults.template, 'id'), {
                group: parseInt(groupId),
                template: templateData.id
            }));

            model.on('change:id', _.bind(deferred.resolve, this, model));
        }
    };

    RestrictionsFactory.prototype.setElementRestriction = function (groupId, elementId, restrictions) {
        var deferred = $.Deferred();

        getElementPermissions.call(this).then(_.bind(function (permissions) {
            permissions.set('restrictions', restrictions);
            this.debouncedSaveElementRestrictions(permissions);
            deferred.resolve();
        }, this));

        return deferred.promise();

        function getElementPermissions() {
            var deferred = $.Deferred();
            var permissions = this.collections['permission/elementpermissions'].find(function (p) {
                return p.get('group') == groupId && p.get('element_id') == elementId;
            });

            permissions && deferred.resolve(permissions);
            permissions || createNewPermission.call(this, deferred);

            return deferred.promise();
        }

        function createNewPermission(deferred) {
            var model = this.collections['permission/elementpermissions'].create({
                element_id: elementId,
                template: templateData.id,
                group: parseInt(groupId),
                restrictions: restrictions
            });

            model.on('change:id', _.bind(deferred.resolve, this, model));
        }
    };

    RestrictionsFactory.prototype.saveElementRestrictions = function (permissions) {
        var groupId = permissions.get('group');
        var elementId = permissions.get('element_id');
        var hasAnyRestriction = permissions.get('restrictions') && _.size(JSON.parse(permissions.get('restrictions')));

        removeDuplicates.call(this);

        hasAnyRestriction || permissions.destroy();
        hasAnyRestriction && permissions.save();

        function removeDuplicates() {
            this.collections['permission/elementpermissions'].each(function (p) {
                p != permissions && p.get('element_id') == elementId && p.get('group') == groupId && _.defer(p.destroy);
            });
        }
    };

    RestrictionsFactory.prototype.getGroupDefaults = function (groupId) {
        var group = this.collections['groups'].find(function (g) {
            return g.id == groupId;
        });

        return group && group.get('permissions');
    };

    RestrictionsFactory.prototype.saveTemplateRestrictions = function (permissions) {
        var groupId = permissions.get('group');
        var defaults = this.getGroupDefaults(groupId);
        var isSameAsDefault = isSameAs(defaults.template);

        removeDuplicates.call(this);

        isSameAsDefault && !permissions.get('sticky') && permissions.destroy();
        isSameAsDefault || permissions.save();

        function removeDuplicates() {
            this.collections['permission/templatepermissions'].each(function (p) {
                p.get('group') == groupId && p != permissions && _.defer(p.destroy);
            });
        }

        function isSameAs(data) {
            return !_.chain(data).omit('id', 'group', 'static').any(function (val, key) {
                return permissions.get(key) != val;
            }).value();
        }
    };

    RestrictionsFactory.prototype.remove = function (resource, id) {
        var colletionFetch = _.partial(this._collectionFetch, resource);

        this.initialize().then(colletionFetch).then(_.bind(function () {
            var item = this.collections[resource].find(function (i) {
                return i.id == id;
            });
            item && item.destroy();
        }, this));
    };

    RestrictionsFactory.prototype.get = function (resource) {
        var deferred = $.Deferred();
        var colletionFetch = _.partial(this._collectionFetch, resource);

        this.initialize().then(colletionFetch).then(_.bind(function () {
            deferred.resolve(this.collections[resource].toJSON());
        }, this));

        return deferred.promise();
    };

    RestrictionsFactory.prototype._collectionFetch = function (resource) {
        if (this.cache[resource]) return this.cache[resource];
        this.collections[resource] || this._initCollection(resource);

        return this.cache[resource] = this.collections[resource].fetch();
    };

    RestrictionsFactory.prototype._initCollection = function (resource, filter) {
        filter = filter || '?template=' + templateData.id;

        var Collection = Backbone.Collection.extend({
            model: Models[resource],
            url: INKIVE.C.DESYGNER_BUSINESS + 'api/brand/' + resource + filter
        });

        this.collections[resource] = new Collection();
        this.collections[resource].credentials = this.credentials;
    };

    module.exports = new RestrictionsFactory();

},{"./restrictions/elementpermissions-model":76,"./restrictions/group-model":77,"./restrictions/templatepermissions-model":78,"./user-info":81}],76:[function(require,module,exports){
    module.exports = Backbone.Model.extend({
        url: function () {
            return INKIVE.C.DESYGNER_BUSINESS + (this.id ? 'api/brand/permission/elementpermissions/' + this.id : 'api/brand/permission/elementpermissions');
        }
    });

},{}],77:[function(require,module,exports){
    module.exports = Backbone.Model.extend({
        url: function () {
            return INKIVE.C.DESYGNER_BUSINESS + (this.id ? 'api/brand/groups/' + this.id : 'api/brand/groups');
        }
    });

},{}],78:[function(require,module,exports){
    module.exports = Backbone.Model.extend({
        url: function () {
            return INKIVE.C.DESYGNER_BUSINESS + (this.id ? 'api/brand/permission/templatepermissions/' + this.id : 'api/brand/permission/templatepermissions');
        }
    });

},{}],79:[function(require,module,exports){
    var ApiBase = require('./api');

    function SetingsFactory() {
        this.resource = 'inkiveeditor/updateSettings';
        this.baseUrl = INKIVE.C.BASE_URL;
    }

    SetingsFactory.prototype = new ApiBase();

    SetingsFactory.prototype.set = function (data) {
        var deferred = $.Deferred();

        if (this.data) deferred.resolve(this.data);else this.api(this.resource, {
            idInkive: INKIVE.C.BOOK.id,
            data: _.map(data, function (value, name) {
                return { name: name, value: value };
            })
        }).then(_.bind(function () {
            var encodedContents = ['name', 'description'];

            _.each(data, function (value, name) {
                INKIVE.C.BOOK[name] = _.contains(encodedContents, name) ? Base64.encode(value) : value;
            });

            this.trigger('update');
            deferred.resolve();
        }, this), function (err) {
            deferred.reject(err + ' | API Init error');
        });

        return deferred.promise();
    };

    module.exports = new SetingsFactory();

},{"./api":63}],80:[function(require,module,exports){
    var basicShapes = require('../modules/shapelib/basic.json');

    function ShapesFactory() {
        _.bindAll(this, 'initialize', 'getCategories', 'get');

        this.categories = [{ key: 'basic', icon: 'fa fa-square-o' }, { key: 'animal', icon: 'fa fa-bug' }, { key: 'arrow', icon: 'fa fa-arrows' }, { key: 'dialog_balloon', icon: 'fa fa-comments-o' }, { key: 'electronics', icon: 'fa fa-microphone' }, { key: 'flowchart', icon: 'fa fa-sitemap' }, { key: 'game', icon: 'fa fa-gamepad' }, { key: 'math', icon: 'fa fa-superscript' }, { key: 'misc', icon: 'fa fa-fire-extinguisher' }, { key: 'music', icon: 'fa fa-music' }, { key: 'object', icon: 'fa fa-lightbulb-o' }, { key: 'symbol', icon: 'fa fa-plus-square-o' }, { key: 'web', icon: 'fa fa-rss' }];
    }

    ShapesFactory.prototype = _.extend({}, Backbone.Events);

    ShapesFactory.prototype.initialize = _.memoize(function () {
        var deferred = $.Deferred();
        var translate = INKIVE.TranslateHelper.translate;

        INKIVE.TranslateHelper.load().then(_.bind(function () {
            this.data = { 'basic': this.mapResult('basic', basicShapes) };

            _.each(this.categories, function (category) {
                category['name'] = translate('shapes.category.' + category['key']);
            });

            deferred.resolve();
        }, this));

        return deferred.promise();
    });

    ShapesFactory.prototype.getCategories = function () {
        var deferred = $.Deferred();

        this.initialize().then(_.bind(function () {
            deferred.resolve(this.categories);
        }, this));

        return deferred.promise();
    };

    ShapesFactory.prototype.get = function (categoryId, shapeId) {
        var deferred = $.Deferred();
        categoryId = typeof categoryId === 'undefined' ? 0 : categoryId;

        this.getCategories().then(_.bind(function (categories) {
            var category = categories[categoryId] || _.find(categories, { key: categoryId });
            this._getCategory(category).then(function (shapes) {
                var isAskingForAll = typeof shapeId === 'undefined';

                isAskingForAll && deferred.resolve(shapes);
                if (!isAskingForAll) {
                    var shape = shapes[shapeId] || _.find(shapes, { key: shapeId });
                    deferred.resolve(shape);
                }
            });
        }, this));

        return deferred.promise();
    };

    ShapesFactory.prototype._getCategory = function (category) {
        var deferred = $.Deferred();
        var url = INKIVE.C.BASE_URL + 'assets/js/editor/modules/shapelib/' + category['key'] + '.json';

        this.data[category['key']] && deferred.resolve(this.data[category['key']]);
        this.data[category['key']] || $.getJSON(url, _.bind(function (result) {
            this.data[category['key']] = this.mapResult(category['key'], result);
            deferred.resolve(this.data[category['key']]);
        }, this));

        return deferred.promise();
    };

    ShapesFactory.prototype.mapResult = function (categoryKey, result) {
        var translate = INKIVE.TranslateHelper.translate;

        return _.map(result.data, function (obj) {
            return _.extend({
                fill: result.fill || false,
                size: result.size || 300,
                name: translate('shapes.names.' + categoryKey + '.' + obj['key'])
            }, obj);
        });
    };

    module.exports = new ShapesFactory();

},{"../modules/shapelib/basic.json":89}],81:[function(require,module,exports){
    var memoizedPromise;

    module.exports = {
        get: function (forceReload) {
            if (memoizedPromise && !forceReload) return memoizedPromise;

            return memoizedPromise = get();
        }
    };

    function get() {
        var deferred = $.Deferred();

        $.getJSON(INKIVE.C.BASE_URL + 'api/user/current', _.bind(function (data) {
            deferred.resolve(data);
        }, this));

        return deferred.promise();
    }

},{}],82:[function(require,module,exports){

// var $=require("jquery")
// var  INKIVE= {}


// var  _= require("underscore")

// require('../../inkive')
    $(function () {
        // TODO: gradually avoid using global namespace by requiring on each module

        var translationsLoadPromise = initTranslations();
        initTemplates();
        initModals();
        initUIComponents();
        initThumbs();
        initTools();

        initToolsMenu();

        require('./analytics/error-track');

        translationsLoadPromise.done(function () {
            require('./utils/translate-constants')(window.INKIVE.TranslateHelper.translate);

            window.INKIVE.Menus = {};
            var TopSubmenuView = require('./ui/top-submenu/view');
            var BottomSubmenuView = require('./ui/bottom-submenu/view');
            var mobileToolMenuView = require('./ui/mobile-tool-menu/view');

            new TopSubmenuView({ el: '#header' });
            new mobileToolMenuView({ el: '#mobile-tool-menu' });
            window.INKIVE.Menus.bottomSubmenu = new BottomSubmenuView({ el: '#bottom-submenu' });
        });

        window.INKIVE.DesignFacade = require('./facade/design/design');
        window.INKIVE.EditorFacade = require('./facade/editor/editor');
        window.INKIVE.ProjectFacade = require('./facade/project/project');
        window.INKIVE.RestrictionsFacade = require('./facade/restrictions/restrictions');

        window.INKIVE.EditorModeManager = require('./ui/editor-mode-manager');

        window.INKIVE.SettingsFactory = require('./factory/settings');
        window.INKIVE.ImagesFactory = require('./factory/images');
        window.INKIVE.PageThumbnailFactory = require('./factory/page-thumbnail');
        window.INKIVE.LibraryFactory = require('./factory/library');
        window.INKIVE.UserInfoFactory = require('./factory/user-info');
        window.INKIVE.FontsFactory = require('./factory/fonts');

        INKIVE.FontsFactory.initialize();
    });

    function initToolsMenu() {
        var ImagesView = require('./ui/tool-menu/images/view');
        var TextView = require('./ui/tool-menu/text/view');
        var ImportView = require('./ui/tool-menu/import/view');
        var CustomizeView = require('./ui/tool-menu/customize/view');
        var TemplatesView = require('./ui/tool-menu/templates/view');
        var SettingsView = require('./ui/tool-menu/settings/view');
        var AdminView = require('./ui/tool-menu/admin/view');
        var LibraryView = require('./ui/tool-menu/library/view');

        window.INKIVE.Tabs = {};
        window.INKIVE.Tabs.images = new ImagesView({ el: '#tabImages' });
        window.INKIVE.Tabs.text = new TextView({ el: '#tabText' });
        window.INKIVE.Tabs.import = new ImportView({ el: '#tabImport' });
        window.INKIVE.Tabs.extra = new CustomizeView({ el: '#tabExtra' });
        window.INKIVE.Tabs.layouts = new TemplatesView({ el: '#tabLayouts' });
        window.INKIVE.Tabs.settings = new SettingsView({ el: '#tabSettings' });
        window.INKIVE.Tabs.admin = new AdminView({ el: '#tabAdmin' });
        window.INKIVE.Tabs.library = new LibraryView({ el: '#tabLibrary' });

        if ($('#tabRestrictions').length) {
            var RestrictionsView = require('./ui/tool-menu/restrictions/view');

            window.INKIVE.RestrictionsFactory = require('./factory/restrictions');
            window.INKIVE.Tabs.restrictions = new RestrictionsView({ el: '#tabRestrictions' });
        }
    }

    function initTools() {
        window.INKIVE.Tool = window.INKIVE.Tool || {};
        window.INKIVE.Helpers = window.INKIVE.Helpers || {};

        window.INKIVE.Helpers.mobileVersion = require('./app/version');
        window.INKIVE.Helpers.cookieStorage = require('./utils/cookie-storage');
        window.INKIVE.Helpers.imagesSanitize = require('./utils/images-sanitize');

        window.INKIVE.SVGElementLoading = require('./SVGElementLoading');

        if (INKIVE.C.IS_MOBILE_APP) window.AppBridge = require('./app/bridge');

        require('./utils/ellipsis')();
        require('./utils/backbone-mixin');

        var tool = INKIVE.Tool.getInstance();
        tool.editor.on('initialize', function () {
            var advice = require('./utils/advice');
            advice.initialize(tool.editor.canvas);
        });
    }

    function initTranslations() {
        var TranslateHelper = require('../../translations/translate-helper');
        window.INKIVE.TranslateHelper = new TranslateHelper('editor', INKIVE.C.BASE_URL + 'assets/build/translations/client/', INKIVE.C.BUILD);
        _.bindAll(window.INKIVE.TranslateHelper, 'translate');

        return INKIVE.TranslateHelper.load();
    }

    function initModals() {
        window.INKIVE.ModalHelp = require('./modal/help');
        window.INKIVE.ModalAddPage = require('./modal/add-page');
        window.INKIVE.ModalShareEmail = require('./modal/share-email');
        window.INKIVE.ModalShareEmbed = require('./modal/share-embed');
        window.INKIVE.ModalFriends = require('./modal/friends');
        window.INKIVE.ModalDownload = require('./modal/download');

        /*
         "editor/modal/adminBackground.js",
         "editor/modal/adminSticker.js",
         "editor/modal/adminLayout.js"
         */
    }

    function initThumbs() {
        window.INKIVE.SVGPlaceholderImage = require('./thumb/placeholder');
        /*
         "editor/thumb/thumb.js",
         "editor/thumb/thumbShape.js",
         "editor/thumb/thumbFont.js",
         "editor/thumb/thumbText.js",
         "editor/thumb/thumbSimpleText.js",
         "editor/thumb/thumbGroupImage.js",
         "editor/thumb/placeholder.js",
         */
    }

    function initUIComponents() {
        require('./ui/filterpicker');

        var isDnDEnabled = INKIVE.C.MODE.IS_DESYGNER && !INKIVE.C.IS_MOBILE;
        var StageDragAndDrop = require('./ui/stage-dnd');
        isDnDEnabled && StageDragAndDrop.init();
        /*
         "editor/ui/colorpicker.js",
         "editor/ui/popupmenuDefault.js",
         "editor/ui/popupmenuMobile.js",
         "editor/ui/popupmenu.js",
         */
    }

    function initTemplates() {
        var Handlebars = require('hbsfy/runtime');
        window.INKIVE.TemplatesHelper = require('./ui/templates/templates-helper');

        Handlebars.registerHelper('Desygner', function (options) {
            return INKIVE.C.MODE.IS_DESYGNER ? options.fn(this) : options.inverse(this);
        });

        Handlebars.registerHelper('Photobooky', function (options) {
            return !INKIVE.C.MODE.IS_DESYGNER ? options.fn(this) : options.inverse(this);
        });

        Handlebars.registerHelper('Mobile', function (options) {
            return INKIVE.C.IS_MOBILE ? options.fn(this) : options.inverse(this);
        });

        Handlebars.registerHelper('Desktop', function (options) {
            return !INKIVE.C.IS_MOBILE ? options.fn(this) : options.inverse(this);
        });

        Handlebars.registerHelper('low', function (s) {
            return s.toLowerCase();
        });

        Handlebars.registerHelper('upp', function (s) {
            return s.toUpperCase();
        });

        Handlebars.registerHelper('route', function (s) {
            return INKIVE.C.BASE_URL + s;
        });

        Handlebars.registerHelper('eq', function (val1, val2, options) {
            return val1 == val2 ? options.fn(this) : options.inverse(this);
        });

        Handlebars.registerHelper('if_eq', function (a, b, opts) {
            if (a == b) return opts.fn(this);else return opts.inverse(this);
        });

        Handlebars.registerHelper('math', function (lvalue, operator, rvalue, options) {
            lvalue = parseFloat(lvalue);
            rvalue = parseFloat(rvalue);

            return {
                '+': lvalue + rvalue,
                '-': lvalue - rvalue,
                '*': lvalue * rvalue,
                '/': lvalue / rvalue,
                '%': lvalue % rvalue
            }[operator];
        });
    }

},{"../../translations/translate-helper":328,"./SVGElementLoading":3,"./analytics/error-track":5,"./app/bridge":6,"./app/version":10,"./facade/design/design":19,"./facade/editor/editor":45,"./facade/project/project":56,"./facade/restrictions/restrictions":62,"./factory/fonts":64,"./factory/images":66,"./factory/library":67,"./factory/page-thumbnail":74,"./factory/restrictions":75,"./factory/settings":79,"./factory/user-info":81,"./modal/add-page":83,"./modal/download":84,"./modal/friends":85,"./modal/help":86,"./modal/share-email":87,"./modal/share-embed":88,"./thumb/placeholder":90,"./ui/bottom-submenu/view":101,"./ui/editor-mode-manager":102,"./ui/filterpicker":110,"./ui/mobile-tool-menu/view":111,"./ui/stage-dnd":112,"./ui/templates/templates-helper":148,"./ui/tool-menu/admin/view":165,"./ui/tool-menu/customize/view":236,"./ui/tool-menu/images/view":252,"./ui/tool-menu/import/view":262,"./ui/tool-menu/library/view":274,"./ui/tool-menu/restrictions/view":292,"./ui/tool-menu/settings/view":294,"./ui/tool-menu/templates/view":302,"./ui/tool-menu/text/view":307,"./ui/top-submenu/view":317,"./utils/advice":318,"./utils/backbone-mixin":320,"./utils/cookie-storage":321,"./utils/ellipsis":322,"./utils/images-sanitize":324,"./utils/translate-constants":326,"hbsfy/runtime":373}],83:[function(require,module,exports){
    var template = require('../ui/templates/modal/add-page.hbs');

    module.exports = ModalAddPage = function (opts) {
        this.opts = $.extend({
            baseUrl: INKIVE.C.BASE_URL,
            staticUrl: INKIVE.C.STATIC_URL
        }, opts);

        this.$wrapper = $(this.opts.wrapper ? this.opts.wrapper : '<div style="padding-top: 10px;"></div>');

        this.$wrapper.append(template());
    };

    ModalAddPage.prototype = {
        constructor: INKIVE.ModalAddPage,

        getFormHtml: function () {
            return this.$wrapper;
        },

        saveForm: function (callback) {
            callback && callback(true);
        }
    };

},{"../ui/templates/modal/add-page.hbs":124}],84:[function(require,module,exports){
    var version = require('../app/version');
    var template = require('../ui/templates/modal/download.hbs');

    module.exports = ModalDownload = function (opts) {
        var that = this;

        this.opts = $.extend({
            format: null,
            contentW: null,
            contentH: null,

            baseUrl: INKIVE.C.BASE_URL,
            staticUrl: INKIVE.C.STATIC_URL
        }, opts);

        this.$wrapper = $(this.opts.wrapper ? $(this.opts.wrapper) : $('<div class="tool-content"></div>'));

        this.$wrapper.append(template({
            display_zip_option: INKIVE.C.IS_MOBILE_APP && !window.Android,
            display_extended_options: that.opts.format != 'pdf'
        }));
        initEvents();

        function initEvents() {
            var dimensions = ['thumb', 'web', 'mobile'];
            var width = that.opts.contentW,
                height = that.opts.contentH;

            // Special case, to make 72dpi
            if (width == 737 && height == 521) {
                width = 842;
                height = 595;
            }

            var aspect = width / height;

            that.opts.format == 'png' && disableQualitySelection();
            initCheckbox();

            setDefaultValues('rangeCurrent');
            setDefaultValues('thumb', 110);
            setDefaultValues('mobile', 600);
            setDefaultValues('web', 800);

            _.each(dimensions, setOnToggled);
            _.each(_.union(['rangeCurrent'], dimensions), setOnChange);

            function disableQualitySelection() {
                that.$wrapper.find('#quality-section').addClass('disabled');
            }

            function initCheckbox() {
                that.$wrapper.find('[type=checkbox]').iCheck({
                    checkboxClass: 'icheckbox_square-yellow'
                });

                that.$wrapper.find('[type=radio]').iCheck({
                    radioClass: 'iradio_square-yellow'
                });

                that.$wrapper.find('.ui-dropdown .input-icon').on('click', function (event) {
                    $(event.target).parents('.ui-dropdown').find('ul').toggle();
                });

                that.$wrapper.find('a.quality').on('click', function () {
                    that.$wrapper.find('a.quality').removeClass('active');
                    $(this).addClass('active');
                });
            }

            function setDefaultValues(name, limit) {
                var className = '.' + name + 'Dimensions';

                var thisWidth = limit && width > limit ? limit : width;

                var thisHeight = limit && width > limit ? parseInt(limit / aspect) : height;

                that.$wrapper.find(className + '[data-type="width"]').val(thisWidth);
                that.$wrapper.find(className + '[data-type="height"]').val(thisHeight);
            }

            function setOnToggled(name) {
                var attName = 'is' + capitalizeFirstLetter(name);
                var className = '.' + name + 'Dimensions';

                that.$wrapper.find('[type=checkbox][name="' + attName + '"]').on('ifToggled', function (event) {
                    that.$wrapper.find(className).toggleClass('disabled');
                });
            }

            function setOnChange(name) {
                name += 'Dimensions';
                that.$wrapper.find('.' + name).change(function (e) {
                    updateSize($(this), name);
                });
            }

            function updateSize($elem, clazz) {
                var val = parseInt($elem.val());
                var type = $elem.attr('data-type');

                if (val < 16) val = 16;
                if (val > 3000) val = 3000;

                var width = type == 'width' ? val : parseInt(val / aspect);
                var height = type != 'width' ? val : parseInt(val / aspect);

                that.$wrapper.find('.' + clazz + '[data-type="width"]').val(width);
                that.$wrapper.find('.' + clazz + '[data-type="height"]').val(height);
            }

            function capitalizeFirstLetter(string) {
                return string.charAt(0).toUpperCase() + string.slice(1);
            }
        }
    };

    ModalDownload.prototype = {
        constructor: ModalDownload,

        getFormHtml: function () {
            return this.$wrapper;
        },

        download: function (callback) {

            INKIVE.Helpers.downloadProcedure(this.$wrapper, this.opts, callback);
        }
    };

},{"../app/version":10,"../ui/templates/modal/download.hbs":135}],85:[function(require,module,exports){
    var UserSearch = require('../../user-search/index');
    var templates = {
        container: require('../ui/templates/modal/friends.hbs'),
        item: require('../ui/templates/modal/friends/item.hbs'),
        loading: require('../ui/templates/modal/friends/loading.hbs'),
        noResults: require('../ui/templates/modal/friends/no-results.hbs')
    };

    module.exports = ModalFriends = function (opts) {
        var that = this;

        this.opts = $.extend({
            type: null, //admins, inked, tagged
            bookId: INKIVE.C.BOOK.id,
            bookName: Base64.decode(INKIVE.C.BOOK.name),

            baseUrl: INKIVE.C.BASE_URL,
            staticUrl: INKIVE.C.STATIC_URL
        }, opts);

        this.$wrapper = $(this.opts.wrapper ? $(this.opts.wrapper) : $('<div class="tool-content"></div>'));

        initTemplate();
        initSearch();
        initEmail();

        function initTemplate() {
            that.$wrapper.append(templates.container());
            that.$wrapper.find('#search').focus();
        }

        function initSearch() {
            var Tool = INKIVE.Tool.getInstance();
            var $search = that.$wrapper.find('#search');
            var $list = that.$wrapper.find('ul.friends');
            var friendsListParameters = {
                scrapbook: that.opts.bookId,
                ink_type: that.opts.type
            };

            addLoader();
            initSearchEvents();

            UserSearch({
                '$searchInput': $search,

                api: INKIVE.Helpers.api,
                baseUrl: that.opts.baseUrl,
                friendsListParameters: friendsListParameters,
                facebookToken: Tool.facebookToken || FB.getAccessToken(),
                noProfilePicture: that.opts.staticUrl + 'img/profile/anonimo.jpg',

                enter: enter,
                filter: filter,
                appendUser: appendUser,
                updateFriendScroll: updateFriendScroll
            });

            function enter() {
                $list.find('li:visible .btn-add-request').first().click();
            }

            function filter(query, isStillSearching) {
                if (query.length > 0) {
                    $list.find('.media-heading:not(:contains("' + query + '"))').closest('li').hide();
                    $list.find('.media-heading:contains("' + query + '")').closest('li').show();
                } else $list.find('li').show();

                var isLoadingMore = isStillSearching && query.length > 2;
                updateFriendScroll(isLoadingMore);
            }

            function appendUser(user) {
                $list.append(templates.item(user));
            }

            function updateFriendScroll(isLoadingMore) {
                var $antiscroll = that.$wrapper.find('.antiscroll-wrap');

                var height = $list.find('li').first().height();
                var length = $list.find('li:visible').length;
                $antiscroll.height(length > 5 ? height * 5 : height * (length || 1));

                isLoadingMore && addLoader();
                isLoadingMore || that.$wrapper.find('.info-message').remove();
                isLoadingMore || length || addNoResult();

                $antiscroll.antiscroll({
                    autoHide: false,
                    width: $antiscroll.width(),
                    height: $antiscroll.height()
                });

                that.$wrapper.trigger('contentChanged');
            }

            function addNoResult() {
                var $infoMessage = that.$wrapper.find('.info-message');
                $infoMessage.length || $list.before(templates.noResults());
            }

            function addLoader() {
                that.$wrapper.find('.info-message').remove();
                var $scroll = that.$wrapper.find('.antiscroll-wrap');
                $scroll.after(templates.loading());
            }

            function initSearchEvents() {
                that.$wrapper.on('itemAdded itemRemoved', '#search', function (item) {
                    var friend = item.item;

                    if (friend) {
                        var $li = $list.find('li[data-id="' + friend.id + '"]');
                        var $btn = $li.find('.btn-add-request');

                        if ($li.hasClass('grayscale')) {
                            $li.removeClass('grayscale');
                            $btn.html('Drop user');
                        } else {
                            $li.addClass('grayscale');
                            $btn.html('Add user');
                        }
                    }

                    $search.tagsinput('input').val('');
                    $list.find('li').show();
                    updateFriendScroll();
                });

                that.$wrapper.on('click', ' ul.friends li .btn-add-request', function (event) {
                    var data = $(this).parent('li').data();
                    var tmp_name = $(this).parent('li').find('.media-body').text();

                    var name = tmp_name.replace('Facebook', '');
                    name = name.replace('Inkive', '');

                    var $item = $(this).parent('li');
                    var isEnabled = $item.hasClass('grayscale');
                    var tag = {
                        id: $item.attr('data-id'),
                        name: name,
                        network: data.network
                    };

                    isEnabled && $search.tagsinput('add', tag);
                    isEnabled || $search.tagsinput('remove', tag);
                });
            }
        }

        function initEmail() {
            var $email = that.$wrapper.find('#email4inviting');
            var $section = that.$wrapper.find('#inviteFriendComments').parent();

            $email.keyup(function (event) {
                var text = $(this).val().trim();
                var slideFunctionName = text.length > 0 && text.indexOf('@') > 0 ? 'slideDown' : 'slideUp';

                $section[slideFunctionName]('fast', function () {
                    that.$wrapper.trigger('contentChanged');
                });
            });
        }
    };

    ModalFriends.prototype = {
        constructor: ModalFriends,

        getFormHtml: function () {
            return this.$wrapper;
        },

        saveForm: function (callback) {
            callback = callback || $.noop;
            var that = this;

            var emails = that.$wrapper.find('#email4inviting').val();

            if (emails) {
                var params = {
                    email: emails,
                    message: that.$wrapper.find('#inviteFriendComments').val(),
                    scrapbook_id: that.opts.bookId,
                    scrapbook_name: that.opts.bookName,
                    invite_type: that.opts.type == 'admins' ? 2 : that.opts.type == 'inked' ? 1 : that.opts.type == 'tagged' ? 3 : null
                };

                $.post(that.opts.baseUrl + 'inkive/inkviaemail', params, function (data) {
                    that.$wrapper.find('#email4inviting').val('');
                    console.log('invitation(s) has been sent');
                }).error(function (e) {
                    that.$wrapper.find('#email4inviting').val('');
                });
            }

            var inked = that.$wrapper.find('#search').tagsinput('items');
            var socialids = [];

            for (var i = 0; i < inked.length; i++) {
                if (inked[i].network.toLowerCase() == 'facebook') socialids[i] = "'" + inked[i].id + "'";
            }

            // TODO: this stuff
            var socialids_str = '';
            if (socialids.length > 0) socialids_str = '[' + socialids.join(',') + ']';

            if (inked.length > 0) ModalFriends.addInvolvedUser(that.opts.type, that.opts.bookId, inked, function (status) {
                callback(status, that.opts.type, inked);
            });else callback(true, that.opts.type, inked);
        }
    };

    ModalFriends.addInvolvedUser = function (type, bookId, inked, callback, baseUrl) {
        baseUrl = baseUrl || INKIVE.C.BASE_URL;
        bookId = bookId || INKIVE.C.BOOK.id;

        callback = callback || $.noop;

        jQuery.post(baseUrl + 'inkive/setInked/' + type, { scrapbook: bookId, users: inked }, function (data) {
            callback(data.success);
        }, 'json');
    };

    ModalFriends.deleteInvolvedUser = function ($elem, bookId, callback, baseUrl) {
        baseUrl = baseUrl || INKIVE.C.BASE_URL;
        bookId = bookId || INKIVE.C.BOOK.id;

        callback = callback || $.noop;

        var delete_params = {
            id: $elem.parents('.userHolder').data("id"),
            inkive_id: bookId
        };

        $.post(baseUrl + 'friends/unsetinked', delete_params, function (data) {

            var $listContainer = $elem.parents('.listContainer');
            $elem.parents('.userHolder').remove();

            if (!$listContainer.find('.userHolder').length) {
                $listContainer.parent().addClass('empty');
                $listContainer.find('.emptyText').show();
            }

            callback(bookId);
        });
    };

    ModalFriends.initInvolvedList = function ($elem, type, onDelete, bookId, baseUrl) {
        baseUrl = baseUrl || INKIVE.C.BASE_URL;
        bookId = bookId || INKIVE.C.BOOK.id;

        onDelete = onDelete || $.noop;

        var listName = $elem.attr('class');

        var params = {
            type: type,
            scrapbook: bookId,
            currentPage: 'mykive'
        };

        var last_li = $elem.find('li:last');
        var $parent = $elem.parent().parent();

        $.getJSON(baseUrl + 'inkive/getInked', params).done(function (json) {
            $elem.find('li>:not(a)').parent().remove();
            $parent.find('.spinnerWrapper').hide();

            if (json.success) {
                var data = json.data;
                if (data.trim().length) {
                    $elem.find('li>:not(a)').parent().remove();
                    $elem.prepend(json.data);
                    $('li[data-toggle="tooltip"]').tooltip({ placement: "top" });

                    $parent.removeClass("empty");
                    $parent.find('.emptyText').hide();
                }

                if ($(last_li).attr('data-position') != null) {
                    var new_width = $(last_li).attr('data-position') * 40;

                    if (listName != 'co-creators-list') new_width = new_width + 40;

                    $($elem).css('width', new_width);
                }

                $($elem).trigger('listupdate', bookId);
            }

            $elem.find('.thumb-img').unbind('mouseenter');
            $elem.on('mouseenter', '.thumb-img', function (e) {
                var $deleteImage = $(this).parent().find('.thumb-delete');

                if ($deleteImage.length > 0) {
                    $(this).fadeOut();
                    $deleteImage.fadeIn();
                }
            });

            $elem.find('.thumb-delete').unbind('mouseleave click');
            $elem.on('mouseleave', '.thumb-delete', function (e) {
                $(this).fadeOut();
                $(this).parent().find('.thumb-img').fadeIn();
            });

            $elem.on('click', '.thumb-delete', function (e) {
                onDelete($(this));
            });
        });
    };

},{"../../user-search/index":327,"../ui/templates/modal/friends.hbs":136,"../ui/templates/modal/friends/item.hbs":137,"../ui/templates/modal/friends/loading.hbs":138,"../ui/templates/modal/friends/no-results.hbs":139}],86:[function(require,module,exports){
    var template = require('../ui/templates/modal/help.hbs');

    module.exports = ModalHelp = function (opts) {
        this.opts = $.extend({
            userId: INKIVE.C.USER.id,
            userName: Base64.decode(INKIVE.C.USER.nickname),
            userEmail: Base64.decode(INKIVE.C.USER.email),

            baseUrl: INKIVE.C.BASE_URL,
            staticUrl: INKIVE.C.STATIC_URL
        }, opts);

        this.$wrapper = $(this.opts.wrapper ? $.parseHTML(this.opts.wrapper) : $.parseHTML('<div class="tool-content"></div>'));

        this.$wrapper.append(template({
            user_name: this.opts.userName,
            user_email: this.opts.userEmail
        }));
    };

    ModalHelp.prototype = {
        constructor: ModalHelp,
        getFormHtml: function () {
            return this.$wrapper;
        },
        saveForm: function (callback) {
            var Tool = INKIVE.Tool.getInstance();
            var params = {
                email: this.$wrapper.find('[name="name"]').val(),
                name: this.$wrapper.find('[name="email"]').val(),
                help: this.$wrapper.find('[name="help"]').val(),
                scrapbook_id: INKIVE.C.BOOK.id
            };

            var classList = $('#svgcontent g.main')[0].classList;
            var className = _.find(classList, function (className) {
                return className.indexOf('layout-id') === 0;
            });

            if (className) params['template_id'] = className.split('-')[2];

            INKIVE.Helpers.api('inkive/feedback', 'POST', params, function (r) {
                callback && callback(r.status);
            });
        }
    };

},{"../ui/templates/modal/help.hbs":140}],87:[function(require,module,exports){
    var template = require('../ui/templates/modal/share-email.hbs');

    module.exports = ModalShareEmail = function (opts) {
        var that = this;

        this.opts = $.extend({
            userId: INKIVE.C.USER.id,
            userName: Base64.decode(INKIVE.C.USER.nickname),

            baseUrl: INKIVE.C.BASE_URL,
            staticUrl: INKIVE.C.STATIC_URL
        }, opts);

        this.$wrapper = $(this.opts.wrapper ? $(this.opts.wrapper) : $('<div class="tool-content"></div>'));

        that.$wrapper.append(template({
            thumb: INKIVE.C.BOOK.thumb,
            book_name: Base64.decode(INKIVE.C.BOOK.name),
            book_description: Base64.decode(INKIVE.C.BOOK.description).trimToLength(100),
            user_name: that.opts.userName
        }));
    };

    ModalShareEmail.prototype = {
        constructor: ModalShareEmail,

        getFormHtml: function () {
            return this.$wrapper;
        },

        saveForm: function (callback) {
            callback = callback || $.noop;

            var url = INKIVE.C.BASE_URL + 'share/sendemail/' + INKIVE.C.BOOK.id;
            var form_data = this.$wrapper.parents('form').serialize();
            $.post(url, form_data, function (data) {
                data.success && callback(true);
            }, 'json').fail(function () {
                callback(false);
            });

            callback(false);
        }
    };

},{"../ui/templates/modal/share-email.hbs":141}],88:[function(require,module,exports){
    var template = require('../ui/templates/modal/share-embed.hbs');

    module.exports = ModalShareEmbed = function (opts) {
        var that = this;

        this.opts = opts || {};

        this.$wrapper = $(this.opts.wrapper ? $(this.opts.wrapper) : $('<div class="tool-content"></div>'));

        initTemplate();
        initEvents();

        function initTemplate() {
            that.$wrapper.append(template({
                width: INKIVE.C.EMBED.DefaultWidth,
                height: INKIVE.C.EMBED.DefaultHeight
            }));

            that.$wrapper.find('[type=checkbox]').iCheck({
                checkboxClass: 'icheckbox_square-yellow'
            });

            that.$wrapper.find('[name=bookName]').iCheck('check');
            that.$wrapper.find('[name=bookViews]').iCheck('check');
        }

        function initEvents() {
            that.$wrapper.find('a.type').on('click', function () {
                that.$wrapper.find('a.type').removeClass('active');
                $(this).addClass('active');

                if ($(this).attr('data-id') == 'scroll') {
                    that.$wrapper.find('#share-embed-checkboxes').slideUp(function () {
                        that.$wrapper.trigger('contentChanged');
                    });
                    that.$wrapper.find('#share-embed-size-text').html(that.opts.text_size + ' (1.5 ' + (INKIVE.C.MODE.IS_DESYGNER ? 'designs' : 'pages') + ' at a time)');
                    that.$wrapper.find('#share-embed-size a.size:not([data-id=custom])').each(function (index, elem) {
                        var width = parseInt($(elem).attr('data-id'));
                        var height = Math.round(width * INKIVE.C.EMBED.W2H * 1.5 + 40);
                        $(elem).attr('tag', width + ' x ' + height);
                    });
                } else {
                    that.$wrapper.find('#share-embed-checkboxes').slideDown(function () {
                        that.$wrapper.trigger('contentChanged');
                    });
                    that.$wrapper.find('#share-embed-size-text').html(that.opts.text_size);
                    that.$wrapper.find('#share-embed-size a.size:not([data-id=custom])').each(function (index, elem) {
                        var width = parseInt($(elem).attr('data-id'));
                        var height = Math.round(width * INKIVE.C.EMBED.W2H);
                        $(elem).attr('tag', width + ' x ' + height);
                    });
                }

                calcUrl();
            });

            that.$wrapper.find('a.size').on('click', function () {
                that.$wrapper.find('a.size').removeClass('active');
                $(this).addClass('active');

                if ($(this).attr('data-id') == 'custom') {
                    $(this).hide();
                    that.$wrapper.find('#share-embed-custom-sizes').fadeIn();
                } else {
                    that.$wrapper.find('#share-embed-custom-sizes').hide();
                    that.$wrapper.find('a.size').show();
                }

                calcUrl();
            });

            that.$wrapper.find('input[name=width]').keyup(function (event) {
                var mode = that.$wrapper.find('a.type.active').attr('data-id');
                var width = parseInt($(this).val()) || 0;
                var height = parseInt(that.$wrapper.find('input[name=height]').val());

                if (width > INKIVE.C.EMBED.MaxWidth) {
                    $(this).val(INKIVE.C.EMBED.MaxWidth);
                    width = $(this).val();
                }

                if (mode == 'scroll') {
                    if (width > Math.round((INKIVE.C.EMBED.DefaultHeight - 40) / INKIVE.C.EMBED.W2H * 1.5)) that.$wrapper.find('input[name=height]').val(Math.round(width * INKIVE.C.EMBED.W2H * 1.5 + 40));
                } else {
                    that.$wrapper.find('input[name=height]').val(Math.round(width * INKIVE.C.EMBED.W2H));
                }

                calcUrl();
            });

            that.$wrapper.find('input[name=height]').keyup(function (event) {
                var mode = that.$wrapper.find('a.type.active').attr('data-id');
                var height = parseInt($(this).val()) || 0;

                if (mode != 'scroll') {
                    var width = height / INKIVE.C.EMBED.W2H;

                    if (width > INKIVE.C.EMBED.MaxWidth) {
                        width = INKIVE.C.EMBED.MaxWidth;
                        $(this).val(Math.round(width * INKIVE.C.EMBED.W2H));
                    }

                    that.$wrapper.find('input[name=width]').val(Math.round(width));
                }

                calcUrl();
            });

            that.$wrapper.find('textarea').on('click', function (event) {
                this.select();
            });

            that.$wrapper.find('[type=checkbox]').on('ifToggled', function () {
                calcUrl();
            });

            calcUrl();
        }

        function calcUrl() {
            var mode = that.$wrapper.find('a.type.active').attr('data-id');

            var width = INKIVE.C.EMBED.DefaultWidth;
            var height = INKIVE.C.EMBED.DefaultHeight;

            var display_bookName = that.$wrapper.find('[name=bookName]').is(':checked') ? 1 : 0;
            var display_bookViews = that.$wrapper.find('[name=bookViews]').is(':checked') ? 1 : 0;

            var $size = that.$wrapper.find('a.size.active');
            if ($size.attr('data-id') == 'custom') {
                width = that.$wrapper.find('input[name=width]').val() || width;
                height = that.$wrapper.find('input[name=height]').val() || height;
            } else {
                width = parseInt($size.attr('data-id'));
                if (mode == 'scroll') {
                    height = Math.round(width * INKIVE.C.EMBED.W2H * 1.5 + 40);
                } else {
                    height = Math.round(width * INKIVE.C.EMBED.W2H);
                }
            }

            var val = '<iframe src="' + INKIVE.C.BASE_URL.replace('http:', '') + 'design/embedded/' + INKIVE.C.BOOK.id + '/' + width + '/' + height + '/' + mode + '/' + display_bookName + '/' + display_bookViews + '/" width="' + width + '" height="' + height + '" frameborder="0"></iframe>';

            that.$wrapper.find('textarea[name=code]').val(val);
        }
    };

    ModalShareEmbed.prototype = {
        constructor: ModalShareEmbed,

        getFormHtml: function () {
            return this.$wrapper;
        },

        saveForm: function (callback) {
            callback && callback(true);
        }
    };

},{"../ui/templates/modal/share-embed.hbs":142}],89:[function(require,module,exports){
    module.exports={
        "data": [
            {
                "key": "square",
                "path": "M 0 0 L 0 300 L 300 300 L 300 0 L 0 0"
            }, {
                "key": "rectangle",
                "path": "M 0 50 L 0 250 L 300 250 L 300 50 L 0 50"
            }, {
                "key": "circle",
                "path": "M 150 150 m -150, 0 a 150,150 0 1,0 300,0 a 150,150 0 1,0 -300,0"
            }, {
                "key": "ellipse",
                "path": "M0,150a150,100 0 1,0 300,0a150,100 0 1,0 -300,0"
            }, {
                "key": "pentagon",
                "path": "m1.00035,116.97758l148.99963,-108.4053l148.99998,108.4053l-56.91267,175.4042l-184.1741,0l-56.91284,-175.4042z"
            }, {
                "key": "triangle",
                "path": "m1,280.375l149,-260.75l149,260.75z"
            }, {
                "key": "diamond",
                "path": "m1,150l149,-149l149,149l-149,149l-149,-149z"
            }, {
                "key": "right_triangle",
                "path": "m1,299l0,-298l298,298z"
            }, {
                "key": "donut",
                "path": "m1,150l0,0c0,-82.29042 66.70958,-149 149,-149l0,0c39.51724,0 77.41599,15.69816 105.35889,43.64108c27.94293,27.94293 43.64111,65.84165 43.64111,105.35892l0,0c0,82.29041 -66.70958,149 -149,149l0,0c-82.29041,0 -149,-66.70959 -149,-149zm74.5,0l0,0c0,41.1452 33.35481,74.5 74.5,74.5c41.14522,0 74.5,-33.3548 74.5,-74.5c0,-41.1452 -33.3548,-74.5 -74.5,-74.5l0,0c-41.14519,0 -74.5,33.35481 -74.5,74.5z"
            }, {
                "key": "hexagon",
                "path": "m1,149.99944l63.85715,-127.71428l170.28572,0l63.85713,127.71428l-63.85713,127.71428l-170.28572,0l-63.85715,-127.71428z"
            }, {
                "key": "heart",
                "path": "m150,73c61,-175 300,0 0,225c-300,-225 -61,-400 0,-225z"
            }, {
                "key": "frame",
                "path": "m0,0l300,0l0,300l-300,0zm35,-265l0,230l230,0l0,-230z"
            }, {
                "key": "septagon1",
                "path": "m0.99917,191.06511l29.51249,-127.7108l119.48833,-56.83673l119.48836,56.83673l29.51303,127.7108l-82.69087,102.41679l-132.62103,0l-82.69031,-102.41679z"
            }, {
                "key": "heptagon",
                "path": "m1,88.28171l87.28172,-87.28171l123.43653,0l87.28172,87.28171l0,123.43654l-87.28172,87.28172l-123.43653,0l-87.28172,-87.28172l0,-123.43654z"
            }, {
                "key": "decagon",
                "path": "m1,150.00093l28.45646,-88.40318l74.49956,-54.63682l92.08794,0l74.50002,54.63682l28.45599,88.40318l-28.45599,88.40318l-74.50002,54.63681l-92.08794,0l-74.49956,-54.63681l-28.45646,-88.40318z"
            }, {
                "key": "dodecagon",
                "path": "m1,110.07421l39.92579,-69.14842l69.14842,-39.92579l79.85159,0l69.14842,39.92579l39.92578,69.14842l0,79.85159l-39.92578,69.14842l-69.14842,39.92578l-79.85159,0l-69.14842,-39.92578l-39.92579,-69.14842l0,-79.85159z"
            }, {
                "key": "star_points_5",
                "path": "m1,116.58409l113.82668,0l35.17332,-108.13487l35.17334,108.13487l113.82666,0l-92.08755,66.83026l35.17514,108.13487l-92.08759,-66.83208l-92.08757,66.83208l35.17515,-108.13487l-92.08758,-66.83026z"
            }, {
                "key": "trapezoid",
                "path": "m1,299l55.875,-298l186.25001,0l55.87498,298z"
            }, {
                "key": "arrow_up",
                "path": "m1.49805,149.64304l148.50121,-148.00241l148.50121,148.00241l-74.25061,0l0,148.71457l-148.5012,0l0,-148.71457z"
            }, {
                "key": "dialog_balloon_1",
                "path": "m0.99786,35.96579l0,0c0,-19.31077 15.28761,-34.96524 34.14583,-34.96524l15.52084,0l0,0l74.50001,0l139.68748,0c9.05606,0 17.74118,3.68382 24.14478,10.24108c6.40356,6.55726 10.00107,15.45081 10.00107,24.72416l0,87.41311l0,0l0,52.44785l0,0c0,19.31078 -15.2876,34.96524 -34.14584,34.96524l-139.68748,0l-97.32507,88.90848l22.82506,-88.90848l-15.52084,0c-18.85822,0 -34.14583,-15.65446 -34.14583,-34.96524l0,0l0,-52.44785l0,0z"
            }, {
                "key": "arrow_u_turn",
                "path": "m1.00059,299.00055l0,-167.62497l0,0c0,-72.00411 58.37087,-130.37499 130.375,-130.37499l0,0l0,0c34.57759,0 67.73898,13.7359 92.18906,38.18595c24.45006,24.45005 38.18593,57.61144 38.18593,92.18904l0,18.625l37.24997,0l-74.49995,74.50002l-74.50002,-74.50002l37.25,0l0,-18.625c0,-30.8589 -25.0161,-55.87498 -55.87498,-55.87498l0,0l0,0c-30.85892,0 -55.875,25.01608 -55.875,55.87498l0,167.62497z"
            }, {
                "key": "arrow_left_up",
                "path": "m0.99865,224.5l74.50004,-74.5l0,37.25l111.74991,0l0,-111.75l-37.25,0l74.5,-74.5l74.5,74.5l-37.25,0l0,186.25l-186.24989,0l0,37.25l-74.50005,-74.5z"
            }, {
                "key": "cross",
                "path": "m0.99844,99.71339l98.71494,0l0,-98.71495l101.26279,0l0,98.71495l98.71495,0l0,101.2628l-98.71495,0l0,98.71494l-101.26279,0l0,-98.71494l-98.71494,0z"
            }, {
                "key": "plaque",
                "path": "m-0.00197,49.94376l0,0c27.5829,0 49.94327,-22.36036 49.94327,-49.94327l199.76709,0l0,0c0,27.5829 22.36037,49.94327 49.94325,49.94327l0,199.7671l0,0c-27.58289,0 -49.94325,22.36034 -49.94325,49.94325l-199.76709,0c0,-27.58292 -22.36037,-49.94325 -49.94327,-49.94325z"
            }, {
                "key": "page",
                "path": "m249.3298,298.99744l9.9335,-39.73413l39.73413,-9.93355l-49.66763,49.66768l-248.33237,0l0,-298.00001l298.00001,0l0,248.33234"
            }
        ]
    }

},{}],90:[function(require,module,exports){
    var template = require('../ui/templates/thumb/placeholder.hbs');

    var SingletonPlaceholder = function () {
        function render(imageId, clipId) {
            var clipBox = getClipBox(clipId);
            if (!clipBox) return;

            var size = clipBox.width > clipBox.height ? clipBox.width : clipBox.height;

            var renderData = {
                x: clipBox.x + (clipBox.width - size) / 2,
                y: clipBox.y + (clipBox.height - size) / 2,
                id: imageId,
                size: size,
                clipId: clipId,
                is_vertical: clipBox.width < clipBox.height
            };

            return {
                renderData: renderData,
                svgString: template(renderData)
            };
        }

        function getClipBox(clipId) {
            var $rect = $clipsData.find('#' + clipId.trim() + ' rect');
            return $rect.length === 0 ? null : {
                x: parseFloat($rect.attr('x')),
                y: parseFloat($rect.attr('y')),
                width: parseFloat($rect.attr('width')),
                height: parseFloat($rect.attr('height'))
            };
        }

        var $clipsData;

        return {
            render: render,
            setClipsData: function (data) {
                $clipsData = $('<div>').html(data);
            }
        };
    }();

    module.exports = SingletonPlaceholder;

},{"../ui/templates/thumb/placeholder.hbs":149}],91:[function(require,module,exports){
    module.exports = {
        eventCategory: 'Editor UI | Bottom Menu',
        eventAction: 'page',

        previousEvent: { eventLabel: 'previous' },
        nextEvent: function (event) {
            var isAddPage = $(event.currentTarget).find('i.add').is(':visible');
            this.trackEvent({ eventLabel: isAddPage ? 'add' : 'next' });
        }
    };

},{}],92:[function(require,module,exports){
    var FormatFactory = require('../../../factory/formats');

    module.exports = {
        eventCategory: 'Editor UI | Bottom Menu',
        eventAction: 'size',

        showResizeEvent: { eventLabel: 'display_resize_options' },
        showResizeMenu: { eventLabel: 'display_multi_resize_menu' },
        doResizeEvent: function (event) {
            var width,
                height,
                unit,
                sizes = '';
            var isCustomSize = this.$el.find('input.custom').is(':checked');

            if (isCustomSize) {
                width = parseFloat(this.$el.find('input.size.page-width').val());
                height = parseFloat(this.$el.find('input.size.page-height').val());
                unit = this.$el.find('select.unit').val();

                sizes = width + 'x' + height + unit;
            } else {
                this.$el.find('[type=checkbox]:checked').each(function (i, checkbox) {
                    FormatFactory.getFormat($(checkbox).val()).then(_.bind(function (format) {
                        sizes += format.width + 'x' + format.height + format.unit + ' ';
                    }, this));
                });
            }

            this.trackEvent({
                eventAction: isCustomSize ? 'resize_custom' : 'resize_standar',
                eventLabel: 'from ' + this.$el.find('.page-size').text().trim() + ' to ' + sizes
            });
        }
    };

},{"../../../factory/formats":65}],93:[function(require,module,exports){
    module.exports = {
        eventCategory: 'Editor UI | Bottom Menu',
        eventAction: 'zoom',

        setHundredPercentEvent: { eventLabel: 'set_hundred_percent' },
        setOriginalEvent: { eventLabel: 'set_original' },
        zoomInEvent: { eventLabel: 'zoom_in' },
        zoomOutEvent: { eventLabel: 'zoom_out' }
    };

},{}],94:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=container.escapeExpression;

        return "<li>\n  <a class=\"btn btn-gray prev\" data-popover=\"tooltip\" data-placement=\"top\" data-original-title=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"bottom_submenu.page.prev",{"name":"t","hash":{},"data":data}))
            + "\"><i class=\"icon-chevron-left arrow\"></i></a>\n</li><li class=\"page-count\">\n  <span data-popover=\"tooltip\" data-placement=\"top\" data-original-title=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"bottom_submenu.page.current",{"name":"t","hash":{},"data":data}))
            + "\">0</span>/<span data-popover=\"tooltip\" data-placement=\"top\" data-original-title=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"bottom_submenu.page.total",{"name":"t","hash":{},"data":data}))
            + "\">0</span>\n</li><li>\n  <a class=\"btn btn-gray next\"><i class=\"icon-chevron-right arrow hidden\" data-popover=\"tooltip\" data-placement=\"top\" data-original-title=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"bottom_submenu.page.next",{"name":"t","hash":{},"data":data}))
            + "\"></i><i class=\"add icon-plus\" data-popover=\"tooltip\" data-placement=\"top\" data-original-title=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"bottom_submenu.page.add",{"name":"t","hash":{},"data":data}))
            + "\"></i></a>\n</li><li class=\"border-left\">\n  <a class=\"btn btn-gray delete\" data-popover=\"tooltip\" data-placement=\"top\" data-original-title=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"bottom_submenu.page.delete",{"name":"t","hash":{},"data":data}))
            + "\"><i class=\"icon-bin\"></i></a>\n</li><li class=\"border-left\">\n  <a class=\"btn btn-gray duplicate\" data-popover=\"tooltip\" data-placement=\"top\" data-original-title=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"bottom_submenu.page.duplicate",{"name":"t","hash":{},"data":data}))
            + "\"><i class=\"icon-copy\"></i></a>\n</li>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],95:[function(require,module,exports){
    var template = require('./page.hbs');
    var AnalyticsDecorate = require('../../../analytics/decorate');
    var EditorFacade = require('../../../facade/editor/editor');
    var ProjectFacade = require('../../../facade/project/project');

    module.exports = AnalyticsDecorate(require('../analytics/page'), Backbone.View.extend({
        events: {
            'click a.btn.prev': 'previousEvent',
            'click a.btn.next': 'nextEvent',
            'click a.btn.delete': 'deleteEvent',
            'click a.btn.duplicate': 'duplicateEvent'
        },

        deleteEvent: function (event) {
            var pageNumber = parseInt(INKIVE.Tool._current_page_id);

            EditorFacade.handle('page', 'unload');
            ProjectFacade.handle('design', 'remove', {
                'page_number': pageNumber
            }).then(function () {
                EditorFacade.handle('page', 'move_to', {
                    'page_number': INKIVE.C.BOOK.num_pages < pageNumber ? INKIVE.C.BOOK.num_pages : pageNumber
                });
            });
        },

        duplicateEvent: function (event) {
            var pageNumber = parseInt(INKIVE.Tool._current_page_id);
            INKIVE.Tool.getInstance().copyPage(pageNumber);
        },

        previousEvent: function (event) {
            var pageNumber = parseInt(INKIVE.Tool._current_page_id);
            EditorFacade.handle('page', 'move_to', { 'page_number': pageNumber - 1 });
        },

        nextEvent: function (event) {
            var pageNumber = parseInt(INKIVE.Tool._current_page_id);
            var isAddPage = $(event.currentTarget).find('i.add').is(':visible');

            isAddPage && this.addPage();
            isAddPage || EditorFacade.handle('page', 'move_to', {
                'page_number': pageNumber + 1
            });
        },

        addPage: function () {
            ProjectFacade.handle('design', 'add');
        },

        initialize: function () {
            this.tool = INKIVE.Tool.getInstance();
            this.editor = this.tool.editor;

            _.bindAll(this, 'updateCurrentPageInfo');
            this.render();
        },

        render: function () {
            this.$el.html(template());
        },

        updateCurrentPageInfo: function () {
            var pageNumber = INKIVE.Tool._current_page_id;
            var totalPages = INKIVE.C.BOOK.num_pages;

            var $pageCount = this.$el.find('.page-count span');
            var $pagePrev = this.$el.find('a.btn.prev');
            var $pageNext = this.$el.find('a.btn.next');

            $pageCount.eq(0).text(pageNumber);
            $pageCount.eq(1).text(totalPages);

            $pagePrev.toggleClass('disabled', pageNumber == 1);

            $pageNext.find('i.add').toggleClass('hidden', pageNumber != totalPages);
            $pageNext.find('i.arrow').toggleClass('hidden', pageNumber == totalPages);
        }
    }));

},{"../../../analytics/decorate":4,"../../../facade/editor/editor":45,"../../../facade/project/project":56,"../analytics/page":91,"./page.hbs":94}],96:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data,blockParams,depths) {
        var stack1, helper, options, buffer =
            "        ";
        stack1 = ((helper = (helper = helpers.data || (depth0 != null ? depth0.data : depth0)) != null ? helper : helpers.helperMissing),(options={"name":"data","hash":{},"fn":container.program(2, data, 0, blockParams, depths),"inverse":container.noop,"data":data}),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : {},options) : helper));
        if (!helpers.data) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "\n";
    },"2":function(container,depth0,helpers,partials,data,blockParams,depths) {
        var stack1;

        return ((stack1 = (helpers.eq || (depth0 && depth0.eq) || helpers.helperMissing).call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.id : depth0),((stack1 = (depths[2] != null ? depths[2].format : depths[2])) != null ? stack1.id : stack1),{"name":"eq","hash":{},"fn":container.program(3, data, 0, blockParams, depths),"inverse":container.noop,"data":data})) != null ? stack1 : "");
    },"3":function(container,depth0,helpers,partials,data,blockParams,depths) {
        var helper, alias1=container.escapeExpression, alias2=depth0 != null ? depth0 : {}, alias3=helpers.helperMissing, alias4="function";

        return "\n        <div class=\"page-size-group\">\n            <div>"
            + alias1(container.lambda((depths[1] != null ? depths[1].name : depths[1]), depth0))
            + ": "
            + alias1(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias3),(typeof helper === alias4 ? helper.call(alias2,{"name":"name","hash":{},"data":data}) : helper)))
            + "</div>\n            <div><small>"
            + alias1(((helper = (helper = helpers.width || (depth0 != null ? depth0.width : depth0)) != null ? helper : alias3),(typeof helper === alias4 ? helper.call(alias2,{"name":"width","hash":{},"data":data}) : helper)))
            + "x"
            + alias1(((helper = (helper = helpers.height || (depth0 != null ? depth0.height : depth0)) != null ? helper : alias3),(typeof helper === alias4 ? helper.call(alias2,{"name":"height","hash":{},"data":data}) : helper)))
            + alias1(((helper = (helper = helpers.unit || (depth0 != null ? depth0.unit : depth0)) != null ? helper : alias3),(typeof helper === alias4 ? helper.call(alias2,{"name":"unit","hash":{},"data":data}) : helper)))
            + "</small></div>\n        </div>\n        ";
    },"5":function(container,depth0,helpers,partials,data) {
        return " checked";
    },"7":function(container,depth0,helpers,partials,data) {
        return " active";
    },"9":function(container,depth0,helpers,partials,data) {
        return " disabled";
    },"11":function(container,depth0,helpers,partials,data,blockParams,depths) {
        var stack1, helper, options, buffer =
            "          ";
        stack1 = ((helper = (helper = helpers.data || (depth0 != null ? depth0.data : depth0)) != null ? helper : helpers.helperMissing),(options={"name":"data","hash":{},"fn":container.program(12, data, 0, blockParams, depths),"inverse":container.noop,"data":data}),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : {},options) : helper));
        if (!helpers.data) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "\n";
    },"12":function(container,depth0,helpers,partials,data,blockParams,depths) {
        var stack1;

        return ((stack1 = (helpers.eq || (depth0 && depth0.eq) || helpers.helperMissing).call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.id : depth0),((stack1 = (depths[2] != null ? depths[2].format : depths[2])) != null ? stack1.id : stack1),{"name":"eq","hash":{},"fn":container.noop,"inverse":container.program(13, data, 0, blockParams, depths),"data":data})) != null ? stack1 : "");
    },"13":function(container,depth0,helpers,partials,data,blockParams,depths) {
        var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

        return "<div class=\"checkbox\"><input type=\"checkbox\" id=\"resize_page_id_opt_"
            + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"id","hash":{},"data":data}) : helper)))
            + "\" value=\""
            + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"id","hash":{},"data":data}) : helper)))
            + "\"><label for=\"resize_page_id_opt_"
            + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"id","hash":{},"data":data}) : helper)))
            + "\">"
            + alias4(container.lambda((depths[1] != null ? depths[1].name : depths[1]), depth0))
            + ": "
            + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
            + "</label></div>";
    },"15":function(container,depth0,helpers,partials,data) {
        return "  disabled";
    },"17":function(container,depth0,helpers,partials,data,blockParams,depths) {
        var stack1;

        return "<option"
            + ((stack1 = (helpers.eq || (depth0 && depth0.eq) || helpers.helperMissing).call(depth0 != null ? depth0 : {},depth0,((stack1 = (depths[1] != null ? depths[1].format : depths[1])) != null ? stack1.unit : stack1),{"name":"eq","hash":{},"fn":container.program(18, data, 0, blockParams, depths),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + ">"
            + container.escapeExpression(container.lambda(depth0, depth0))
            + "</option>";
    },"18":function(container,depth0,helpers,partials,data) {
        return " selected";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data,blockParams,depths) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=container.escapeExpression, alias4=container.lambda, alias5="function", alias6=helpers.blockHelperMissing, buffer =
            "<li class=\"page-size\" data-popover=\"tooltip\" data-placement=\"top\" data-original-title=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"bottom_submenu.size.format",{"name":"t","hash":{},"data":data}))
            + "\">\n  <span>"
            + alias3(alias4(((stack1 = (depth0 != null ? depth0.format : depth0)) != null ? stack1.width : stack1), depth0))
            + "x"
            + alias3(alias4(((stack1 = (depth0 != null ? depth0.format : depth0)) != null ? stack1.height : stack1), depth0))
            + alias3(alias4(((stack1 = (depth0 != null ? depth0.format : depth0)) != null ? stack1.unit : stack1), depth0))
            + "</span>\n</li><li>\n  <a class=\"btn btn-gray resize\" style=\"padding:0 10px\" data-popover=\"tooltip\" data-placement=\"top\" data-original-title=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"bottom_submenu.size.resize_tip",{"name":"t","hash":{},"data":data}))
            + "\"><i class=\"icon-photo_size_select_large\"></i>"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"bottom_submenu.size.resize",{"name":"t","hash":{},"data":data}))
            + "</a>\n</li>\n\n<div class=\"ui-dropdown-content\">\n";
        stack1 = ((helper = (helper = helpers.groups || (depth0 != null ? depth0.groups : depth0)) != null ? helper : alias2),(options={"name":"groups","hash":{},"fn":container.program(1, data, 0, blockParams, depths),"inverse":container.noop,"data":data}),(typeof helper === alias5 ? helper.call(alias1,options) : helper));
        if (!helpers.groups) { stack1 = alias6.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += "\n  <div class=\"page-size-group\">\n    <input type=\"radio\" name=\"page-size\" class=\"format\""
            + ((stack1 = helpers["if"].call(alias1,((stack1 = (depth0 != null ? depth0.format : depth0)) != null ? stack1.id : stack1),{"name":"if","hash":{},"fn":container.program(5, data, 0, blockParams, depths),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "/>\n\n    <section class=\"format"
            + ((stack1 = helpers["if"].call(alias1,((stack1 = (depth0 != null ? depth0.format : depth0)) != null ? stack1.id : stack1),{"name":"if","hash":{},"fn":container.program(7, data, 0, blockParams, depths),"inverse":container.program(9, data, 0, blockParams, depths),"data":data})) != null ? stack1 : "")
            + "\">\n        <div class=\"header\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"bottom_submenu.size.resize_to",{"name":"t","hash":{},"data":data}))
            + "</div>\n        <div class=\"body\">\n";
        stack1 = ((helper = (helper = helpers.groups || (depth0 != null ? depth0.groups : depth0)) != null ? helper : alias2),(options={"name":"groups","hash":{},"fn":container.program(11, data, 0, blockParams, depths),"inverse":container.noop,"data":data}),(typeof helper === alias5 ? helper.call(alias1,options) : helper));
        if (!helpers.groups) { stack1 = alias6.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += "        </div>\n    </section>\n  </div>\n\n  <div class=\"page-size-group\">\n    <input type=\"radio\" name=\"page-size\" class=\"custom\""
            + ((stack1 = helpers["if"].call(alias1,((stack1 = (depth0 != null ? depth0.format : depth0)) != null ? stack1.id : stack1),{"name":"if","hash":{},"fn":container.noop,"inverse":container.program(5, data, 0, blockParams, depths),"data":data})) != null ? stack1 : "")
            + "/>\n    <label>"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"bottom_submenu.size.custom",{"name":"t","hash":{},"data":data}))
            + "</label>\n\n    <section>\n      <input type=\"text\" class=\"size page-width small"
            + ((stack1 = helpers["if"].call(alias1,((stack1 = (depth0 != null ? depth0.format : depth0)) != null ? stack1.id : stack1),{"name":"if","hash":{},"fn":container.program(15, data, 0, blockParams, depths),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "\" placeholder=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"common.width",{"name":"t","hash":{},"data":data}))
            + "\" value=\""
            + alias3(alias4(((stack1 = (depth0 != null ? depth0.format : depth0)) != null ? stack1.width : stack1), depth0))
            + "\"/>\n      <span>x</span>\n      <input type=\"text\" class=\"size page-height small"
            + ((stack1 = helpers["if"].call(alias1,((stack1 = (depth0 != null ? depth0.format : depth0)) != null ? stack1.id : stack1),{"name":"if","hash":{},"fn":container.program(15, data, 0, blockParams, depths),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "\" placeholder=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"common.height",{"name":"t","hash":{},"data":data}))
            + "\" value=\""
            + alias3(alias4(((stack1 = (depth0 != null ? depth0.format : depth0)) != null ? stack1.height : stack1), depth0))
            + "\"/>\n      <select class=\"unit"
            + ((stack1 = helpers["if"].call(alias1,((stack1 = (depth0 != null ? depth0.format : depth0)) != null ? stack1.id : stack1),{"name":"if","hash":{},"fn":container.program(15, data, 0, blockParams, depths),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "\">\n        ";
        stack1 = ((helper = (helper = helpers.units || (depth0 != null ? depth0.units : depth0)) != null ? helper : alias2),(options={"name":"units","hash":{},"fn":container.program(17, data, 0, blockParams, depths),"inverse":container.noop,"data":data}),(typeof helper === alias5 ? helper.call(alias1,options) : helper));
        if (!helpers.units) { stack1 = alias6.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "\n      </select>\n    </section>\n  </div>\n\n  <div>\n    <a class=\"btn btn-yellow do-resize\">\n      "
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"bottom_submenu.size.apply",{"name":"t","hash":{},"data":data}))
            + "\n    </a>\n  </div>\n</div>\n";
    },"useData":true,"useDepths":true});

},{"hbsfy/runtime":373}],97:[function(require,module,exports){
    var template = require('./size.hbs');
    var DesignFacade = require('../../../facade/design/design');
    var EditorFacade = require('../../../facade/editor/editor');
    var FormatFactory = require('../../../factory/formats');
    var AnalyticsDecorate = require('../../../analytics/decorate');

    module.exports = AnalyticsDecorate(require('../analytics/size'), Backbone.mixin(Backbone.View.extend({
        events: {
            'click section.format': 'showResizeMenu',
            'click a.btn.resize': 'showResizeEvent',
            'click .page-size': 'showResizeEvent',
            'ifToggled [type=radio]': 'togglePageSizeEvent',
            'change .size': 'sizeChangeEvent',
            'change select.unit': 'sizeChangeEvent',
            'click .do-resize': 'doResizeEvent'
        },

        showResizeMenu: function (event) {
            var $menu = this.$el.find('section.format');
            $menu.toggleClass('active');
        },

        showResizeEvent: function (event) {
            var $button = this.$el.find('a.btn.resize');

            this.$el.find('[type=checkbox]').iCheck('uncheck');
            var $content = this.$el.find('.ui-dropdown-content');
            var right = $(window).width() - ($button.offset().left + $button.outerWidth());

            $content.show().css('right', right);
        },

        togglePageSizeEvent: function (event) {
            var $formatButton = this.$el.find('input.format');
            var $customButton = this.$el.find('input.custom');

            var isFormat = $formatButton.is(':checked');
            this.$el.find('section.format').toggleClass('disabled', !isFormat);
            this.$el.find('section.format').toggleClass('active', isFormat);

            var isCustom = $customButton.is(':checked');
            this.$el.find('input.size').toggleClass('disabled', !isCustom);
            this.$el.find('select.unit').toggleClass('disabled', !isCustom);
        },

        sizeChangeEvent: function () {
            var limitLow = 16;
            var limitHight = 3000;
            var pixel2unit = INKIVE.Helpers.convertPixelsToUnits;
            var unit2pixel = INKIVE.Helpers.convertUnitsToPixels;
            var unit = this.$el.find('select.unit').val();
            var isAlreadyOnPixels = unit == 'px';

            this.$el.find('input.size').each(function () {
                var val = $(this).val();
                val = (isAlreadyOnPixels ? parseInt(val) : parseFloat(val)) || 0;

                var valueInPixels = unit2pixel(val, unit);

                if (valueInPixels > limitHight) val = pixel2unit(limitHight, unit);else if (valueInPixels < limitLow) val = pixel2unit(limitLow, unit);

                $(this).val(Math.round(val * 100) / 100);
            });
        },

        doResizeEvent: function () {
            var c = this.editor.canvas;
            var oldWidth = parseInt(this.editor.canvas.contentW);
            var oldHeight = parseInt(this.editor.canvas.contentH);

            var isCustomResize = this.$el.find('input.custom').is(':checked');
            var dims = [];

            if (isCustomResize) {
                var width = parseFloat(this.$el.find('input.size.page-width').val());
                var height = parseFloat(this.$el.find('input.size.page-height').val());
                var unit = this.$el.find('select.unit').val();

                dims.push({ width: width, height: height, unit: unit });
            } else {
                this.$el.find('[type=checkbox]:checked').each(function () {
                    FormatFactory.getFormat($(this).val()).then(function (format) {
                        dims.push(format);
                    });
                });
            }

            var alert;
            var originalPageNumber = parseInt(INKIVE.Tool._current_page_id);
            copyPage(0);

            function showMessage(index) {
                function show() {
                    INKIVE.Modal.toggleLock(false);
                    var message = ['<b style="font-weight: 400">', INKIVE.TranslateHelper.translate('modal.alert.resize_page', {
                        page: index + 1,
                        from: dims.length,
                        percent: parseInt(index * 100 / dims.length)
                    }), '</b>'];

                    alert = INKIVE.Modal.alertMessage(message.join(''), {
                        skip: false,
                        loader: true
                    });
                    INKIVE.Modal.toggleLock(true);
                }

                alert && alert.close(show);
                alert || show();
            }

            function copyPage(index) {
                avoidSavingLoadingImages();

                if (dims.length <= index) {
                    alert && alert.close();

                    INKIVE.Modal.toggleLock(false);
                    INKIVE.PageThumbnailFactory.remove();

                    EditorFacade.handle('cache', 'clear');

                    isCustomResize && EditorFacade.handle('page', 'save');
                    isCustomResize || EditorFacade.handle('page', 'move_to', {
                        'page_number': originalPageNumber
                    }).then(function () {
                        EditorFacade.handle('cache', 'clear');
                    });

                    return;
                }

                showMessage(index);
                INKIVE.Tool.getInstance().copyPage(originalPageNumber, copyCallback, true, true);

                function avoidSavingLoadingImages() {
                    $('#svgcontent image').each(function () {
                        var url = $(this).data('url');
                        url && this.setAttribute('xlink:href', url);
                    });
                }

                function copyCallback(newPageId) {
                    var dim = dims[index];

                    INKIVE.Tool._current_page_id = newPageId;
                    DesignFacade.once('template.update.size', resizeTemplate);
                    DesignFacade.set('template', { size: dim });

                    function resizeTemplate() {
                        INKIVE.Helpers.converterLayoutSizeChange(INKIVE.Helpers.convertUnitsToPixels(dim.width, dim.unit), INKIVE.Helpers.convertUnitsToPixels(dim.height, dim.unit), oldWidth, oldHeight);

                        copyPage(index + 1);
                    }
                }
            }
        },

        initialize: function () {
            _.bindAll(this, 'render', 'updateCurrentPageInfo');

            this.tool = INKIVE.Tool.getInstance();
            this.editor = this.tool.editor;
            DesignFacade.on('template.update.size', this.updateCurrentPageInfo);
            DesignFacade.on('template.update.designed', this.updateCurrentPageInfo);
        },

        render: function (format, groups) {
            var units = _.uniq(_.pluck(_.flatten(_.pluck(groups, 'data')), 'unit'));
            format = format || {
                    width: parseInt(this.editor.canvas.contentW),
                    height: parseInt(this.editor.canvas.contentH),
                    unit: 'px'
                };

            this.$el.html(template({
                format: format,
                groups: groups,
                units: units
            }));

            this.$el.find('[type=checkbox]').iCheck({
                checkboxClass: 'icheckbox_square-yellow'
            });

            this.initDropdown();
            INKIVE.Helpers.initTooltips(this.$el);
            this.trigger('render');
        },

        initDropdown: function () {
            this.$el.find('[type=radio]').iCheck({
                radioClass: 'iradio_square-yellow'
            });
        },

        updateCurrentPageInfo: function () {
            var currentFormatPromise = FormatFactory.getCurrentFormat();
            var groupsPromise = FormatFactory.getGroups();

            $.when(currentFormatPromise, groupsPromise).then(this.render);
        }
    }), Backbone.Events));

},{"../../../analytics/decorate":4,"../../../facade/design/design":19,"../../../facade/editor/editor":45,"../../../factory/formats":65,"../analytics/size":92,"./size.hbs":96}],98:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=container.escapeExpression;

        return "<li>\n    <a class=\"btn btn-gray out\" data-popover=\"tooltip\" data-placement=\"top\" data-original-title=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"bottom_submenu.zoom.out",{"name":"t","hash":{},"data":data}))
            + "\"><i class=\"icon-zoomout\"></i></a>\n</li><li class=\"border-left\">\n    <a class=\"btn btn-gray custom\" style=\"padding-left: 10px;width: 70px;\" data-popover=\"tooltip\" data-placement=\"top\" data-original-title=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"bottom_submenu.zoom.custom",{"name":"t","hash":{},"data":data}))
            + "\">\n        <span class=\"percent\">100</span>%<i class=\"icon-chevron-up\"></i>\n    </a>\n</li><li class=\"border-left\">\n    <a class=\"btn btn-gray in\" data-popover=\"tooltip\" data-placement=\"top\" data-original-title=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"bottom_submenu.zoom.in",{"name":"t","hash":{},"data":data}))
            + "\"><i class=\"icon-zoomin\"></i></a>\n</li>\n\n<div class=\"ui-dropdown-content custom-zoom\"><ul>\n    <li><a data-value=\"10\">10%</a></li>\n    <li><a data-value=\"25\">25%</a></li>\n    <li><a data-value=\"50\">50%</a></li>\n    <li><a data-value=\"75\">75%</a></li>\n    <li><a data-value=\"100\">100%</a></li>\n    <li><a data-value=\"125\">125%</a></li>\n    <li><a data-value=\"150\">150%</a></li>\n    <li><a data-value=\"175\">175%</a></li>\n    <li><a data-value=\"200\">200%</a></li>\n    <li><a data-value=\"500\">500%</a></li>\n    <li><a data-value=\"fit\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"bottom_submenu.zoom.fit",{"name":"t","hash":{},"data":data}))
            + "</a></li>\n    <li><a data-value=\"original\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"bottom_submenu.zoom.original",{"name":"t","hash":{},"data":data}))
            + "</a></li>\n</ul></div>";
    },"useData":true});

},{"hbsfy/runtime":373}],99:[function(require,module,exports){
    var template = require('./zoom.hbs');
    var AnalyticsDecorate = require('../../../analytics/decorate');
    var EditorFacade = require('../../../facade/editor/editor');

    module.exports = AnalyticsDecorate(require('../analytics/zoom'), Backbone.View.extend({
        events: {
            'click div.custom-zoom li a': 'customZoomEvent',
            'click a.btn.custom': 'showCustomEvent',
            'click a.btn.in': 'zoomInEvent',
            'click a.btn.out': 'zoomOutEvent'
        },

        showCustomEvent: function (event) {
            var $button = this.$el.find('a.btn.custom');
            var $content = this.$el.find('.ui-dropdown-content');
            var right = $(window).width() - ($button.offset().left + $button.outerWidth());

            $content.show().css('right', right);
        },

        customZoomEvent: function (event) {
            var $a = $(event.target);
            var $content = this.$el.find('.ui-dropdown-content');

            var zoom = $a.attr('data-value');

            if (zoom == 'fit') EditorFacade.handle('zoom', 'fit');else if (zoom == 'original') EditorFacade.handle('zoom', 'original');else EditorFacade.handle('zoom', 'set', { zoom: parseInt(zoom) / 100 });

            $content.hide();
        },

        zoomInEvent: function (event) {
            EditorFacade.handle('zoom', 'in');
        },
        zoomOutEvent: function (event) {
            EditorFacade.handle('zoom', 'out');
        },

        initialize: function () {
            this.render();
        },

        render: function () {
            this.$el.html(template());
        }

    }));

},{"../../../analytics/decorate":4,"../../../facade/editor/editor":45,"../analytics/zoom":93,"./zoom.hbs":98}],100:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        return "<div class=\"margin\"></div><!--\n--><ul class=\"tool-page\"></ul><!--\n--><ul class=\"tool-size\"></ul><!--\n--><ul class=\"tool-zoom\"></ul>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],101:[function(require,module,exports){
    var template = require('./template.hbs');
    var PageView = require('./contents/page');
    var ZoomView = require('./contents/zoom');
    var SizeView = require('./contents/size');
    var EditorFacade = require('../../facade/editor/editor');
    var DesignFacade = require('../../facade/design/design');
    var ProjectFacade = require('../../facade/project/project');

    module.exports = Backbone.View.extend({
        initialize: function () {
            _.bindAll(this, 'setMenuSize', 'updateCurrentPageInfo');

            ProjectFacade.on('design.removed', this.updateCurrentPageInfo);
            EditorFacade.on('page.move_to', this.updateCurrentPageInfo);
            DesignFacade.on('template.update.designed', this.updateCurrentPageInfo);

            this.render();
        },

        render: function () {
            this.$el.html(template());

            this.pageView = new PageView({ el: this.$el.find('.tool-page') });
            this.zoomView = new ZoomView({ el: this.$el.find('.tool-zoom') });
            this.sizeView = new SizeView({ el: this.$el.find('.tool-size') });

            this.sizeView.on('render', this.setMenuSize);
            this.setMenuSize();
        },

        setMenuSize: function () {
            var marginWidth = $('.modalHeader.pageOrderShow').outerWidth();
            var canvasWidth = $('#canvas-panel').width();
            var thisWidth = this.$el.outerWidth() - this.$el.children('.margin').width();
            var border = 2;

            this.$el.children('.margin').width(canvasWidth - marginWidth - thisWidth - border);
        },

        updateCurrentPageInfo: function () {
            this.sizeView.updateCurrentPageInfo();
            this.pageView.updateCurrentPageInfo();
        }
    });

},{"../../facade/design/design":19,"../../facade/editor/editor":45,"../../facade/project/project":56,"./contents/page":95,"./contents/size":97,"./contents/zoom":99,"./template.hbs":100}],102:[function(require,module,exports){
    var currentMode = 'default';
    var currentData = null;
    var modeManagers = {
        default: require('./editor-modes/default'),
        template: require('./editor-modes/template'),
        sticker: require('./editor-modes/sticker'),
        banner: require('./editor-modes/banner'),
        placeholder: require('./editor-modes/placeholder'),
        logo: require('./editor-modes/logo'),
        restrict: require('./editor-modes/restrict')
    };

    var availableModeManagers = {};
    _.each(modeManagers, function (ModeManager, mode) {
        availableModeManagers[mode] = new ModeManager();
    });

    module.exports = {
        setMode: function (mode, data) {
            if (availableModeManagers[mode]) {
                availableModeManagers[currentMode].disable();

                currentMode = mode;
                currentData = data;

                availableModeManagers[mode].enable(data);
            }
        },

        getMode: function () {
            return currentMode;
        },
        getData: function () {
            return currentData;
        },
        isMode: function (mode) {
            return currentMode === mode;
        }
    };

},{"./editor-modes/banner":103,"./editor-modes/default":104,"./editor-modes/logo":105,"./editor-modes/placeholder":106,"./editor-modes/restrict":107,"./editor-modes/sticker":108,"./editor-modes/template":109}],103:[function(require,module,exports){
    var StickerEditorModeManager = require('./sticker');

    function BannerEditorModeManager() {
        this.type = 'banner';
    }
    BannerEditorModeManager.prototype = new StickerEditorModeManager();
    module.exports = BannerEditorModeManager;

},{"./sticker":108}],104:[function(require,module,exports){
    function DefaultEditorModeManager() {
        this.type = 'default';

        this.hideList = [];
        this.showList = [];
        this.enableList = [];
        this.disableList = [];
    }

    DefaultEditorModeManager.prototype.initialize = function () {
        this.initialized = true;
        this.tool = INKIVE.Tool.getInstance();
        this.editor = this.tool.editor;
        this.canvas = this.editor.canvas;

        _.bindAll(this, 'enable', 'disable');
    };

    DefaultEditorModeManager.prototype.enable = function (data) {
        this.initialized || this.initialize();

        this.beforeUIEnable();
        this.enableUI();
        this.afterUIEnable(data);
    };

    DefaultEditorModeManager.prototype.disable = function () {
        this.initialized || this.initialize();

        this.disableUI();
    };

    DefaultEditorModeManager.prototype.beforeUIEnable = function () {
        clearTimeout(INKIVE.Tool._autoSaveTimeout);
        INKIVE.Tool._autoSaveTimeout = null;
    };

    DefaultEditorModeManager.prototype.afterUIEnable = function (data) {
        this.canvas.runExtensions('disableRuler', {});
        this.tool.load(INKIVE.Tool._current_page_id);
    };

    DefaultEditorModeManager.prototype.enableUI = function () {
        $(this.hideList.join(',')).hide();
        $(this.showList.join(',')).show();
        $(this.enableList.join(',')).removeClass('disabled');
        $(this.disableList.join(',')).addClass('disabled');
    };

    DefaultEditorModeManager.prototype.disableUI = function () {
        $(this.hideList.join(',')).show();
        $(this.showList.join(',')).hide();
        $(this.enableList.join(',')).addClass('disabled');
        $(this.disableList.join(',')).removeClass('disabled');
    };

    module.exports = DefaultEditorModeManager;

},{}],105:[function(require,module,exports){
    var DefaultEditorModeManager = require('./default');

    function LogoEditorModeManager() {
        this.type = 'logo';

        this.hideList = ['#pages-panel', '#tool-panel .help-menu', '.name.editor-header-title', '#bottom-submenu > .margin', '#bottom-submenu > .tool-page', '#bottom-submenu > .tool-size', '#bottom-submenu > .tool-zoom li:nth-child(2)', '#ruler-horizontal', '#ruler-vertical', '#ik-grid-snap'];
    }

    LogoEditorModeManager.prototype = new DefaultEditorModeManager();

    LogoEditorModeManager.prototype.enableUI = function () {
        DefaultEditorModeManager.prototype.enableUI.call(this);

        $('.tool-menu a[role="tab"][href="#tabAdmin"]').parent().hide();
        $('.tool-menu a[role="tab"][href="#tabLayouts"]').parent().hide();
        $('.tool-menu a[role="tab"][href="#tabSettings"]').parent().hide();
    };

    LogoEditorModeManager.prototype.disableUI = function () {
        DefaultEditorModeManager.prototype.disableUI.call(this);

        $('.tool-menu a[role="tab"][href="#tabAdmin"]').parent().show();
        $('.tool-menu a[role="tab"][href="#tabLayouts"]').parent().show();
        $('.tool-menu a[role="tab"][href="#tabSettings"]').parent().show();
    };

    LogoEditorModeManager.prototype.afterUIEnable = function (data) {
        $('.tool-menu a[role="tab"][href="#tabExtra"]').trigger('click');
        this.editor.canvas.runExtensions('enableRuler', {});
    };

    module.exports = LogoEditorModeManager;

},{"./default":104}],106:[function(require,module,exports){
    var StickerEditorModeManager = require('./sticker');

    function PlaceholderEditorModeManager() {
        this.type = 'placeholder';
    }
    PlaceholderEditorModeManager.prototype = new StickerEditorModeManager();
    module.exports = PlaceholderEditorModeManager;

},{"./sticker":108}],107:[function(require,module,exports){
    var DefaultEditorModeManager = require('./default');
    var rf = require('../../facade/restrictions/restrictions');

    function RestrictEditorModeManager() {
        this.type = 'restrict';

        this.hideList = [];
    }

    RestrictEditorModeManager.prototype = new DefaultEditorModeManager();

    RestrictEditorModeManager.prototype.enableUI = function () {
        DefaultEditorModeManager.prototype.enableUI.call(this);

        $('.tool-menu a[role="tab"][href="#tabAdmin"]').parent().hide();
        $('.tool-menu a[role="tab"][href="#tabLayouts"]').parent().hide();
        $('.tool-menu a[role="tab"][href="#tabSettings"]').parent().hide();
        rf.isFunctionalityAllowed('text_add') || $('.tool-menu a[role="tab"][href="#tabText"]').parent().hide();

        rf.isFunctionalityAllowed('function_artwork_resizing') || $('#bottom-submenu > .tool-size').hide();

        rf.isFunctionalityAllowed('function_download_file') || $('#shr-buttons > [data-id="download"]').hide();
        rf.isFunctionalityAllowed('function_print_file') || $('#shr-buttons > .print').hide();
        rf.isFunctionalityAllowed('function_share_file') || $('#shr-buttons > [data-id="share"]').hide();
        rf.isFunctionalityAllowed('function_add_page') || $('#pages-panel, #bottom-submenu > .tool-page').hide();

        !rf.isFunctionalityAllowed('text_add') && (!rf.isFunctionalityAllowed('function_use_own_images') || !rf.isFunctionalityAllowed('image_add')) && !rf.isFunctionalityAllowed('vector_add') && $('.tool-menu a[role="tab"][href="#tabImport"]').parent().hide();

        !rf.isFunctionalityAllowed('function_draw') && !rf.isFunctionalityAllowed('function_use_desygner_background') && (!rf.isFunctionalityAllowed('function_use_desygner_images') || !rf.isFunctionalityAllowed('image_add')) && (!rf.isFunctionalityAllowed('function_use_desygner_vector') || !rf.isFunctionalityAllowed('vector_add')) && $('.tool-menu a[role="tab"][href="#tabExtra"]').parent().hide();

        !rf.isFunctionalityAllowed('text_add') && !rf.isFunctionalityAllowed('function_use_own_background') && (!rf.isFunctionalityAllowed('function_use_own_images') || !rf.isFunctionalityAllowed('image_add')) && !rf.isFunctionalityAllowed('function_use_own_logo') && !rf.isFunctionalityAllowed('function_use_own_colors') && $('.tool-menu a[role="tab"][href="#tabLibrary"]').parent().hide();

        (!rf.isFunctionalityAllowed('function_use_own_images') || !rf.isFunctionalityAllowed('image_add')) && $('.tool-menu a[role="tab"][href="#tabImages"').parent().hide();

        $('#tabSearch a[data-id="layout"]').parent().addClass('hidden');

        (!rf.isFunctionalityAllowed('function_use_web_vector') || !rf.isFunctionalityAllowed('function_use_desygner_vector')) && $('#tabSearch a[data-id="sticker"]').parent().addClass('hidden');

        (!rf.isFunctionalityAllowed('function_use_web_background') || !rf.isFunctionalityAllowed('function_use_desygner_background')) && $('#tabSearch a[data-id="background"]').parent().addClass('hidden');

        rf.isFunctionalityAllowed('function_use_web_images') || $('#tabSearch a[data-id="image"]').parent().addClass('hidden').siblings('li:not(.hidden)').first().find('a').trigger('click');

        // TODO
        // (!rf.isFunctionalityAllowed('function_use_web_vector') || !rf.isFunctionalityAllowed('function_use_desygner_vector'))
        //   && (!rf.isFunctionalityAllowed('function_use_web_background') || !rf.isFunctionalityAllowed('function_use_desygner_background'))
        //   && !rf.isFunctionalityAllowed('function_use_web_images')
        //   && $('.tool-menu a[role="tab"][href="#tabSearch"]').parent().hide();
    };

    RestrictEditorModeManager.prototype.disableUI = function () {
        DefaultEditorModeManager.prototype.disableUI.call(this);

        $('.tool-menu a[role="tab"][href="#tabAdmin"]').parent().show();
        $('.tool-menu a[role="tab"][href="#tabLayouts"]').parent().show();
        $('.tool-menu a[role="tab"][href="#tabSettings"]').parent().show();
    };

    RestrictEditorModeManager.prototype.afterUIEnable = function (data) {};

    module.exports = RestrictEditorModeManager;

},{"../../facade/restrictions/restrictions":62,"./default":104}],108:[function(require,module,exports){
    var TemplateEditorModeManager = require('./template');

    function StickerEditorModeManager() {
        this.type = 'sticker';

        this.disableList = ['#header #shr-buttons', '.tool-menu a[role="tab"][href="#tabSettings"]', '.tool-menu a[role="tab"][href="#tabLayouts"]', '.tool-menu a[role="tab"][href="#tabFavourites"]', '.tool-menu a[role="tab"][href="#tabImages"]', '.tool-menu a[role="tab"][href="#tabSearch"]', '.tool-content #tabAdmin input[name="search"]', '.tool-content a[data-toggle="accordion"][href="#accordionBackgrounds"]', '.tool-content #tabAdmin a[data-toggle="accordion"][href="#accordionAdminLayouts"]', '.tool-content #tabAdmin .btn-new-item', '.tool-content #tabAdmin a[data-toggle="accordion"][href="#accordionAdminBackgrounds"]'];
    }

    StickerEditorModeManager.prototype = new TemplateEditorModeManager();

    StickerEditorModeManager.prototype.afterUIEnable = function (data) {
        this.editor.canvas.runExtensions('enableRuler', {});
        this.editor.loadSvgString(Base64.decode(INKIVE.C.BLANK_SVG), _.bind(this.onBlankSVG, this, data), 1000, 1000);
    };

    StickerEditorModeManager.prototype.onBlankSVG = function (data) {
        if (data.content) {
            var g = INKIVE.Helpers.getStickerFromString(Base64.decode(data.content));
            if (!g) return;

            var current_layer = this.canvas.getCurrentDrawing().getCurrentLayer();
            current_layer.appendChild(g);

            var offset = this.editor.getOffset();
            INKIVE.Helpers.resize(g, offset.width, offset.height, 50, 50);
        }
    };

    module.exports = StickerEditorModeManager;

},{"./template":109}],109:[function(require,module,exports){
    var DefaultEditorModeManager = require('./default');

    function TemplateEditorModeManager() {
        this.type = 'template';

        this.showList = ['#mode-panel'];

        this.hideList = ['#pages-panel', '#bottom-submenu > .margin', '#bottom-submenu > .tool-page', '#bottom-submenu > .tool-size'];

        this.disableList = ['#header #shr-buttons', '.tool-menu a[role="tab"][href="#tabSettings"]', '.tool-menu a[role="tab"][href="#tabLayouts"]', '.tool-content #tabAdmin input[name="search"]', '.tool-content #tabAdmin .btn-new-item', '.tool-content #tabAdmin a[data-toggle="accordion"][href="#accordionAdminBackgrounds"]', '.tool-content #tabAdmin a[data-toggle="accordion"][href="#accordionAdminStickers"]'];
    }

    TemplateEditorModeManager.prototype = new DefaultEditorModeManager();

    TemplateEditorModeManager.prototype.enableUI = function () {
        DefaultEditorModeManager.prototype.enableUI.call(this);

        var EditorModeManager = require('../editor-mode-manager');
        var tool = this.tool;
        var $modePanel = $('#mode-panel');

        $('#canvas-panel').addClass('mode');
        $modePanel.find('span').html('close_mode.' + this.type);
        $modePanel.find('a').on('click', function () {
            INKIVE.Modal.togglePageLoader(true);

            tool.save(null, function () {
                EditorModeManager.setMode('default');
                INKIVE.Modal.togglePageLoader(false);
            });
        });
    };

    TemplateEditorModeManager.prototype.disableUI = function () {
        DefaultEditorModeManager.prototype.disableUI.call(this);

        $('#canvas-panel').removeClass('mode');
        $('#mode-panel').find('a').off('click');
    };

    TemplateEditorModeManager.prototype.afterUIEnable = function (data) {
        this.editor.canvas.runExtensions('enableRuler', {});
        this.editor.loadSvgString(Base64.decode(INKIVE.C.BLANK_SVG), _.bind(this.onBlankSVG, this, data), data.format_width, data.format_height);
    };

    TemplateEditorModeManager.prototype.onBlankSVG = function (data) {
        if (data.content) {
            var attr = {
                background: Base64.decode(data.background),
                defs: Base64.decode(data.defs),
                content: Base64.decode(data.content)
            };

            this.editor.addElement('layout', attr);

            data.old_format_width && data.old_format_height && INKIVE.Helpers.converterLayoutSizeChange(data.format_width, data.format_height, data.old_format_width, data.old_format_height);
        }
    };

    module.exports = TemplateEditorModeManager;

},{"../editor-mode-manager":102,"./default":104}],110:[function(require,module,exports){
    var templates = {
        container: require('./templates/filterpicker/container.hbs'),
        SVGImageFiltred: require('./templates/filterpicker/svg-image-filtred.hbs')
    };

    (function ($) {
        $.fn.extend({
            filterpicker: function (options) {
                var modal, $container;
                var NS = 'http://www.w3.org/2000/svg';

                options = $.extend({
                    defaultFilter: null,
                    $svgImageElement: null
                }, options);

                var presets = [{ name: 'Normal', className: 'thumb-normal', template: _.template('<feColorMatrix type="saturate" values="1"></feColorMatrix>') }, { name: 'Cali', className: 'thumb-cali', template: require('./templates/filterpicker/filter-cali.hbs') }, { name: 'Drama', className: 'thumb-drama', template: require('./templates/filterpicker/filter-drama.hbs') }, { name: 'Edge', className: 'thumb-edge', template: require('./templates/filterpicker/filter-edge.hbs') }, { name: 'Epic', className: 'thumb-epic', template: require('./templates/filterpicker/filter-epic.hbs') }, { name: 'Festive', className: 'thumb-festive', template: require('./templates/filterpicker/filter-festive.hbs') }, { name: 'Grayscale', className: 'thumb-grayscale', template: require('./templates/filterpicker/filter-grayscale.hbs') }, { name: 'Nordic', className: 'thumb-nordic', template: require('./templates/filterpicker/filter-nordic.hbs') }, { name: 'Street', className: 'thumb-street', template: require('./templates/filterpicker/filter-street.hbs') }, { name: 'The blues', className: 'thumb-the-blues', template: require('./templates/filterpicker/filter-the-blues.hbs') }];

                var input = {
                    to: {
                        hue: function (value) {
                            return normalize(value, -180, 180);
                        },
                        blur: function (value) {
                            return normalize(value, -10, 10);
                        },
                        sharpen: function (value) {
                            return normalize(value, -1, 1) * -1;
                        },
                        contrast: function (value) {
                            return normalize(value, 0, 2);
                        },
                        brightness: function (value) {
                            return normalize(value, 0, 2);
                        },
                        saturation: function (value) {
                            return normalize(value, 0, 2);
                        },
                        matrixSaturation: function (value) {
                            return normalize(value, -1, 1);
                        },
                        vignetteOpacity: function (value) {
                            return .7 + normalize(value, 0, .3, 0, 100);
                        },
                        vignetteSpecular: function (value) {
                            return normalize(value, 0, 30, 0, 100);
                        }
                    },

                    from: {
                        hue: function (value) {
                            return inverseNormalize(value, -180, 180);
                        },
                        blur: function (value) {
                            return inverseNormalize(value, -10, 10);
                        },
                        sharpen: function (value) {
                            return inverseNormalize(value, -1, 1) * -1;
                        },
                        contrast: function (value) {
                            return inverseNormalize(value, 0, 2);
                        },
                        brightness: function (value) {
                            return inverseNormalize(value, 0, 2);
                        },
                        saturation: function (value) {
                            return inverseNormalize(value, 0, 2);
                        },
                        matrixSaturation: function (value) {
                            return inverseNormalize(value, -1, 1);
                        },
                        vignetteSpecular: function (value) {
                            return normalize(value, 0, 100, 0, 30);
                        }
                    }
                };

                function inverseNormalize(value, outMin, outMax) {
                    return normalize(value, -100, 100, outMin, outMax);
                }

                function normalize(value, outMin, outMax, inMin, inMax) {
                    value = parseFloat(value);
                    inMin = typeof inMin === 'undefined' ? -100 : inMin;
                    inMax = typeof inMax === 'undefined' ? 100 : inMax;

                    var inRange = inMax - inMin;
                    var percent = (value - inMin) / inRange;
                    var outRange = outMax - outMin;

                    return outMin + outRange * percent;
                }

                function getSaturation() {
                    var value = $container.find('.slider-wrapper.saturation-slider-wrapper input').val();
                    if (value == 0) return;

                    var colorMatrix = document.createElementNS(NS, 'feColorMatrix');

                    if (value < 0) {
                        colorMatrix.setAttribute('type', 'saturate');
                        colorMatrix.setAttribute('values', input.to.saturation(value));
                    } else {
                        var normalizedValue = input.to.matrixSaturation(value);
                        var lowExtremes = -.3 * normalizedValue;
                        var highExtrem = 1 + .7 * normalizedValue;

                        colorMatrix.setAttribute('type', 'matrix');
                        colorMatrix.setAttribute('values', highExtrem + ' ' + lowExtremes + ' ' + lowExtremes + ' 0 0 ' + lowExtremes + ' ' + highExtrem + ' ' + lowExtremes + ' 0 0 ' + lowExtremes + ' ' + lowExtremes + ' ' + highExtrem + ' 0 0 ' + '0 0 0 1 0');
                    }

                    return colorMatrix;
                }

                function getBlur() {
                    var value = $container.find('.slider-wrapper.blur-slider-wrapper input').val();
                    if (value == 0) return;

                    if (value > 0) {
                        var gaussianBlur = document.createElementNS(NS, 'feGaussianBlur');
                        gaussianBlur.setAttribute('stdDeviation', input.to.blur(value));
                        /*
                         var feComponentTransfer = document.createElementNS(NS, 'feComponentTransfer');
                         var feFuncA = document.createElementNS(NS, 'feFuncA');
                         feFuncA.setAttribute('type', 'discrete');
                         feFuncA.setAttribute('tableValues', '1 1');
                         feComponentTransfer.appendChild(feFuncA);
                         gaussianBlur.appendChild(feComponentTransfer);
                         */

                        return gaussianBlur;
                    } else {
                        var normalizedValue = input.to.sharpen(value);
                        var lowExtremes = -1 * normalizedValue;
                        var highExtrem = 1 + 4 * normalizedValue;
                        var convolveMatrix = document.createElementNS(NS, 'feConvolveMatrix');
                        convolveMatrix.setAttribute('order', '3 3');
                        convolveMatrix.setAttribute('preserveAlpha', 'true');
                        convolveMatrix.setAttribute('kernelMatrix', '0 ' + lowExtremes + ' 0 ' + lowExtremes + ' ' + highExtrem + ' ' + lowExtremes + ' 0 ' + lowExtremes + ' 0');
                        return convolveMatrix;
                    }
                }

                function getBrightness() {
                    var value = $container.find('.slider-wrapper.brightness-slider-wrapper input').val();
                    if (value == 0) return;

                    var normalizedValue = input.to.brightness(value);
                    var componentTransfer = document.createElementNS(NS, 'feComponentTransfer');

                    _.each(['R', 'G', 'B'], function (colorComponent) {
                        var colorFunction = document.createElementNS(NS, 'feFunc' + colorComponent);
                        colorFunction.setAttribute('type', 'linear');
                        colorFunction.setAttribute('slope', normalizedValue);
                        componentTransfer.appendChild(colorFunction);
                    });

                    return componentTransfer;
                }

                function getContrast() {
                    var value = $container.find('.slider-wrapper.contrast-slider-wrapper input').val();
                    if (value == 0) return;

                    var normalizedValue = input.to.contrast(value);
                    var intercept = .5 - .5 * normalizedValue;
                    var componentTransfer = document.createElementNS(NS, 'feComponentTransfer');

                    _.each(['R', 'G', 'B'], function (colorComponent) {
                        var colorFunction = document.createElementNS(NS, 'feFunc' + colorComponent);
                        colorFunction.setAttribute('type', 'linear');
                        colorFunction.setAttribute('slope', normalizedValue);
                        colorFunction.setAttribute('intercept', intercept);
                        componentTransfer.appendChild(colorFunction);
                    });

                    return componentTransfer;
                }

                function getHue() {
                    var value = $container.find('.slider-wrapper.x-process-slider-wrapper input').val();
                    if (value == 0) return;

                    var colorMatrix = document.createElementNS(NS, 'feColorMatrix');

                    colorMatrix.setAttribute('type', 'hueRotate');
                    colorMatrix.setAttribute('values', input.to.hue(value));

                    return colorMatrix;
                }

                function getVignette(filterId, $image) {
                    var value = $container.find('.slider-wrapper.vignette-slider-wrapper input').val();
                    if (value == 0) return;

                    var opacityValue = input.to.vignetteOpacity(value);
                    var specularValue = input.to.vignetteSpecular(value);
                    var coord = getImagePosition();

                    var flood = document.createElementNS(NS, 'feFlood');
                    var pointLight = document.createElementNS(NS, 'fePointLight');
                    var specularLighting = document.createElementNS(NS, 'feSpecularLighting');
                    var blend1 = document.createElementNS(NS, 'feBlend');
                    var blend2 = document.createElementNS(NS, 'feBlend');

                    flood.setAttribute('result', 'blackfield-' + filterId);
                    flood.setAttribute('x', coord.leftOffset + 'px');
                    flood.setAttribute('y', coord.topOffset + 'px');
                    flood.setAttribute('width', coord.width + 'px');
                    flood.setAttribute('height', coord.height + 'px');

                    pointLight.setAttribute('x', coord.leftOffset + coord.width / 2);
                    pointLight.setAttribute('y', coord.topOffset + coord.height / 2);
                    pointLight.setAttribute('z', _.min([coord.width, coord.height]));

                    specularLighting.setAttribute('result', 'spotlight-' + filterId);
                    specularLighting.setAttribute('lighting-color', '#FFFFFF');
                    specularLighting.setAttribute('surfaceScale', '1');
                    specularLighting.setAttribute('specularConstant', '1');
                    specularLighting.setAttribute('specularExponent', specularValue);
                    specularLighting.setAttribute('x', coord.leftOffset + 'px');
                    specularLighting.setAttribute('y', coord.topOffset + 'px');
                    specularLighting.setAttribute('width', coord.width + 'px');
                    specularLighting.setAttribute('height', coord.height + 'px');
                    specularLighting.appendChild(pointLight);

                    blend1.setAttribute('result', 'A-' + filterId);
                    blend1.setAttribute('in', 'blackfield-' + filterId);
                    blend1.setAttribute('in2', 'spotlight-' + filterId);
                    blend1.setAttribute('mode', 'lighten');

                    blend2.setAttribute('result', 'B-' + filterId);
                    blend2.setAttribute('in', 'A-' + filterId);
                    blend2.setAttribute('in2', 'SourceGraphic');
                    blend2.setAttribute('mode', 'multiply');

                    return [flood, specularLighting, blend1, blend2];

                    function getImagePosition() {
                        $image = $image || options.$svgImageElement;
                        if ($image.hasClass('layoutBox')) {
                            var imageCoordinades = $image.get(0).textContent.replace(/[^\d.-\s]/g, '').split(' ');

                            return {
                                leftOffset: parseFloat(imageCoordinades[0]),
                                topOffset: parseFloat(imageCoordinades[1]),
                                width: parseFloat(imageCoordinades[2]),
                                height: parseFloat(imageCoordinades[3])
                            };
                        }

                        return {
                            leftOffset: parseFloat($image.attr('x')),
                            topOffset: parseFloat($image.attr('y')),
                            width: parseFloat($image.attr('width')),
                            height: parseFloat($image.attr('height'))
                        };
                    }
                }

                function getSVGDefs() {
                    var defs = document.createElementNS(NS, 'defs');
                    var $svgContainer = options.$svgImageElement.closest('svg');
                    $svgContainer.children('defs').length || $svgContainer.prepend(defs);

                    return $svgContainer.children('defs').get(0);
                }

                function createNewFilterPickerContainer() {
                    $container = $(templates.container());
                    $container.on('change', onContainerChange);
                    $container.tabs();

                    initPresets();
                    initImage();

                    function initPresets() {
                        var $presetsContainer = $container.find('.presets-container');

                        _.each(presets, function (preset) {
                            var filterId = 'filter-thumb-' + preset.className;
                            var filter = preset.template({ filter_id: filterId });
                            var $filtredThumb = $('<li>', {
                                class: 'thumb ' + preset.className,
                                html: templates.SVGImageFiltred({
                                    width: 110,
                                    height: 110,
                                    image: options.$svgImageElement.attr('xlink:href'),
                                    filter_id: filterId,
                                    filter: filter
                                })
                            });

                            $filtredThumb.append('<span class="filter-name">' + preset.name + '</span>');
                            $presetsContainer.append($filtredThumb);
                        });
                    }

                    function initImage() {
                        var $svgContainer = $container.find('.svg-container');

                        $(templates.SVGImageFiltred({
                            width: 400,
                            height: 400,
                            image: options.$svgImageElement.attr('xlink:href'),
                            filter_id: 'filtered-image-preview',
                            filter: _.findWhere(presets, { name: 'Normal' }).template()
                        })).appendTo($svgContainer);
                    }
                }

                function getOptimusSizeInfo($svgContainer, securityMargin) {
                    securityMargin = securityMargin || 0;
                    var svgContainerWidth = ($svgContainer.width() || 400) + securityMargin;
                    var svgContainerHeight = ($svgContainer.height() || 400) + securityMargin;
                    var containerRatio = svgContainerWidth / svgContainerHeight;

                    var originalWidth = parseInt(options.$svgImageElement.attr('width'));
                    var originalHeight = parseInt(options.$svgImageElement.attr('height'));
                    var ratio = originalWidth / originalHeight;

                    return {
                        width: ratio > containerRatio ? svgContainerHeight * ratio : svgContainerWidth,
                        height: ratio > containerRatio ? svgContainerHeight : svgContainerWidth / ratio
                    };
                }

                function updatePreview() {
                    var $svgContainer = $container.find('.svg-container');
                    var $previewImage = $svgContainer.find('image');
                    var size = getOptimusSizeInfo($svgContainer, 4);
                    var url = options.$svgImageElement.attr('xlink:href');

                    $previewImage.attr('xlink:href', url);
                    $previewImage.attr('width', size.width);
                    $previewImage.attr('height', size.height);
                    $svgContainer.find('svg').attr('width', size.width);
                    $svgContainer.find('svg').attr('height', size.height);

                    INKIVE.ImagesFactory.smartLoad(url, size, function (status, image) {
                        if (status === INKIVE.C.Status.success) $previewImage.attr('xlink:href', image.src);
                    });
                }

                function updateCarousel() {
                    var $presetsContainer = $container.find('.presets-container');

                    $presetsContainer.hasClass('slick-slider') && $presetsContainer.slick('unslick');
                    $presetsContainer.slick({
                        prevArrow: '<span class="prev btn btn-green"><i class="icon-chevron-left"></i></span>',
                        nextArrow: '<span class="next btn btn-green"><i class="icon-chevron-right"></i></span>',
                        infinite: true,
                        slidesToShow: 4,
                        slidesToScroll: 2
                    });
                }

                function updatePresets() {
                    var $presetsContainer = $container.find('.presets-container');
                    var $svgContainer = $presetsContainer.find('li');
                    var $previewImage = $svgContainer.find('image');

                    $previewImage.attr('xlink:href', options.$svgImageElement.attr('xlink:href'));

                    $presetsContainer.hide();
                    INKIVE.Modal.loader($presetsContainer.parent());

                    $presetsContainer.hasClass('slick-slider') && $presetsContainer.slick('slickGoTo', 0);

                    _.delay(function () {
                        INKIVE.Modal.loaderClose($presetsContainer.parent());
                        $presetsContainer.show();
                        updateCarousel();

                        var size = getOptimusSizeInfo($svgContainer, 2);
                        $previewImage.attr('width', size.width);
                        $previewImage.attr('height', size.height);
                        $svgContainer.find('svg').attr('width', size.width);
                        $svgContainer.find('svg').attr('height', size.height);

                        modal && modal.refresh();
                    }, 2000);
                }

                function updateSliders($filter) {
                    var fr = input.from;
                    var $slidersContainer = $container.find('.sliders-container');

                    initSliders();

                    $slidersContainer.find('.blur-slider-wrapper input').val(getBlurFromFilter());
                    $slidersContainer.find('.x-process-slider-wrapper input').val(getHueFromFilter());
                    $slidersContainer.find('.vignette-slider-wrapper input').val(getVignetteFromFilter());
                    $slidersContainer.find('.contrast-slider-wrapper input').val(getContrastFromFilter());
                    $slidersContainer.find('.brightness-slider-wrapper input').val(getBrightnessFromFilter());
                    $slidersContainer.find('.saturation-slider-wrapper input').val(getSaturationFromFilter());
                    $slidersContainer.find('input').trigger('keyup');

                    function initSliders() {
                        var translate = INKIVE.TranslateHelper.translate;
                        $slidersContainer.empty();

                        //addNewSlider('intensity', -100, 100, 0);
                        addNewSlider('brightness', -100, 100);
                        addNewSlider('contrast', -100, 100);
                        addNewSlider('saturation', -100, 100);
                        // addNewSlider('tint', -100, 100, 0);
                        addNewSlider('blur', -100, 100);
                        addNewSlider('x-process', -100, 100);
                        addNewSlider('vignette', 0, 100);

                        function addNewSlider(label, min, max, currentValue) {
                            currentValue = isNaN(currentValue) ? 0 : Math.round(currentValue);

                            var $sliderWrapper = $('<div class="slider-wrapper"><div class="slider"></div></div>');
                            var $sliderInput = $('<input type="text" />').val(currentValue);

                            $sliderWrapper.append($sliderInput);
                            $sliderWrapper.addClass(label + '-slider-wrapper');
                            $slidersContainer.append($sliderWrapper);

                            $sliderInput.on('click', function (event) {
                                event.stopPropagation();
                            });

                            $sliderInput.keyup(function (event) {
                                var val = parseInt($(this).val()) || 0;

                                if (val > max) val = max;else if (val < min) val = min;

                                $(this).val(val);

                                slider.slider('option', 'value', val);
                                $container.trigger('change');
                            });

                            var slider = $sliderWrapper.children('.slider').slider({
                                max: max, min: min, value: currentValue,
                                slide: function (event, ui) {
                                    $sliderInput.val(ui.value);
                                    $container.trigger('change');
                                }
                            });

                            slider.slider('float');
                            $sliderWrapper.prepend($('<label>', {
                                text: translate('filterpicker.sliders.' + label)
                            }));
                        }
                    }

                    function getBrightnessFromFilter() {
                        var $brightness = $filter.find('feComponentTransfer feFuncR:not([intercept])');
                        return $brightness.length ? fr.brightness($brightness.attr('slope')) : 0;
                    }

                    function getContrastFromFilter() {
                        var $contrast = $filter.find('feComponentTransfer feFuncR[intercept]');
                        return $contrast.length ? fr.contrast($contrast.attr('slope')) : 0;
                    }

                    function getSaturationFromFilter() {
                        var $negativeSaturation = $filter.find('feColorMatrix[type="saturate"]');
                        var $matrixSaturation = $filter.find('feColorMatrix[type="matrix"]');

                        if ($negativeSaturation.length) return fr.saturation($negativeSaturation.attr('values'));

                        if ($matrixSaturation.length) {
                            var saturation = $matrixSaturation.attr('values');
                            return fr.matrixSaturation((saturation.split(' ')[0] - 1) / .7);
                        }

                        return 0;
                    }

                    function getHueFromFilter() {
                        var $hue = $filter.find('feColorMatrix[type="hueRotate"]');
                        return $hue.length ? fr.hue($hue.attr('values')) : 0;
                    }

                    function getVignetteFromFilter() {
                        var $vignetteSpecular = $filter.find('feSpecularLighting');
                        return $vignetteSpecular.length ? fr.vignetteSpecular($vignetteSpecular.attr('specularExponent')) : 0;
                    }

                    function getBlurFromFilter() {
                        var $blur = $filter.find('feGaussianBlur');
                        var $sharpen = $filter.find('feConvolveMatrix');

                        if ($blur.length) return fr.blur($blur.attr('stdDeviation'));

                        if ($sharpen.length) {
                            var sharpen = $sharpen.attr('kernelMatrix');
                            return fr.sharpen(parseFloat(sharpen.split(' ')[1]) * -1);
                        }

                        return 0;
                    }
                }

                function onContainerChange() {
                    var $previewFilter = $container.find('#filtered-image-preview');
                    var previewFilter = $previewFilter.get(0);
                    var $previewImage = $previewFilter.closest('svg').find('image');

                    var isFilterUpdated = updateFilter();
                    isFilterUpdated && $previewImage.attr('filter', 'url(#filtered-image-preview)');
                    isFilterUpdated || $previewImage.removeAttr('filter');

                    function updateFilter() {
                        previewFilter.innerHTML = '';

                        var filterNodes = _.compact(_.flatten(_.map([getVignette, getSaturation, getBrightness, getContrast, getBlur, getHue], function (getFilterFunction) {
                            return getFilterFunction('filtered-image-preview', $previewImage);
                        })));

                        _.each(filterNodes, function (node) {
                            previewFilter.appendChild(node);
                        });

                        return filterNodes.length > 0;
                    }
                }

                return this.each(function (e) {
                    var $button = $(this);
                    var filterId = 'filter_' + options.$svgImageElement.attr('id');

                    refreshDOM();
                    $button.off('click').on('click', function () {
                        modal && modal.close();
                        refreshDOM();

                        var width = $(window).width() * .8;
                        if (width > 800) width = 800;

                        var translate = INKIVE.TranslateHelper.translate;
                        modal = INKIVE.Modal.modalWindow($container, {
                            width: width,
                            headerIcon: 'icon-filters',
                            headerTitle: 'Filters',
                            buttons: [{
                                title: translate('common.apply'),
                                onClick: applyChanges
                            }]
                        });
                    });

                    function refreshDOM() {
                        $('#filter-picker').remove();
                        createNewFilterPickerContainer();
                        setSvgImageChangeEvent();
                        updateEvents();
                        _.defer(setSpecsBasedOnSelectedImage);
                    }

                    function updateEvents() {
                        $container.find('.presets-container li').off('click').on('click', function (event) {
                            event.stopPropagation();

                            var $previewFilter = $('#filtered-image-preview');
                            var $previewImage = $previewFilter.closest('svg').find('image');

                            var classes = $(this).attr('class').split(/\s+/);
                            var preset = _.find(presets, function (preset) {
                                return _.contains(classes, preset.className);
                            });

                            if (!preset) return;

                            $previewFilter.html(preset.template({
                                filter_id: 'filtered-image-preview'
                            }));

                            $previewImage.attr('filter', 'url(#filtered-image-preview)');
                            updateSliders($previewFilter);
                            $container.trigger('change');
                        });

                        $container.off('change').on('change', onContainerChange);
                    }

                    function setSvgImageChangeEvent() {
                        var debouncedOnChange = _.debounce(function () {
                            $container.trigger('change');
                            applyChanges();
                        }, 400);

                        options.$svgImageElement.on('change', function () {
                            if ($('#' + filterId).length) {
                                setSpecsBasedOnSelectedImage();
                                debouncedOnChange();
                            }
                        });
                    }

                    function setSpecsBasedOnSelectedImage() {
                        updatePreview();
                        updatePresets();
                        updateSliders($('#' + filterId));
                    }

                    function applyChanges() {
                        var filterId = 'filter_' + options.$svgImageElement.attr('id');
                        var defs = getSVGDefs();
                        var editor = INKIVE.Tool.getInstance().editor;
                        var canvas = editor.canvas;

                        while ($('#' + filterId).length) $('#' + filterId).remove();

                        var isFilterCreated = createNewFilter();

                        canvas.undoMgr.beginUndoableChange('filter', [options.$svgImageElement.get(0)]);

                        isFilterCreated && options.$svgImageElement.attr('filter', 'url(#' + filterId + ')');
                        isFilterCreated || options.$svgImageElement.removeAttr('filter');

                        var batchCmd = canvas.undoMgr.finishUndoableChange();
                        batchCmd.isEmpty() || canvas.undoMgr.addCommandToHistory(batchCmd);

                        modal && modal.close();

                        function createNewFilter() {
                            var filter = document.createElementNS(NS, 'filter');
                            filter.setAttribute('id', filterId);

                            var filterNodes = _.compact(_.flatten(_.map([getVignette, getSaturation, getBrightness, getContrast, getBlur, getHue], function (getFilterFunction) {
                                return getFilterFunction(filterId);
                            })));

                            _.each(filterNodes, function (node) {
                                filter.appendChild(node);
                            });

                            defs && filterNodes.length && defs.appendChild(filter);
                            return filterNodes.length > 0;
                        }
                    }
                });
            }
        });
    })(jQuery);

},{"./templates/filterpicker/container.hbs":113,"./templates/filterpicker/filter-cali.hbs":114,"./templates/filterpicker/filter-drama.hbs":115,"./templates/filterpicker/filter-edge.hbs":116,"./templates/filterpicker/filter-epic.hbs":117,"./templates/filterpicker/filter-festive.hbs":118,"./templates/filterpicker/filter-grayscale.hbs":119,"./templates/filterpicker/filter-nordic.hbs":120,"./templates/filterpicker/filter-street.hbs":121,"./templates/filterpicker/filter-the-blues.hbs":122,"./templates/filterpicker/svg-image-filtred.hbs":123}],111:[function(require,module,exports){
    var EditorFacade = require('../../facade/editor/editor');

    module.exports = Backbone.View.extend({
        events: {
            'click a[data-action="on_undo"]': 'undoEvent',
            'click a[data-action="on_redo"]': 'redoEvent',
            'click a.btn.zoom-in': 'zoomInEvent',
            'click a.btn.zoom-out': 'zoomOutEvent',
            'click #ik-save': 'saveEvent',
            'click #ik-close': 'closeEvent'
        },

        undoEvent: function (event) {
            EditorFacade.handle('history', 'undo');
        },
        redoEvent: function (event) {
            EditorFacade.handle('history', 'redo');
        },
        zoomInEvent: function (event) {
            EditorFacade.handle('zoom', 'in');
        },
        zoomOutEvent: function (event) {
            EditorFacade.handle('zoom', 'out');
        },
        saveEvent: function (event) {
            EditorFacade.handle('page', 'save');
        },
        closeEvent: function (event) {
            EditorFacade.handle('close');
        },

        initialize: function () {
            this.tool = INKIVE.Tool.getInstance();
            this.editor = this.tool.editor;
        }
    });

},{"../../facade/editor/editor":45}],112:[function(require,module,exports){
    var EditorFacade = require('../facade/editor/editor');

    module.exports = { init: init };

    var Tool,
        position,
        numberOfImages,
        loadedImages = {},
        currentImageIndex,
        uploadEventInitialized;

    function init() {
        Tool = INKIVE.Tool.getInstance();
        initDragAndDropEvents();
    }

    function initDragAndDropEvents() {
        var $container = $('#svgcanvas');

        $container.on('dragover', function (event) {
            event.stopPropagation();
            event.preventDefault();

            event = event.originalEvent;
            event.dataTransfer.dropEffect = 'copy';

            setPosition();
            // TODO: drop image indication!

            function setPosition() {
                var parentOffset = $('#svgcontent').offset();

                position = {
                    x: event.clientX - parentOffset.left,
                    y: event.clientY - parentOffset.top
                };
            }
        });

        $container.on('drop', function (event) {
            event.stopPropagation();
            event.preventDefault();

            var files = event.originalEvent.dataTransfer.files;
            var images = _.filter(files, imageTypeFilter);

            numberOfImages = images.length;
            currentImageIndex = 0;
            _.each(images, imageDropped);
        });

        function imageTypeFilter(file) {
            return file.type.match(/image.*/);
        }
    }

    function initUploadEvents() {
        var $uploader = INKIVE.Tabs.images.$el.find('.uploader.progress-button');

        $uploader.on('error', function (event, id, name, response) {
            if (loadedImages[id]) {
                removeImage(id);
                Tool.editor.canvas.call('advice.show', 'upload-error');
            }
        });

        $uploader.on('cancel', function (event, id, name, response) {
            loadedImages[id] && removeImage(id);
        });

        $uploader.on('complete', function (event, id, name, response) {
            loadedImages[id] && imageLoaded(loadedImages[id], response);
        });

        uploadEventInitialized = true;

        function removeImage(id) {
            var image = loadedImages[id];
            image.parentNode.removeChild(image);
            loadedImages = _.omit(loadedImages, id);
            Tool.editor.canvas.call('loading.hide', image);
        }
    }

    function imageLoaded(image, response) {
        var src = response.tempLink;
        var thumbSrc = src.replace('/original/', '/thumb/');
        var size = {
            width: image.getAttribute('width'),
            height: image.getAttribute('height')
        };

        Tool.imagesFactory.smartLoad(src, size, function (status, optimusImage) {
            var src = status === INKIVE.C.Status.success ? optimusImage.src : thumbSrc;

            Tool.editor.canvas.call('loading.hide', image);
            svgedit.utilities.assignAttributes(image, {
                'xlink:href': src
            });

            $(image).removeClass('darg-and-drop-upload');
        });
    }

    function imageDropped(file) {
        uploadImage(file);return;

        $.when(uploadImage(file), insertImageOnSVG(file)).done(function (id, image) {
            loadedImages[id] = image;
            uploadEventInitialized || initUploadEvents();
        });
    }

    function uploadImage(file) {
        var deferred = $.Deferred();
        $('.btn-tag[href="#tabImages"]').trigger('click');

        _.defer(function () {
            var $uploader = INKIVE.Tabs.images.$el.find('.uploader.progress-button');
            var $button = INKIVE.Tabs.images.$el.find('.btn-accordion[data-key="project"]');

            $button.trigger('click');
            $uploader.fineUploaderS3('addFiles', file);
            deferred.resolve(_.last($uploader.fineUploaderS3('getUploads')).id);
        });

        return deferred.promise();
    }

    function insertImageOnSVG(file) {
        var deferred = $.Deferred();
        var reader = new FileReader();

        reader.onload = onReaderData;
        reader.readAsDataURL(file);

        return deferred.promise();

        function onReaderData(event) {
            var image = new Image();
            image.src = event.target.result;
            image.onload = onImageLoad;
            image.onerror = deferred.reject;
        }

        function onImageLoad(event) {
            var zoom = 1 / EditorFacade.handle('zoom', 'get');
            var size = Tool.getImageSizeBasedOnSVGSize(this);

            var sizeZoom = numberOfImages > 1 ? Math.log(numberOfImages) : 1;
            var width = size.width / sizeZoom;
            var height = size.height / sizeZoom;

            var position = getNextPosition();

            var image = Tool.editor.addElement('image', {
                url: this.src,
                x: position.x * zoom - width / 2,
                y: position.y * zoom - height / 2,
                width: width,
                height: height
            });

            $(image).addClass('darg-and-drop-upload');

            Tool.editor.canvas.call('loading.show', image);
            releaseSelector();
            deferred.resolve(image);
        }

        function releaseSelector() {
            var selectorManager = svgedit.select.getSelectorManager();
            selectorManager.releaseAllSelectors();
        }
    }

    function getNextPosition() {
        if (numberOfImages === 1) return position;

        var fullCircle = 2 * Math.PI;
        var radio = numberOfImages * 20;
        var radians = currentImageIndex * fullCircle / numberOfImages;
        currentImageIndex++;

        return {
            x: position.x + radio * Math.cos(radians),
            y: position.y + radio * Math.sin(radians)
        };
    }

},{"../facade/editor/editor":45}],113:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=container.escapeExpression;

        return "<div id=\"filter-picker\">\n    <ul style=\"justify-content: flex-start;\">\n        <li><a href=\"#filter-tab-1\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"filterpicker.container.presets_label",{"name":"t","hash":{},"data":data}))
            + "</a></li>\n        <li><a href=\"#filter-tab-2\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"filterpicker.container.advanced_label",{"name":"t","hash":{},"data":data}))
            + "</a></li>\n    </ul>\n\n    <div id=\"filter-tab-1\"><ul class=\"presets-container\"></ul></div>\n    <div id=\"filter-tab-2\" class=\"sliders-container\"></div>\n\n    <div class=\"svg-container\"></div>\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],114:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        return "<feColorMatrix type=\"matrix\" values=\"1.238 -0.1 -0.1 0 0 -0.1 1.238 -0.1 0 0 -0.1 -0.1 1.238 0 0 0 0 0 1 0\"></feColorMatrix>\n\n<feComponentTransfer>\n    <feFuncR type=\"linear\" slope=\"1.22\"></feFuncR>\n    <feFuncG type=\"linear\" slope=\"1.22\"></feFuncG>\n    <feFuncB type=\"linear\" slope=\"1.22\"></feFuncB>\n</feComponentTransfer>\n\n<feComponentTransfer>\n    <feFuncR type=\"linear\" slope=\"0.95\" intercept=\"0.025000000000000022\"></feFuncR>\n    <feFuncG type=\"linear\" slope=\"0.95\" intercept=\"0.025000000000000022\"></feFuncG>\n    <feFuncB type=\"linear\" slope=\"0.95\" intercept=\"0.025000000000000022\"></feFuncB>\n</feComponentTransfer>\n\n<feColorMatrix type=\"hueRotate\" values=\"7.200000000000017\"></feColorMatrix>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],115:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        return "<feColorMatrix type=\"saturate\" values=\"0.93\"></feColorMatrix>\n\n<feComponentTransfer>\n    <feFuncR type=\"linear\" slope=\"0.91\"></feFuncR>\n    <feFuncG type=\"linear\" slope=\"0.91\"></feFuncG>\n    <feFuncB type=\"linear\" slope=\"0.91\"></feFuncB>\n</feComponentTransfer>\n\n<feComponentTransfer>\n    <feFuncR type=\"linear\" slope=\"1.2\" intercept=\"-0.09999999999999998\"></feFuncR>\n    <feFuncG type=\"linear\" slope=\"1.2\" intercept=\"-0.09999999999999998\"></feFuncG>\n    <feFuncB type=\"linear\" slope=\"1.2\" intercept=\"-0.09999999999999998\"></feFuncB>\n</feComponentTransfer>\n\n<feConvolveMatrix order=\"3 3\" preserveAlpha=\"true\" kernelMatrix=\"0 -0.12 0 -0.12 1.48 -0.12 0 -0.12 0\"></feConvolveMatrix>\n<feColorMatrix type=\"hueRotate\" values=\"23.399999999999977\"></feColorMatrix>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],116:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        return "<feColorMatrix type=\"matrix\" values=\"1.119 -0.05 -0.05 0 0 -0.05 1.119 -0.05 0 0 -0.05 -0.05 1.119 0 0 0 0 0 1 0\"></feColorMatrix>\n\n<feComponentTransfer>\n    <feFuncR type=\"linear\" slope=\"1.09\"></feFuncR>\n    <feFuncG type=\"linear\" slope=\"1.09\"></feFuncG>\n    <feFuncB type=\"linear\" slope=\"1.09\"></feFuncB>\n</feComponentTransfer>\n\n<feComponentTransfer>\n    <feFuncR type=\"linear\" slope=\"0.91\" intercept=\"0.044999999999999984\"></feFuncR>\n    <feFuncG type=\"linear\" slope=\"0.91\" intercept=\"0.044999999999999984\"></feFuncG>\n    <feFuncB type=\"linear\" slope=\"0.91\" intercept=\"0.044999999999999984\"></feFuncB>\n</feComponentTransfer>\n\n<feConvolveMatrix order=\"3 3\" preserveAlpha=\"true\" kernelMatrix=\"0 -0.44999999999999996 0 -0.44999999999999996 2.8 -0.44999999999999996 0 -0.44999999999999996 0\"></feConvolveMatrix>\n\n<feColorMatrix type=\"hueRotate\" values=\"36\"></feColorMatrix>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],117:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

        return "<feFlood result=\"blackfield-"
            + alias4(((helper = (helper = helpers.filter_id || (depth0 != null ? depth0.filter_id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"filter_id","hash":{},"data":data}) : helper)))
            + "\" flood-color=\"#000000\" flood-opacity=\"0.868\"></feFlood>\n\n<feSpecularLighting result=\"spotlight-"
            + alias4(((helper = (helper = helpers.filter_id || (depth0 != null ? depth0.filter_id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"filter_id","hash":{},"data":data}) : helper)))
            + "\" lighting-color=\"#FFFFFF\" surfaceScale=\"1\" specularConstant=\"1\" specularExponent=\"28.000000000000004\">\n    <fePointLight z=\"500\"></fePointLight>\n</feSpecularLighting>\n\n<feBlend result=\"A-"
            + alias4(((helper = (helper = helpers.filter_id || (depth0 != null ? depth0.filter_id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"filter_id","hash":{},"data":data}) : helper)))
            + "\" in=\"blackfield-"
            + alias4(((helper = (helper = helpers.filter_id || (depth0 != null ? depth0.filter_id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"filter_id","hash":{},"data":data}) : helper)))
            + "\" in2=\"spotlight-"
            + alias4(((helper = (helper = helpers.filter_id || (depth0 != null ? depth0.filter_id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"filter_id","hash":{},"data":data}) : helper)))
            + "\" mode=\"lighten\"></feBlend>\n<feBlend result=\"B-"
            + alias4(((helper = (helper = helpers.filter_id || (depth0 != null ? depth0.filter_id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"filter_id","hash":{},"data":data}) : helper)))
            + "\" in=\"A-"
            + alias4(((helper = (helper = helpers.filter_id || (depth0 != null ? depth0.filter_id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"filter_id","hash":{},"data":data}) : helper)))
            + "\" in2=\"SourceGraphic\" mode=\"multiply\"></feBlend>\n\n<feColorMatrix type=\"saturate\" values=\"0.93\"></feColorMatrix>\n\n<feComponentTransfer>\n    <feFuncR type=\"linear\" slope=\"1.05\"></feFuncR>\n    <feFuncG type=\"linear\" slope=\"1.05\"></feFuncG>\n    <feFuncB type=\"linear\" slope=\"1.05\"></feFuncB>\n</feComponentTransfer>\n\n<feComponentTransfer>\n    <feFuncR type=\"linear\" slope=\"1.12\" intercept=\"-0.06000000000000005\"></feFuncR>\n    <feFuncG type=\"linear\" slope=\"1.12\" intercept=\"-0.06000000000000005\"></feFuncG>\n    <feFuncB type=\"linear\" slope=\"1.12\" intercept=\"-0.06000000000000005\"></feFuncB>\n</feComponentTransfer>\n\n<feGaussianBlur stdDeviation=\"0.09999999999999964\"></feGaussianBlur>\n<feColorMatrix type=\"hueRotate\" values=\"39.599999999999994\"></feColorMatrix>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],118:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        return "<feColorMatrix type=\"matrix\" values=\"1.154 -0.066 -0.066 0 0 -0.066 1.154 -0.066 0 0 -0.066 -0.066 1.154 0 0 0 0 0 1 0\"></feColorMatrix>\n\n<feComponentTransfer>\n    <feFuncR type=\"linear\" slope=\"1.07\"></feFuncR>\n    <feFuncG type=\"linear\" slope=\"1.07\"></feFuncG>\n    <feFuncB type=\"linear\" slope=\"1.07\"></feFuncB>\n</feComponentTransfer>\n\n<feComponentTransfer>\n    <feFuncR type=\"linear\" slope=\"1.15\" intercept=\"-0.07499999999999996\"></feFuncR>\n    <feFuncG type=\"linear\" slope=\"1.15\" intercept=\"-0.07499999999999996\"></feFuncG>\n    <feFuncB type=\"linear\" slope=\"1.15\" intercept=\"-0.07499999999999996\"></feFuncB>\n</feComponentTransfer>\n\n<feConvolveMatrix order=\"3 3\" preserveAlpha=\"true\" kernelMatrix=\"0 -0.06000000000000005 0 -0.06000000000000005 1.2400000000000002 -0.06000000000000005 0 -0.06000000000000005 0\"></feConvolveMatrix>\n\n<feColorMatrix type=\"hueRotate\" values=\"7.200000000000017\"></feColorMatrix>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],119:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        return "<feColorMatrix type=\"saturate\" values=\"0\"></feColorMatrix>\n\n<feComponentTransfer>\n    <feFuncR type=\"linear\" slope=\"1.1\"></feFuncR>\n    <feFuncG type=\"linear\" slope=\"1.1\"></feFuncG>\n    <feFuncB type=\"linear\" slope=\"1.1\"></feFuncB>\n</feComponentTransfer>\n\n<feComponentTransfer>\n    <feFuncR type=\"linear\" slope=\"0.95\" intercept=\"0.025000000000000022\"></feFuncR>\n    <feFuncG type=\"linear\" slope=\"0.95\" intercept=\"0.025000000000000022\"></feFuncG>\n    <feFuncB type=\"linear\" slope=\"0.95\" intercept=\"0.025000000000000022\"></feFuncB>\n</feComponentTransfer>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],120:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        return "<feColorMatrix type=\"saturate\" values=\"0.52\"></feColorMatrix>\n\n<feComponentTransfer>\n    <feFuncR type=\"linear\" slope=\"1.1\">\n    </feFuncR><feFuncG type=\"linear\" slope=\"1.1\"></feFuncG>\n    <feFuncB type=\"linear\" slope=\"1.1\"></feFuncB>\n</feComponentTransfer>\n\n<feComponentTransfer>\n    <feFuncR type=\"linear\" slope=\"0.97\" intercept=\"0.015000000000000013\"></feFuncR>\n    <feFuncG type=\"linear\" slope=\"0.97\" intercept=\"0.015000000000000013\"></feFuncG>\n    <feFuncB type=\"linear\" slope=\"0.97\" intercept=\"0.015000000000000013\"></feFuncB>\n</feComponentTransfer>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],121:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

        return "<feFlood result=\"blackfield-"
            + alias4(((helper = (helper = helpers.filter_id || (depth0 != null ? depth0.filter_id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"filter_id","hash":{},"data":data}) : helper)))
            + "\" flood-color=\"#000000\" flood-opacity=\"0.7839999999999999\"></feFlood>\n\n<feSpecularLighting result=\"spotlight-"
            + alias4(((helper = (helper = helpers.filter_id || (depth0 != null ? depth0.filter_id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"filter_id","hash":{},"data":data}) : helper)))
            + "\" lighting-color=\"#FFFFFF\" surfaceScale=\"1\" specularConstant=\"1\" specularExponent=\"14.000000000000002\">\n    <fePointLight z=\"500\"></fePointLight>\n</feSpecularLighting>\n\n<feBlend result=\"A-"
            + alias4(((helper = (helper = helpers.filter_id || (depth0 != null ? depth0.filter_id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"filter_id","hash":{},"data":data}) : helper)))
            + "\" in=\"blackfield-"
            + alias4(((helper = (helper = helpers.filter_id || (depth0 != null ? depth0.filter_id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"filter_id","hash":{},"data":data}) : helper)))
            + "\" in2=\"spotlight-"
            + alias4(((helper = (helper = helpers.filter_id || (depth0 != null ? depth0.filter_id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"filter_id","hash":{},"data":data}) : helper)))
            + "\" mode=\"lighten\"></feBlend>\n<feBlend result=\"B-"
            + alias4(((helper = (helper = helpers.filter_id || (depth0 != null ? depth0.filter_id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"filter_id","hash":{},"data":data}) : helper)))
            + "\" in=\"A-"
            + alias4(((helper = (helper = helpers.filter_id || (depth0 != null ? depth0.filter_id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"filter_id","hash":{},"data":data}) : helper)))
            + "\" in2=\"SourceGraphic\" mode=\"multiply\"></feBlend>\n\n<feColorMatrix type=\"saturate\" values=\"0.05\"></feColorMatrix>\n\n<feComponentTransfer>\n    <feFuncR type=\"linear\" slope=\"0.94\"></feFuncR>\n    <feFuncG type=\"linear\" slope=\"0.94\"></feFuncG>\n    <feFuncB type=\"linear\" slope=\"0.94\"></feFuncB>\n</feComponentTransfer>\n\n<feComponentTransfer>\n    <feFuncR type=\"linear\" slope=\"1.12\" intercept=\"-0.06000000000000005\"></feFuncR>\n    <feFuncG type=\"linear\" slope=\"1.12\" intercept=\"-0.06000000000000005\"></feFuncG>\n    <feFuncB type=\"linear\" slope=\"1.12\" intercept=\"-0.06000000000000005\"></feFuncB>\n</feComponentTransfer>\n\n<feConvolveMatrix order=\"3 3\" preserveAlpha=\"true\" kernelMatrix=\"0 -0.07999999999999996 0 -0.07999999999999996 1.3199999999999998 -0.07999999999999996 0 -0.07999999999999996 0\"></feConvolveMatrix>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],122:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        return "<feColorMatrix type=\"saturate\" values=\"0.76\"></feColorMatrix>\n\n<feComponentTransfer>\n    <feFuncR type=\"linear\" slope=\"1.61\"></feFuncR>\n    <feFuncG type=\"linear\" slope=\"1.61\"></feFuncG>\n    <feFuncB type=\"linear\" slope=\"1.61\"></feFuncB>\n</feComponentTransfer>\n\n<feComponentTransfer>\n    <feFuncR type=\"linear\" slope=\"0.73\" intercept=\"0.135\"></feFuncR>\n    <feFuncG type=\"linear\" slope=\"0.73\" intercept=\"0.135\"></feFuncG>\n    <feFuncB type=\"linear\" slope=\"0.73\" intercept=\"0.135\"></feFuncB>\n</feComponentTransfer>\n\n<feConvolveMatrix order=\"3 3\" preserveAlpha=\"true\" kernelMatrix=\"0 -0.13 0 -0.13 1.52 -0.13 0 -0.13 0\"></feConvolveMatrix>\n<feColorMatrix type=\"hueRotate\" values=\"55.80000000000001\"></feColorMatrix>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],123:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

        return "<svg class=\"filter-thumb\" xmlns=\"http://www.w3.org/2000/svg\" width=\""
            + alias4(((helper = (helper = helpers.width || (depth0 != null ? depth0.width : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"width","hash":{},"data":data}) : helper)))
            + "\" height=\""
            + alias4(((helper = (helper = helpers.height || (depth0 != null ? depth0.height : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"height","hash":{},"data":data}) : helper)))
            + "\">\n    <defs><filter id=\""
            + alias4(((helper = (helper = helpers.filter_id || (depth0 != null ? depth0.filter_id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"filter_id","hash":{},"data":data}) : helper)))
            + "\">"
            + ((stack1 = ((helper = (helper = helpers.filter || (depth0 != null ? depth0.filter : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"filter","hash":{},"data":data}) : helper))) != null ? stack1 : "")
            + "</filter></defs>\n    <g stroke=\"null\">\n        <image filter=\"url(#"
            + alias4(((helper = (helper = helpers.filter_id || (depth0 != null ? depth0.filter_id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"filter_id","hash":{},"data":data}) : helper)))
            + ")\" xlink:href=\""
            + alias4(((helper = (helper = helpers.image || (depth0 != null ? depth0.image : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"image","hash":{},"data":data}) : helper)))
            + "\" x=\"0\" y=\"0\" width=\""
            + alias4(((helper = (helper = helpers.width || (depth0 != null ? depth0.width : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"width","hash":{},"data":data}) : helper)))
            + "\" height=\""
            + alias4(((helper = (helper = helpers.height || (depth0 != null ? depth0.height : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"height","hash":{},"data":data}) : helper)))
            + "\" style=\"pointer-events:inherit\"/>\n    </g>\n</svg>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],124:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        return "    <div class=\"filterWrapper\" style=\"position: relative;\">\n        <input type=\"text\" name=\"filter\" placeholder=\""
            + container.escapeExpression((helpers.t || (depth0 && depth0.t) || helpers.helperMissing).call(depth0 != null ? depth0 : {},"modal.add_page.search_sizes",{"name":"t","hash":{},"data":data}))
            + "\"/>\n    </div>\n\n    <div class=\"tool-content\">\n        <div style=\"height: 200px;\" role=\"tabpanel\">\n            <div class=\"antiscroll-wrap\">\n                <div class=\"antiscroll-inner\">\n                    <div class=\"tab-content\"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n";
    },"3":function(container,depth0,helpers,partials,data) {
        var alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=container.escapeExpression;

        return "    <div style=\"display: table-cell; width:260px; padding-right: 5px; vertical-align: top; font-size: 13px;\">\n        <div class=\"filterWrapper\">\n            <ul class=\"filter\">\n                <li class=\"active\" data-type=\"all\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.add_page.show_all",{"name":"t","hash":{},"data":data}))
            + "</li>\n                <li data-type=\"category\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.add_page.filter_by",{"name":"t","hash":{},"data":data}))
            + "</li>\n            </ul>\n        </div>\n        <div class=\"filterWrapper subfilter\" style=\"display: none;\"></div>\n    </div>\n\n    <div class=\"tool-content\" style=\"display: table-cell;\">\n        <div style=\"height: 200px;\" role=\"tabpanel\">\n            <div class=\"antiscroll-wrap\">\n                <div class=\"antiscroll-inner\">\n                    <div class=\"tab-content\"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=helpers.blockHelperMissing, buffer =
            "<input type=\"hidden\" id=\"layout-id\" />\n<div style=\"display: table; width:100%\">\n";
        stack1 = ((helper = (helper = helpers.Desygner || (depth0 != null ? depth0.Desygner : depth0)) != null ? helper : alias2),(options={"name":"Desygner","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.Desygner) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += "\n";
        stack1 = ((helper = (helper = helpers.Photobooky || (depth0 != null ? depth0.Photobooky : depth0)) != null ? helper : alias2),(options={"name":"Photobooky","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.Photobooky) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],125:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        return "<b style=\"font-weight: 400\">"
            + container.escapeExpression((helpers.t || (depth0 && depth0.t) || helpers.helperMissing).call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.message : depth0),{"name":"t","hash":{},"data":data}))
            + "</b>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],126:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        return "<br><b>"
            + container.escapeExpression((helpers.t || (depth0 && depth0.t) || helpers.helperMissing).call(depth0 != null ? depth0 : {},"common.try_again",{"name":"t","hash":{},"data":data}))
            + "</b>";
    },"3":function(container,depth0,helpers,partials,data) {
        return "<br><b>"
            + container.escapeExpression((helpers.t || (depth0 && depth0.t) || helpers.helperMissing).call(depth0 != null ? depth0 : {},"common.check_network",{"name":"t","hash":{},"data":data}))
            + "</b>";
    },"5":function(container,depth0,helpers,partials,data) {
        var stack1;

        return "<br><b>"
            + ((stack1 = container.lambda(depth0, depth0)) != null ? stack1 : "")
            + "</b>";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=helpers.blockHelperMissing, buffer =
            "<b>"
            + container.escapeExpression((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"common.error",{"name":"t","hash":{},"data":data}))
            + " - </b>\n<i>"
            + ((stack1 = (helpers.t || (depth0 && depth0.t) || alias2).call(alias1,(depth0 != null ? depth0.message : depth0),{"name":"t","hash":{},"data":data})) != null ? stack1 : "")
            + "</i>\n";
        stack1 = ((helper = (helper = helpers.try_again || (depth0 != null ? depth0.try_again : depth0)) != null ? helper : alias2),(options={"name":"try_again","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.try_again) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += "\n";
        stack1 = ((helper = (helper = helpers.check_network || (depth0 != null ? depth0.check_network : depth0)) != null ? helper : alias2),(options={"name":"check_network","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.check_network) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += "\n";
        stack1 = ((helper = (helper = helpers.more_info || (depth0 != null ? depth0.more_info : depth0)) != null ? helper : alias2),(options={"name":"more_info","hash":{},"fn":container.program(5, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.more_info) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "\n";
    },"useData":true});

},{"hbsfy/runtime":373}],127:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing;

        return "    "
            + ((stack1 = (helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.alert.delete_confirm_0",{"name":"t","hash":{},"data":data})) != null ? stack1 : "")
            + " <i>"
            + container.escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : alias2),(typeof helper === "function" ? helper.call(alias1,{"name":"title","hash":{},"data":data}) : helper)))
            + "</i>?<br>\n    "
            + ((stack1 = (helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.alert.delete_confirm_1",{"name":"t","hash":{},"data":data})) != null ? stack1 : "")
            + "\n";
    },"3":function(container,depth0,helpers,partials,data) {
        var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing;

        return "    "
            + ((stack1 = (helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.alert.delete_confirm_0",{"name":"t","hash":{},"data":data})) != null ? stack1 : "")
            + " "
            + container.escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : alias2),(typeof helper === "function" ? helper.call(alias1,{"name":"title","hash":{},"data":data}) : helper)))
            + "?\n";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=helpers.blockHelperMissing, buffer = "";

        stack1 = ((helper = (helper = helpers.admin || (depth0 != null ? depth0.admin : depth0)) != null ? helper : alias2),(options={"name":"admin","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.admin) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        stack1 = ((helper = (helper = helpers.admin || (depth0 != null ? depth0.admin : depth0)) != null ? helper : alias2),(options={"name":"admin","hash":{},"fn":container.noop,"inverse":container.program(3, data, 0),"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.admin) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer;
    },"useData":true});

},{"hbsfy/runtime":373}],128:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var helper;

        return "<span>"
            + container.escapeExpression(((helper = (helper = helpers.text || (depth0 != null ? depth0.text : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : {},{"name":"text","hash":{},"data":data}) : helper)))
            + "</span>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],129:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function";

        return "<div class=\"modal alert\" style=\""
            + container.escapeExpression(((helper = (helper = helpers.width || (depth0 != null ? depth0.width : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"width","hash":{},"data":data}) : helper)))
            + "\">\n    <p class=\"content\">"
            + ((stack1 = ((helper = (helper = helpers.message || (depth0 != null ? depth0.message : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"message","hash":{},"data":data}) : helper))) != null ? stack1 : "")
            + "</p>\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],130:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

        return "<li style=\""
            + alias4(((helper = (helper = helpers.width || (depth0 != null ? depth0.width : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"width","hash":{},"data":data}) : helper)))
            + "\"><a id=\"btn-"
            + alias4(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"key","hash":{},"data":data}) : helper)))
            + "\" class=\"btn "
            + alias4(((helper = (helper = helpers["class"] || (depth0 != null ? depth0["class"] : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"class","hash":{},"data":data}) : helper)))
            + "\">"
            + alias4((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,(depth0 != null ? depth0.title : depth0),{"name":"t","hash":{},"data":data}))
            + "</a></li>";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1;

        return "<ul class=\"btnWrapper bottom\">\n"
            + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},depth0,{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "\n</ul>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],131:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=container.escapeExpression, buffer =
            "    <p style=\"margin-top: 10px;\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.layout_load.different_size",(depth0 != null ? depth0.new_size : depth0),{"name":"t","hash":{},"data":data}))
            + "</p>\n    <div class=\"checkbox\">\n        <input type=\"checkbox\" name=\"keep-size-input\"";
        stack1 = ((helper = (helper = helpers.keep_size || (depth0 != null ? depth0.keep_size : depth0)) != null ? helper : alias2),(options={"name":"keep_size","hash":{},"fn":container.program(2, data, 0),"inverse":container.noop,"data":data}),(typeof helper === "function" ? helper.call(alias1,options) : helper));
        if (!helpers.keep_size) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "/>\n        <label for=\"keep-size-input\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.layout_load.keep_current_size",(depth0 != null ? depth0.current_size : depth0),{"name":"t","hash":{},"data":data}))
            + "</label>\n    </div>\n";
    },"2":function(container,depth0,helpers,partials,data) {
        return " checked";
    },"4":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, buffer =
            "    <div class=\"checkbox\">\n        <input type=\"checkbox\" name=\"keep-images-input\"";
        stack1 = ((helper = (helper = helpers.keep_images || (depth0 != null ? depth0.keep_images : depth0)) != null ? helper : alias2),(options={"name":"keep_images","hash":{},"fn":container.program(2, data, 0),"inverse":container.noop,"data":data}),(typeof helper === "function" ? helper.call(alias1,options) : helper));
        if (!helpers.keep_images) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "/>\n        <label for=\"keep-images-input\">"
            + container.escapeExpression((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.layout_load.keep_images",{"name":"t","hash":{},"data":data}))
            + "</label>\n    </div>\n";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=helpers.blockHelperMissing, buffer =
            "<p>"
            + container.escapeExpression((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.layout_load.about",{"name":"t","hash":{},"data":data}))
            + "</p>\n";
        stack1 = ((helper = (helper = helpers.is_same_size || (depth0 != null ? depth0.is_same_size : depth0)) != null ? helper : alias2),(options={"name":"is_same_size","hash":{},"fn":container.noop,"inverse":container.program(1, data, 0),"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.is_same_size) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        stack1 = ((helper = (helper = helpers.has_images || (depth0 != null ? depth0.has_images : depth0)) != null ? helper : alias2),(options={"name":"has_images","hash":{},"fn":container.program(4, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.has_images) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer;
    },"useData":true});

},{"hbsfy/runtime":373}],132:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        return " center";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, buffer =
            "<div class=\"spinnerWrapper";
        stack1 = ((helper = (helper = helpers.center || (depth0 != null ? depth0.center : depth0)) != null ? helper : helpers.helperMissing),(options={"name":"center","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data}),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : {},options) : helper));
        if (!helpers.center) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "\">\n    <div class=\"spinner\"><circle class=\"path\"></circle></div>\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],133:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

        return "<div class=\"modal\" style=\""
            + alias4(((helper = (helper = helpers.width || (depth0 != null ? depth0.width : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"width","hash":{},"data":data}) : helper)))
            + "\">\n    <a class=\"btn btn-green modalHeader\" id=\"pageOrderShow\">\n        <i class=\""
            + alias4(((helper = (helper = helpers.icon || (depth0 != null ? depth0.icon : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"icon","hash":{},"data":data}) : helper)))
            + "\"></i>\n        "
            + alias4((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,(depth0 != null ? depth0.title : depth0),{"name":"t","hash":{},"data":data}))
            + "\n        <i class=\"icon-remove action\"></i>\n    </a>\n    <section class=\"content\">\n        <form action=\"#\" autocomplete=\"on\" id=\"form_"
            + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"id","hash":{},"data":data}) : helper)))
            + "\" onsubmit=\"return false;\">\n            <button type=\"submit\" name=\"testname\" value=\"test\" style=\"display: none;\"/>\n        </form>\n    </section>\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],134:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        return "mobile";
    },"3":function(container,depth0,helpers,partials,data) {
        return "web";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=helpers.blockHelperMissing, buffer =
            "<div class=\"modalWrapper overlay nodrag ";
        stack1 = ((helper = (helper = helpers.Mobile || (depth0 != null ? depth0.Mobile : depth0)) != null ? helper : alias2),(options={"name":"Mobile","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.Mobile) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        stack1 = ((helper = (helper = helpers.Desktop || (depth0 != null ? depth0.Desktop : depth0)) != null ? helper : alias2),(options={"name":"Desktop","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.Desktop) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "\" data-id=\""
            + container.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"id","hash":{},"data":data}) : helper)))
            + "\"></div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],135:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        return "            <div class=\"checkbox\">\n                <input type=\"checkbox\" name=\"isZip\" value=\"1\"/>\n                <label for=\"isZip\">"
            + container.escapeExpression((helpers.t || (depth0 && depth0.t) || helpers.helperMissing).call(depth0 != null ? depth0 : {},"modal.download.zip_label",{"name":"t","hash":{},"data":data}))
            + "</label>\n            </div>\n";
    },"3":function(container,depth0,helpers,partials,data) {
        var alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=container.escapeExpression;

        return "    <section>\n        <span>"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.download.include_label",{"name":"t","hash":{},"data":data}))
            + "</span>\n        <div class=\"checkbox\"><input type=\"checkbox\" name=\"isThumb\" value=\"1\"/>\n            <label for=\"isThumb\" style=\"width: 90px;\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.download.thumb_label",{"name":"t","hash":{},"data":data}))
            + "</label>\n            <input type=\"number\" style=\"margin: 0 5px; position:relative;\" class=\"form-control small disabled thumbDimensions\" data-type=\"width\" placeholder=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.download.width_label",{"name":"t","hash":{},"data":data}))
            + "\"/><span>X</span>\n            <input type=\"number\" style=\"margin: 0 5px; position:relative;\" class=\"form-control small disabled thumbDimensions\" data-type=\"height\" placeholder=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.download.height_label",{"name":"t","hash":{},"data":data}))
            + "\"/><span>px</span>\n        </div>\n\n        <div class=\"checkbox\"><input type=\"checkbox\" name=\"isWeb\" value=\"1\"/>\n            <label for=\"isWeb\" style=\"width: 90px;\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.download.web_label",{"name":"t","hash":{},"data":data}))
            + "</label>\n            <input type=\"number\" style=\"margin: 0 5px; position:relative;\" class=\"form-control small disabled webDimensions\" data-type=\"width\" placeholder=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.download.width_label",{"name":"t","hash":{},"data":data}))
            + "\"/><span>X</span>\n            <input type=\"number\" style=\"margin: 0 5px; position:relative;\" class=\"form-control small disabled webDimensions\" data-type=\"height\" placeholder=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.download.height_label",{"name":"t","hash":{},"data":data}))
            + "\"/><span>px</span>\n        </div>\n\n        <div class=\"checkbox\"><input type=\"checkbox\" name=\"isMobile\" value=\"1\"/>\n            <label for=\"isMobile\" style=\"width: 90px;\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.download.mobile_label",{"name":"t","hash":{},"data":data}))
            + "</label>\n            <input type=\"number\" style=\"margin: 0 5px; position:relative;\" class=\"form-control small disabled mobileDimensions\" data-type=\"width\" placeholder=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.download.width_label",{"name":"t","hash":{},"data":data}))
            + "\"/><span>X</span>\n            <input type=\"number\" style=\"margin: 0 5px; position:relative;\" class=\"form-control small disabled mobileDimensions\" data-type=\"height\" placeholder=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.download.height_label",{"name":"t","hash":{},"data":data}))
            + "\"/><span>px</span>\n        </div>\n    </section>\n";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=container.escapeExpression, alias4="function", alias5=helpers.blockHelperMissing, buffer =
            "<section style=\"display: block; float: left; margin-right: 10px;\">\n    <section id=\"quality-section\">\n        <span>"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.download.quality_label",{"name":"t","hash":{},"data":data}))
            + "</span>\n\n        <ul class=\"btnWrapper\">\n            <li>\n                <a class=\"btn btn-squire btn-tag quality active\" tag=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.download.high_label",{"name":"t","hash":{},"data":data}))
            + "\" data-value=\"92\">\n                    <div class=\"iconWrapper\"><i class=\"icon-brightness_1\"></i></div>\n                </a>\n            </li>\n            <li>\n                <a class=\"btn btn-squire btn-tag quality\" tag=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.download.medium_label",{"name":"t","hash":{},"data":data}))
            + "\" data-value=\"75\">\n                    <div class=\"iconWrapper\"><i class=\"icon-brightness_2\"></i></div>\n                </a>\n            </li>\n            <li>\n                <a class=\"btn btn-squire btn-tag quality\" tag=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.download.low_label",{"name":"t","hash":{},"data":data}))
            + "\" data-value=\"60\">\n                    <div class=\"iconWrapper\"><i class=\"icon-brightness_3\"></i></div>\n                </a>\n            </li>\n        </ul>\n    </section>\n\n    <span>"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.download.resize_label",{"name":"t","hash":{},"data":data}))
            + "</span>\n    <section>\n        <input type=\"number\" style=\"margin: 0 5px; position:relative;\" class=\"form-control small rangeCurrentDimensions\" data-type=\"width\" placeholder=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.download.width_label",{"name":"t","hash":{},"data":data}))
            + "\"/><span>X</span>\n        <input type=\"number\" style=\"margin: 0 5px; position:relative;\" class=\"form-control small rangeCurrentDimensions\" data-type=\"height\" placeholder=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.download.height_label",{"name":"t","hash":{},"data":data}))
            + "\"/><span>px</span>\n    </section>\n</section>\n\n<section style=\"display: block; float: right;\">\n    <section>\n        <span>"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.download.settings_label",{"name":"t","hash":{},"data":data}))
            + "</span>\n        <div class=\"checkbox\"><input type=\"checkbox\" name=\"isBleed\" value=\"1\"/>\n            <label for=\"isBleed\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.download.bleed_label",{"name":"t","hash":{},"data":data}))
            + "</label></div>\n\n";
        stack1 = ((helper = (helper = helpers.displayZipOption || (depth0 != null ? depth0.displayZipOption : depth0)) != null ? helper : alias2),(options={"name":"displayZipOption","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias4 ? helper.call(alias1,options) : helper));
        if (!helpers.displayZipOption) { stack1 = alias5.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += "    </section>\n\n";
        stack1 = ((helper = (helper = helpers.display_extended_options || (depth0 != null ? depth0.display_extended_options : depth0)) != null ? helper : alias2),(options={"name":"display_extended_options","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias4 ? helper.call(alias1,options) : helper));
        if (!helpers.display_extended_options) { stack1 = alias5.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "</section>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],136:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=container.escapeExpression;

        return "<section>\n    <input type=\"text\" class=\"findFriendsSearch\" id=\"search\" name=\"search\" placeholder=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.friends.search_placeholder",{"name":"t","hash":{},"data":data}))
            + "\" data-role=\"tagsinput\"/>\n    <div class=\"antiscroll-wrap\">\n        <div class=\"antiscroll-inner\">\n            <ul class=\"friends\" style=\"padding-right: 15px; list-style: none;\"></ul>\n        </div>\n    </div>\n</section>\n<hr/>\n\n<section data-description=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.friends.invite_description",{"name":"t","hash":{},"data":data}))
            + "\">\n    <input type=\"text\" id=\"email4inviting\" name=\"emails\" placeholder=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.friends.email_placeholder",{"name":"t","hash":{},"data":data}))
            + "\"/>\n</section>\n\n<section style=\"display: none;\">\n    <textarea id=\"inviteFriendComments\" placeholder=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.friends.message_placeholder",{"name":"t","hash":{},"data":data}))
            + "\"></textarea>\n</section>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],137:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        return container.escapeExpression(container.lambda(depth0, depth0));
    },"3":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=helpers.blockHelperMissing, buffer =
            "            ";
        stack1 = ((helper = (helper = helpers.Desygner || (depth0 != null ? depth0.Desygner : depth0)) != null ? helper : alias2),(options={"name":"Desygner","hash":{},"fn":container.program(4, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.Desygner) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += "\n            ";
        stack1 = ((helper = (helper = helpers.Photobooky || (depth0 != null ? depth0.Photobooky : depth0)) != null ? helper : alias2),(options={"name":"Photobooky","hash":{},"fn":container.program(6, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.Photobooky) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "\n";
    },"4":function(container,depth0,helpers,partials,data) {
        return "Desygner";
    },"6":function(container,depth0,helpers,partials,data) {
        return "Photobooky";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression, alias5=helpers.blockHelperMissing, buffer =
            "<li class=\"media grayscale\" data-id=\""
            + alias4(((helper = (helper = helpers.user_id || (depth0 != null ? depth0.user_id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"user_id","hash":{},"data":data}) : helper)))
            + "\" data-network=\"Inkive\">\n    <img class=\"media-object pull-left\" alt=\""
            + alias4(((helper = (helper = helpers.user_name || (depth0 != null ? depth0.user_name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"user_name","hash":{},"data":data}) : helper)))
            + "\" src=\""
            + alias4(((helper = (helper = helpers.profile_pic || (depth0 != null ? depth0.profile_pic : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"profile_pic","hash":{},"data":data}) : helper)))
            + "\" style=\"width: 42px; height: 42px\">\n    <a style=\"width:20%\" class=\"pull-right btn btn-inkive btn-black btn-xs btn-add-request\">"
            + alias4((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.friends.search_add_label",{"name":"t","hash":{},"data":data}))
            + "</a>\n\n    <div class=\"media-body\">\n        <span class=\"media-heading\">\n            <strong>"
            + alias4(((helper = (helper = helpers.user_name || (depth0 != null ? depth0.user_name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"user_name","hash":{},"data":data}) : helper)))
            + "</strong><br />\n            ";
        stack1 = ((helper = (helper = helpers.source || (depth0 != null ? depth0.source : depth0)) != null ? helper : alias2),(options={"name":"source","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.source) { stack1 = alias5.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += "\n";
        stack1 = ((helper = (helper = helpers.source || (depth0 != null ? depth0.source : depth0)) != null ? helper : alias2),(options={"name":"source","hash":{},"fn":container.noop,"inverse":container.program(3, data, 0),"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.source) { stack1 = alias5.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "        </span>\n    </div>\n</li>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],138:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        return "<div class=\"info-message text-center\">\n    <div class=\"spinner-wrapper\">\n        <div class=\"spinner small\">\n            <circle class=\"path\"></circle>\n        </div>\n    </div>\n    <div class=\"empty-text\">"
            + container.escapeExpression((helpers.t || (depth0 && depth0.t) || helpers.helperMissing).call(depth0 != null ? depth0 : {},"modal.friends.loading_label",{"name":"t","hash":{},"data":data}))
            + "</div>\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],139:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        return "<div class=\"info-message text-center\">\n    <div class=\"empty-text\">"
            + container.escapeExpression((helpers.t || (depth0 && depth0.t) || helpers.helperMissing).call(depth0 != null ? depth0 : {},"modal.friends.no_results_label",{"name":"t","hash":{},"data":data}))
            + "</div>\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],140:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=container.escapeExpression, alias4="function";

        return "<p>\n    "
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.help.hello",{"name":"t","hash":{},"data":data}))
            + " "
            + alias3(((helper = (helper = helpers.user_name || (depth0 != null ? depth0.user_name : depth0)) != null ? helper : alias2),(typeof helper === alias4 ? helper.call(alias1,{"name":"user_name","hash":{},"data":data}) : helper)))
            + ",<br />\n    <small>"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.help.message",{"name":"t","hash":{},"data":data}))
            + "</small>\n</p>\n<section>\n    <label for=\"name\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.help.name_label",{"name":"t","hash":{},"data":data}))
            + "</label>\n    <input type=\"text\" name=\"name\" class=\"form-control\" id=\"name\" value=\""
            + alias3(((helper = (helper = helpers.user_name || (depth0 != null ? depth0.user_name : depth0)) != null ? helper : alias2),(typeof helper === alias4 ? helper.call(alias1,{"name":"user_name","hash":{},"data":data}) : helper)))
            + "\"/>\n</section>\n<section>\n    <label for=\"email\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.help.email_label",{"name":"t","hash":{},"data":data}))
            + "</label>\n    <input type=\"text\" name=\"email\" class=\"form-control\" id=\"email\" value=\""
            + alias3(((helper = (helper = helpers.user_email || (depth0 != null ? depth0.user_email : depth0)) != null ? helper : alias2),(typeof helper === alias4 ? helper.call(alias1,{"name":"user_email","hash":{},"data":data}) : helper)))
            + "\"/>\n</section>\n<section>\n    <label for=\"help\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.help.help_label",{"name":"t","hash":{},"data":data}))
            + "</label>\n    <textarea name=\"help\" rows=\"3\" class=\"form-control\"></textarea>\n</section>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],141:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

        return "<section>\n    <img src=\""
            + alias4(((helper = (helper = helpers.thumb || (depth0 != null ? depth0.thumb : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"thumb","hash":{},"data":data}) : helper)))
            + "\" width=\"124\"/>\n    <div style=\"display: inline-block; vertical-align: top; padding-left: 10px; width: 340px;\">\n        <strong>"
            + alias4(((helper = (helper = helpers.book_name || (depth0 != null ? depth0.book_name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"book_name","hash":{},"data":data}) : helper)))
            + "</strong><br/>\n        <span>"
            + alias4(((helper = (helper = helpers.book_description || (depth0 != null ? depth0.book_description : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"book_description","hash":{},"data":data}) : helper)))
            + "</span>\n    </div>\n</section>\n";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression, buffer = "";

        stack1 = ((helper = (helper = helpers.Desktop || (depth0 != null ? depth0.Desktop : depth0)) != null ? helper : alias2),(options={"name":"Desktop","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.Desktop) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "\n<section>\n    <label for=\"share_email\">"
            + alias4((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.share_email.address_label",{"name":"t","hash":{},"data":data}))
            + "</label>\n    <input type=\"email\" name=\"share_email\" class=\"form-control\" id=\"share_email\" placeholder=\""
            + alias4((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.share_email.address_placeholder",{"name":"t","hash":{},"data":data}))
            + "\"/>\n</section>\n\n<section>\n    <label for=\"sender_username\">"
            + alias4((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.share_email.name_label",{"name":"t","hash":{},"data":data}))
            + "</label>\n    <input type=\"text\" name=\"sender_username\" class=\"form-control\" id=\"sender_username\" placeholder=\""
            + alias4((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.share_email.name_placeholder",{"name":"t","hash":{},"data":data}))
            + "\" value=\""
            + alias4(((helper = (helper = helpers.user_name || (depth0 != null ? depth0.user_name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"user_name","hash":{},"data":data}) : helper)))
            + "\"/>\n</section>\n\n<section>\n    <label for=\"share_comments\">"
            + alias4((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.share_email.message_label",{"name":"t","hash":{},"data":data}))
            + "</label>\n    <textarea name=\"share_comments\" class=\"form-control\" placeholder=\""
            + alias4((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.share_email.message_placeholder",{"name":"t","hash":{},"data":data}))
            + "\"></textarea>\n</section>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],142:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        return "        <label for=\"bookName\">"
            + container.escapeExpression((helpers.t || (depth0 && depth0.t) || helpers.helperMissing).call(depth0 != null ? depth0 : {},"modal.share_embed.display_project",{"name":"t","hash":{},"data":data}))
            + "</label>\n";
    },"3":function(container,depth0,helpers,partials,data) {
        return "        <label for=\"bookName\">"
            + container.escapeExpression((helpers.t || (depth0 && depth0.t) || helpers.helperMissing).call(depth0 != null ? depth0 : {},"modal.share_embed.display_book",{"name":"t","hash":{},"data":data}))
            + "</label>\n";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=container.escapeExpression, alias4="function", alias5=helpers.blockHelperMissing, buffer =
            "<section style=\"display: block; float: left; margin-right: 10px;\">\n    <span>"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.share_embed.type_label",{"name":"t","hash":{},"data":data}))
            + "</span>\n\n    <ul class=\"btnWrapper\">\n        <li>\n            <a class=\"btn btn-squire btn-tag type active\" tag=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.share_embed.slideshow",{"name":"t","hash":{},"data":data}))
            + "\" data-id=\"slide\">\n                <div class=\"iconWrapper\"><i class=\"icon-square-o\"></i></div>\n            </a>\n        </li>\n        <li>\n            <a class=\"btn btn-squire btn-tag type\" tag=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.share_embed.scrolling",{"name":"t","hash":{},"data":data}))
            + "\" data-id=\"scroll\">\n                <div class=\"iconWrapper\"><i class=\"icon-square-o\"></i></div>\n            </a>\n        </li>\n    </ul>\n</section>\n\n<section style=\"display: block; float: left;\" id=\"share-embed-size\">\n    <span id=\"share-embed-size-text\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.share_embed.size_label",{"name":"t","hash":{},"data":data}))
            + "</span>\n\n    <ul class=\"btnWrapper\">\n        <li>\n            <a class=\"btn btn-squire btn-tag size active\" tag=\"290 x 205\" data-id=\"290\">\n                <div class=\"iconWrapper\"><i class=\"icon-square-o\" style=\"font-size:0.6em;\"></i></div>\n            </a>\n        </li>\n        <li>\n            <a class=\"btn btn-squire btn-tag size\" tag=\"500 x 354\" data-id=\"500\">\n                <div class=\"iconWrapper\"><i class=\"icon-square-o\" style=\"font-size:0.8em;\"></i></div>\n            </a>\n        </li>\n        <li>\n            <a class=\"btn btn-squire btn-tag size\" tag=\"800 x 566\" data-id=\"800\">\n                <div class=\"iconWrapper\"><i class=\"icon-square-o\" style=\"font-size:1.0em;\"></i></div>\n            </a>\n        </li>\n        <li>\n            <a class=\"btn btn-squire btn-tag size\" tag=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.share_embed.custom",{"name":"t","hash":{},"data":data}))
            + "\" data-id=\"custom\">\n                <div class=\"iconWrapper\"><i class=\"icon-square-o\" style=\"font-size:1.2em;\"></i></div>\n            </a>\n        </li>\n        <li>\n            <div id=\"share-embed-custom-sizes\" style=\"display: none;\">\n                <input type=\"number\" name=\"width\" class=\"form-control small\" value=\""
            + alias3(((helper = (helper = helpers.width || (depth0 != null ? depth0.width : depth0)) != null ? helper : alias2),(typeof helper === alias4 ? helper.call(alias1,{"name":"width","hash":{},"data":data}) : helper)))
            + "\"/>\n                <span>&nbsp;X&nbsp;<span>\n                <input type=\"number\" name=\"height\" class=\"form-control small\" value=\""
            + alias3(((helper = (helper = helpers.height || (depth0 != null ? depth0.height : depth0)) != null ? helper : alias2),(typeof helper === alias4 ? helper.call(alias1,{"name":"height","hash":{},"data":data}) : helper)))
            + "\"/>\n            </div>\n        </li>\n    </ul>\n</section>\n\n<section style=\"clear: both;\" id=\"share-embed-checkboxes\">\n    <div class=\"checkbox\">\n        <input type=\"checkbox\" name=\"bookName\" id=\"bookName\" value=\"1\"/>\n";
        stack1 = ((helper = (helper = helpers.Desygner || (depth0 != null ? depth0.Desygner : depth0)) != null ? helper : alias2),(options={"name":"Desygner","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias4 ? helper.call(alias1,options) : helper));
        if (!helpers.Desygner) { stack1 = alias5.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += "\n";
        stack1 = ((helper = (helper = helpers.Photobooky || (depth0 != null ? depth0.Photobooky : depth0)) != null ? helper : alias2),(options={"name":"Photobooky","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias4 ? helper.call(alias1,options) : helper));
        if (!helpers.Photobooky) { stack1 = alias5.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "    </div>\n    <div class=\"checkbox\">\n        <input type=\"checkbox\" name=\"bookViews\" id=\"bookViews\" value=\"1\"/>\n        <label for=\"bookViews\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.share_embed.display_numbers",{"name":"t","hash":{},"data":data}))
            + "</label>\n    </div>\n</section>\n\n<section style=\"clear: both;\">\n    <label for=\"code\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.share_embed.code_label",{"name":"t","hash":{},"data":data}))
            + "</label>\n    <textarea name=\"code\" class=\"form-control\" readonly=\"readonly\"></textarea>\n</section>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],143:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        var alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=container.escapeExpression;

        return "            <div id=\"pageMenu\">\n                <div id=\"info\" class=\"help\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"page_order.select",{"name":"t","hash":{},"data":data}))
            + "</div>\n                <a class=\"tool-icon\" id=\"ik-add-page\" tag=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"page_order.new",{"name":"t","hash":{},"data":data}))
            + "\"><i class=\"icon-plus\"></i></a>\n                <a class=\"tool-icon\" id=\"ik-copy-page\" tag=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"page_order.duplicate",{"name":"t","hash":{},"data":data}))
            + "\"><i class=\"icon-copy\"></i></a>\n                <a class=\"tool-icon\" id=\"ik-delete-page\" tag=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"page_order.delete",{"name":"t","hash":{},"data":data}))
            + "\"><i class=\"icon-bin\"></i></a>\n            </div>\n\n            <div class=\"pageSubmenu\">\n                <a class=\"tool-icon top\" id=\"ik-show-pagemenu\" data-popover=\"tooltip\" data-original-title=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"page_order.show_menu",{"name":"t","hash":{},"data":data}))
            + "\">\n                    <i class=\"icon-chevron-down\"></i>\n                </a>\n            </div>\n";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression, buffer =
            "<div class=\"thumbnail\" data=\""
            + alias4(((helper = (helper = helpers.page_id || (depth0 != null ? depth0.page_id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"page_id","hash":{},"data":data}) : helper)))
            + "\">\n    <div class=\"pageOrderWrapper\"><a class=\"block\">\n        <img id=\"page-"
            + alias4(((helper = (helper = helpers.page_id || (depth0 != null ? depth0.page_id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"page_id","hash":{},"data":data}) : helper)))
            + "\"/></a>\n        <a id=\"ik-hide-pagemenu\">\n            <span>"
            + alias4((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"page_order.cancel",{"name":"t","hash":{},"data":data}))
            + "</span><span class=\"icon-remove\"></span>\n        </a>\n\n";
        stack1 = ((helper = (helper = helpers.Desktop || (depth0 != null ? depth0.Desktop : depth0)) != null ? helper : alias2),(options={"name":"Desktop","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.Desktop) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "    </div>\n\n    <p><label>"
            + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
            + "</label></p>\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],144:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        return "<li class=\"space\" data-additional-menu=\"true\" style=\"display: none;\"></li>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],145:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        return "<li><a role=\"menuitem\">"
            + container.escapeExpression(container.lambda(depth0, depth0))
            + " pt</a></li>";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1;

        return "<ul>\n    "
            + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},depth0,{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "\n</ul>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],146:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        return "<li>\n    <a class=\"btn btn-onmenu\" data-action=\"on_show_more\">\n        "
            + container.escapeExpression((helpers.t || (depth0 && depth0.t) || helpers.helperMissing).call(depth0 != null ? depth0 : {},"popupmenu.show_more",{"name":"t","hash":{},"data":data}))
            + "\n    </a>\n</li>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],147:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data,blockParams,depths) {
        var alias1=container.lambda, alias2=container.escapeExpression;

        return "    <li>\n        <svg width=\"207\" height=\"30\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n            <line stroke-dasharray=\""
            + alias2(alias1(depth0, depth0))
            + "\" stroke-width=\""
            + alias2(alias1((depths[1] != null ? depths[1].width : depths[1]), depth0))
            + "\" x1=\"0\" y1=\"15\" x2=\"207\" y2=\"15\"/>\n        </svg>\n    </li>\n";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data,blockParams,depths) {
        var stack1, helper, alias1=depth0 != null ? depth0 : {};

        return "<ul class=\"stroke-dasharray\">\n    <li>\n        <svg width=\"207\" height=\"30\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n            <line stroke-width=\""
            + container.escapeExpression(((helper = (helper = helpers.width || (depth0 != null ? depth0.width : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(alias1,{"name":"width","hash":{},"data":data}) : helper)))
            + "\" x1=\"0\" y1=\"15\" x2=\"207\" y2=\"15\"/>\n        </svg>\n    </li>\n"
            + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.dashArrays : depth0),{"name":"each","hash":{},"fn":container.program(1, data, 0, blockParams, depths),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "</ul>\n";
    },"useData":true,"useDepths":true});

},{"hbsfy/runtime":373}],148:[function(require,module,exports){
    var templates = {
        'modal': require('./modal/base/modal.hbs'),
        'modal_alert': require('./modal/base/alert.hbs'),
        'modal_wrapper': require('./modal/base/wrapper.hbs'),
        'modal_buttons': require('./modal/base/buttons.hbs'),
        'modal_loader': require('./modal/base/loader.hbs'),
        'modal_layout_load': require('./modal/base/layout-load.hbs'),
        'alert_default': require('./modal/alert/default.hbs'),
        'alert_delete_confirm': require('./modal/alert/delete-confirm.hbs'),
        'alert_span': require('./modal/alert/span.hbs'),
        'alert_bold': require('./modal/alert/bold.hbs'),
        'popupmenu_showmore': require('./popupmenu/show-more.hbs'),
        'popupmenu_additional': require('./popupmenu/additional.hbs'),
        'popupmenu_font_size_list': require('./popupmenu/font-size-list.hbs'),
        'popupmenu_stroke_dasharray': require('./popupmenu/stroke-dasharray.hbs'),
        'pageorder_thumb': require('./pageorder/thumb.hbs')
    };

    module.exports = function (key, args) {
        if (templates[key]) return templates[key](args);
    };

},{"./modal/alert/bold.hbs":125,"./modal/alert/default.hbs":126,"./modal/alert/delete-confirm.hbs":127,"./modal/alert/span.hbs":128,"./modal/base/alert.hbs":129,"./modal/base/buttons.hbs":130,"./modal/base/layout-load.hbs":131,"./modal/base/loader.hbs":132,"./modal/base/modal.hbs":133,"./modal/base/wrapper.hbs":134,"./pageorder/thumb.hbs":143,"./popupmenu/additional.hbs":144,"./popupmenu/font-size-list.hbs":145,"./popupmenu/show-more.hbs":146,"./popupmenu/stroke-dasharray.hbs":147}],149:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        return "class=\"vertical\"";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression, buffer =
            "<g clip-path=\"url(#"
            + alias4(((helper = (helper = helpers.clipId || (depth0 != null ? depth0.clipId : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"clipId","hash":{},"data":data}) : helper)))
            + ")\" height=\""
            + alias4(((helper = (helper = helpers.size || (depth0 != null ? depth0.size : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"size","hash":{},"data":data}) : helper)))
            + "\" width=\""
            + alias4(((helper = (helper = helpers.size || (depth0 != null ? depth0.size : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"size","hash":{},"data":data}) : helper)))
            + "\" y=\""
            + alias4(((helper = (helper = helpers.y || (depth0 != null ? depth0.y : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"y","hash":{},"data":data}) : helper)))
            + "\" x=\""
            + alias4(((helper = (helper = helpers.x || (depth0 != null ? depth0.x : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"x","hash":{},"data":data}) : helper)))
            + "\">\n    <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n     id=\""
            + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"id","hash":{},"data":data}) : helper)))
            + "\" height=\""
            + alias4(((helper = (helper = helpers.size || (depth0 != null ? depth0.size : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"size","hash":{},"data":data}) : helper)))
            + "\" width=\""
            + alias4(((helper = (helper = helpers.size || (depth0 != null ? depth0.size : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"size","hash":{},"data":data}) : helper)))
            + "\" y=\""
            + alias4(((helper = (helper = helpers.y || (depth0 != null ? depth0.y : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"y","hash":{},"data":data}) : helper)))
            + "\" x=\""
            + alias4(((helper = (helper = helpers.x || (depth0 != null ? depth0.x : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"x","hash":{},"data":data}) : helper)))
            + "\" ";
        stack1 = ((helper = (helper = helpers.is_vertical || (depth0 != null ? depth0.is_vertical : depth0)) != null ? helper : alias2),(options={"name":"is_vertical","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.is_vertical) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "\n     viewBox=\"0 0 1280 1280\" enable-background=\"new 0 0 1280 1280\" xml:space=\"preserve\">\n        <g id=\"bg\">\n            <rect fill=\"#9BC9D4\" width=\"1280\" height=\"936\"/>\n            <rect y=\"914\" fill=\"#72A862\" width=\"1280\" height=\"366\"/>\n        </g>\n        <g class=\"sky\">\n            <g class=\"cloud\">\n                <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#FFFFFF\" d=\"M199.331,430.797c-1.287-7.37,0.87-13.442,7.053-17.595\n                    c6.536-4.389,13.351-4.055,19.751-0.271c2.852-3.395,5.261-7.127,8.479-9.933c10.082-8.788,21.739-10.796,34.015-5.625\n                    c12.268,5.165,18.91,14.864,19.809,28.24c0.138,2.053,0.498,3.153,2.718,3.989c10.525,3.957,17.133,16.158,15.34,27.738\n                    c-1.622,10.467-6.968,17.88-17.418,20.954c-1.912,0.562-4,0.732-6.006,0.735c-26.073,0.048-52.145,0.045-78.218,0.025\n                    c-12.834-0.009-22.492-8.336-24.433-20.987c-1.78-11.604,5.839-23.202,17.576-26.768\n                    C198.429,431.171,198.845,430.982,199.331,430.797z\"/>\n                <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#F2F2F2\" d=\"M405.854,465.442c11.737,3.564,19.356,15.162,17.576,26.766\n                    c-1.941,12.653-11.599,20.979-24.433,20.987c-26.073,0.021-73.944,0.023-100.018-0.024c-2.007-0.003-4.094-0.174-6.006-0.736\n                    c-10.45-3.073-15.797-10.487-17.418-20.953c-1.794-11.58,4.814-23.782,15.339-27.739c2.22-0.835,2.58-1.937,2.718-3.989\n                    c0.898-13.375,7.541-23.073,19.809-28.24c12.276-5.169,38.33-10.775,55.814,5.626c3.219,2.805,5.628,6.538,8.479,9.933\n                    c6.401-3.783,13.215-4.117,19.751,0.271c6.183,4.151,8.339,10.226,7.052,17.594C405.006,465.122,405.421,465.311,405.854,465.442z\n                    \"/>\n            </g>\n            <circle class=\"sun\" fill=\"#FFD300\" cx=\"897.401\" cy=\"443.524\" r=\"97.165\"/>\n        </g>\n        <g class=\"mountain\">\n            <polygon class=\"small\" fill=\"#927983\" points=\"657.588,914 842.176,594.252 1026.777,914\"/>\n            <g class=\"big\">\n                <g>\n                    <polygon fill=\"#735C65\" points=\"331.002,914 613.958,423.855 896.934,914\"/>\n                </g>\n                <polygon fill=\"#FEFEFE\" points=\"606.685,610.174 649.338,552.498 710.109,590.374 710.109,590.374 613.958,423.827\n                    518.706,588.824 573.51,560.886\"/>\n            </g>\n            <g class=\"trees\">\n                <g>\n                    <rect x=\"357\" y=\"978\" fill=\"#A76743\" width=\"8\" height=\"34\"/>\n                    <polygon fill=\"#858651\" points=\"329.142,995 363.145,936.109 397.153,995\"/>\n                </g>\n                <g>\n                    <rect x=\"272\" y=\"948\" fill=\"#A76743\" width=\"8\" height=\"34\"/>\n                    <polygon fill=\"#858651\" points=\"244.142,965 278.145,906.109 312.153,965\"/>\n                </g>\n                <g>\n                    <rect x=\"225\" y=\"957\" fill=\"#A76743\" width=\"9\" height=\"33\"/>\n                    <polygon fill=\"#009245\" points=\"195.77,973 230.921,912.12 266.08,973\"/>\n                </g>\n                <g>\n                    <rect x=\"310\" y=\"987\" fill=\"#A76743\" width=\"9\" height=\"33\"/>\n                    <polygon fill=\"#009245\" points=\"280.77,1003 315.922,942.12 351.08,1003\"/>\n                </g>\n            </g>\n        </g>\n        <g class=\"text\">\n            <g>\n                <g>\n                    <g>\n                        <g>\n                            <path fill=\"#FFFFFF\" d=\"M451.408,822.89V710.513h25.784c9.459,0,16.877,0.437,22.24,1.296\n                                c5.368,0.872,9.984,2.268,13.848,4.197c8.138,4.021,14.316,10.341,18.542,18.962c4.217,8.621,6.334,19.236,6.334,31.85\n                                c0,12.668-2.123,23.314-6.375,31.964c-4.245,8.655-10.416,14.86-18.501,18.617c-4.02,1.936-8.834,3.333-14.458,4.196\n                                c-5.619,0.867-12.832,1.295-21.63,1.295H451.408z M456.745,818.087h21.671c8.437,0,15.177-0.448,20.219-1.34\n                                c5.028-0.884,9.454-2.324,13.275-4.304c6.709-3.546,11.844-9.242,15.411-17.078c3.555-7.826,5.339-17.384,5.339-28.661\n                                c0-9.495-1.249-17.736-3.74-24.712c-2.491-6.948-6.207-12.621-11.135-16.995c-3.918-3.496-8.729-5.992-14.423-7.46\n                                c-5.697-1.483-14.014-2.211-24.947-2.211h-21.671V818.087z\"/>\n                            <path fill=\"#FFFFFF\" d=\"M556.994,822.89v-81.098h5.036v14.575c2.039-5.389,5.088-9.449,9.156-12.169\n                                c4.073-2.721,9.084-4.082,15.029-4.082v4.805c-8.751,0.355-14.964,3.406-18.651,9.156c-3.69,5.747-5.534,15.57-5.534,29.452\n                                v39.36H556.994z\"/>\n                            <path fill=\"#FFFFFF\" d=\"M664.566,823.35c-0.558,0.052-1.317,0.142-2.288,0.268c-0.967,0.131-1.675,0.188-2.136,0.188\n                                c-3.711,0-6.404-1.14-8.085-3.429c-1.679-2.29-2.519-6.028-2.519-11.213c-3.259,5.035-7.693,8.923-13.317,11.672\n                                c-5.614,2.747-12.063,4.116-19.333,4.116c-7.224,0-13.056-2.095-17.51-6.293c-4.452-4.19-6.676-9.701-6.676-16.517\n                                c0-7.176,2.445-12.643,7.324-16.403c4.881-3.765,13.224-6.484,25.023-8.163c2.083-0.302,4.911-0.656,8.469-1.07\n                                c10.683-1.225,16.021-3.994,16.021-8.314v-6.867c0-5.488-1.887-9.7-5.647-12.623c-3.756-2.926-9.181-4.389-16.249-4.389\n                                c-8.084,0-14.452,1.755-19.109,5.261c-4.656,3.515-7.188,8.469-7.592,14.879h-4.654c0.303-7.576,3.217-13.551,8.739-17.93\n                                c5.518-4.373,12.901-6.555,22.156-6.555c5.647,0,10.494,0.785,14.539,2.36c4.04,1.576,7.136,3.894,9.269,6.942\n                                c1.219,1.778,2.098,3.801,2.628,6.064c0.533,2.262,0.802,5.838,0.802,10.721v3.436v36.082c0,5.747,0.511,9.529,1.528,11.333\n                                c1.017,1.801,2.899,2.704,5.648,2.704c0.502,0,1.349-0.069,2.513-0.228c0.211-0.049,0.358-0.077,0.457-0.077V823.35z\n                                 M649.539,776.506c-1.267,1.732-6.971,3.181-17.086,4.35c-1.627,0.206-2.903,0.361-3.817,0.457\n                                c-11.546,1.479-19.572,3.727-24.073,6.752c-4.499,3.027-6.753,7.446-6.753,13.238c0,6,1.784,10.63,5.346,13.886\n                                c3.56,3.25,8.62,4.884,15.179,4.884c4.38,0,8.583-0.698,12.626-2.103c4.042-1.401,7.541-3.343,10.493-5.836\n                                c3.002-2.645,5.095-5.604,6.289-8.887c1.202-3.281,1.797-8.197,1.797-14.76V776.506z\"/>\n                            <path fill=\"#FFFFFF\" d=\"M740.171,805.573c-2.689,6.26-6.724,11.105-12.083,14.537c-5.37,3.431-11.663,5.147-18.887,5.147\n                                c-10.94,0-19.587-3.812-25.941-11.44c-6.354-7.632-9.538-18.036-9.538-31.207c0-13.228,3.194-23.612,9.573-31.163\n                                c6.387-7.558,15.122-11.331,26.215-11.331c7.37,0,13.769,1.751,19.186,5.26c5.414,3.514,9.246,8.373,11.476,14.577v-18.161\n                                h4.81v76.754c0,6.152-0.394,10.845-1.181,14.074c-0.792,3.231-2.099,6.192-3.927,8.886c-3.16,4.632-7.48,8.131-12.974,10.492\n                                c-5.496,2.371-12,3.544-19.533,3.544c-9.154,0-16.474-2.167-21.967-6.522c-5.498-4.343-8.292-10.13-8.395-17.354h4.732\n                                c0.299,6.1,2.82,10.887,7.552,14.341c4.733,3.46,11.164,5.188,19.297,5.188c6.767,0,12.481-1.153,17.13-3.467\n                                c4.654-2.316,8.272-5.761,10.871-10.342c1.277-2.284,2.192-4.957,2.75-8.007c0.563-3.052,0.834-8.243,0.834-15.562V805.573z\n                                 M740.171,782.61c0-11.854-2.744-21.169-8.237-27.966c-5.488-6.783-12.974-10.175-22.424-10.175\n                                c-9.459,0-16.95,3.392-22.473,10.175c-5.519,6.797-8.278,16.112-8.278,27.966c0,11.798,2.76,21.099,8.278,27.883\n                                c5.522,6.793,13.014,10.187,22.473,10.187c9.45,0,16.936-3.394,22.424-10.187C737.427,803.709,740.171,794.408,740.171,782.61z\n                                \"/>\n                        </g>\n                        <g>\n                            <path fill=\"#FFFFFF\" d=\"M618.807,833.938v110.425h-4.725v-17.729c-2.557,6.515-6.405,11.457-11.534,14.84\n                                c-5.132,3.38-11.357,5.073-18.669,5.073c-10.916,0-19.518-3.737-25.803-11.197c-6.283-7.46-9.429-17.682-9.429-30.656\n                                c0-12.97,3.157-23.184,9.466-30.646c6.306-7.46,14.898-11.194,25.766-11.194c7.212,0,13.459,1.683,18.738,5.035\n                                c5.292,3.358,9.109,8.086,11.465,14.199v-48.15H618.807z M614.082,904.694c0-11.662-2.711-20.839-8.116-27.523\n                                c-5.41-6.684-12.768-10.029-22.087-10.029c-9.31,0-16.688,3.346-22.121,10.029c-5.43,6.685-8.151,15.861-8.151,27.523\n                                c0,11.626,2.722,20.776,8.151,27.466c5.434,6.687,12.811,10.03,22.121,10.03c9.319,0,16.677-3.344,22.087-10.03\n                                C611.371,925.471,614.082,916.32,614.082,904.694z\"/>\n                            <path fill=\"#FFFFFF\" d=\"M640.144,944.363V864.51h4.958v14.352c2-5.31,5.007-9.309,9.02-11.98\n                                c4.002-2.687,8.936-4.026,14.789-4.026v4.739c-8.611,0.346-14.729,3.354-18.362,9.013c-3.63,5.659-5.446,15.324-5.446,29.001\n                                v38.756H640.144z\"/>\n                            <path fill=\"#FFFFFF\" d=\"M676.802,904.694c0-12.97,3.137-23.184,9.396-30.646c6.262-7.46,14.815-11.194,25.689-11.194\n                                c10.863,0,19.451,3.734,25.766,11.194c6.309,7.462,9.465,17.676,9.465,30.646c0,12.928-3.156,23.131-9.465,30.616\n                                c-6.314,7.487-14.902,11.237-25.766,11.237c-10.874,0-19.428-3.737-25.689-11.197\n                                C679.938,927.891,676.802,917.669,676.802,904.694z M681.759,904.694c0,11.626,2.697,20.776,8.081,27.466\n                                c5.382,6.687,12.733,10.03,22.047,10.03c9.314,0,16.692-3.344,22.159-10.03c5.454-6.689,8.188-15.84,8.188-27.466\n                                c0-11.662-2.733-20.839-8.188-27.523c-5.467-6.684-12.845-10.029-22.159-10.029c-9.313,0-16.665,3.346-22.047,10.029\n                                C684.456,883.855,681.759,893.032,681.759,904.694z\"/>\n                            <path fill=\"#FFFFFF\" d=\"M764.475,976.065V864.51h4.957v18.325c2.55-6.55,6.367-11.529,11.449-14.912\n                                c5.083-3.374,11.309-5.068,18.671-5.068c10.916,0,19.519,3.722,25.802,11.161c6.283,7.437,9.428,17.66,9.428,30.679\n                                c0,12.928-3.156,23.131-9.463,30.616c-6.312,7.487-14.901,11.237-25.767,11.237c-7.27,0-13.485-1.674-18.671-5.002\n                                c-5.177-3.327-9-8.128-11.449-14.383v48.902H764.475z M769.432,904.694c0,11.626,2.685,20.776,8.073,27.466\n                                c5.382,6.687,12.728,10.03,22.047,10.03c9.368,0,16.764-3.344,22.196-10.03c5.437-6.689,8.145-15.84,8.145-27.466\n                                c0-11.662-2.708-20.839-8.145-27.523c-5.433-6.684-12.828-10.029-22.196-10.029c-9.319,0-16.665,3.346-22.047,10.029\n                                C772.116,883.855,769.432,893.032,769.432,904.694z M778.844,874.899h-4.958v-20.423h4.958v10.627\"/>\n                        </g>\n                    </g>\n                    <g>\n                        <path fill=\"#FFFFFF\" d=\"M488.177,891.47l16.338,19.965c1.273-2.285,2.26-4.757,2.96-7.414c0.703-2.652,1.167-5.565,1.387-8.73\n                            h13.9c-0.305,5.098-1.219,9.895-2.73,14.394c-1.516,4.508-3.68,8.738-6.493,12.683l17.986,21.741h-18.907l-8.233-10.144\n                            c-3.865,4.215-8.271,7.367-13.211,9.457c-4.941,2.084-10.463,3.127-16.568,3.127c-8.258,0-15.079-2.7-20.452-8.098\n                            c-5.381-5.405-8.074-12.238-8.074-20.497c0-5.973,1.67-11.198,5.005-15.675c3.335-4.481,8.918-8.945,16.736-13.377\n                            c-3.782-4.478-6.403-8.301-7.878-11.462c-1.467-3.164-2.204-6.39-2.204-9.678c0-6.597,2.204-11.953,6.621-16.077\n                            c4.417-4.135,10.197-6.195,17.362-6.195c7.241,0,12.967,1.902,17.157,5.699c4.199,3.791,6.296,8.95,6.296,15.447\n                            c0,4.964-1.385,9.476-4.148,13.541C498.256,884.238,493.975,888.005,488.177,891.47z M496.146,923.749l-20.488-25.101\n                            c-5.005,2.903-8.637,5.809-10.898,8.731c-2.265,2.926-3.395,6.164-3.395,9.721c0,4.656,1.494,8.475,4.478,11.463\n                            c2.989,2.986,6.848,4.481,11.592,4.481c3.384,0,6.683-0.804,9.886-2.408C490.527,929.029,493.47,926.736,496.146,923.749z\n                             M480.534,882.581c3.87-2.372,6.723-4.809,8.566-7.319c1.844-2.501,2.764-5.22,2.764-8.161c0-3.075-0.88-5.519-2.633-7.322\n                            c-1.755-1.793-4.125-2.695-7.118-2.695c-3.291,0-5.862,0.854-7.704,2.567c-1.849,1.714-2.765,4.042-2.765,6.985\n                            c0,2.281,0.666,4.644,2.005,7.08C474.992,876.153,477.288,879.109,480.534,882.581z\"/>\n                    </g>\n                    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#FFFFFF\" d=\"M847.512,789.331c-2.453-0.247-4.932-0.68-7.282-1.405\n                        c-3.089-0.95-3.977-3.455-2.442-6.312c0.581-1.081,1.389-2.051,2.167-3.01c1.868-2.301,3.08-4.871,3.45-7.829\n                        c0.618-4.937,0.148-9.783-1.248-14.536c-2.104-7.146-2.537-14.366-1.257-21.713c4.244-24.352,27.95-41.397,52.297-37.578\n                        c24.851,3.898,41.795,25.813,39.293,50.819c-1.818,18.158-14.807,34.036-32.273,39.242c-10.099,3.011-20.497,3.871-31.021,4.237\n                        C861.965,790.618,854.731,790.055,847.512,789.331z M891.669,729.427c-0.023-3.225-2.114-5.452-4.878-5.321\n                        c-2.529,0.123-4.386,2.175-4.404,5.005c-0.033,5.825-0.009,11.65-0.009,18.033c-2.742-2.657-5.107-4.986-7.514-7.269\n                        c-2.413-2.288-5.22-2.416-7.195-0.39c-1.981,2.035-1.779,4.809,0.569,7.188c4.741,4.803,9.487,9.601,14.259,14.369\n                        c3.143,3.139,5.49,3.101,8.572-0.144c4.7-4.951,9.399-9.903,14.021-14.928c1.76-1.913,1.771-4.17,0.335-6.074\n                        c-1.264-1.676-3.67-2.4-5.519-1.436c-0.99,0.517-1.834,1.375-2.63,2.191c-1.72,1.764-3.364,3.6-5.042,5.405\n                        c-0.185-0.06-0.369-0.119-0.557-0.18C891.678,740.395,891.705,734.911,891.669,729.427z\"/>\n                    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#FFFFFF\" d=\"M766.341,867.598c-22.604,3.208-49.405-2.221-62.396-12.645\n                        c1.058-0.108,1.926-0.221,2.798-0.284c18.194-1.316,31.799-9.829,40.496-25.936c4.403-8.155,7.064-16.924,8.071-26.1\n                        c0.833-7.603,1.581-15.161,4.448-22.354c6.238-15.649,19.772-25.348,36.579-23.165c10.56,1.371,18.463,7.979,20.56,18.397\n                        c0.647,3.222,0.792,6.544,1.185,9.959c3.326,0.272,6.612,0.539,10.29,0.837c-0.592,0.512-0.838,0.748-1.108,0.955\n                        c-5.374,4.101-8.685,8.854-9.513,16.19c-2.904,25.753-14.197,46.524-38.134,58.827 M803.558,786.809\n                        c3.398,0.116,6.273-2.629,6.279-5.999c0.007-3.24-2.726-6.021-5.974-6.079c-3.238-0.057-6.035,2.654-6.1,5.909\n                        C797.699,784.001,800.231,786.696,803.558,786.809z\"/>\n                </g>\n                <g>\n                    <path fill=\"#FFFFFF\" d=\"M490.413,957.762h2.495v40.48h-2.495V957.762z\"/>\n                    <path fill=\"#FFFFFF\" d=\"M499.71,969.101h2.155v5.953h0.112c0.227-0.906,0.625-1.766,1.191-2.58\n                        c0.567-0.812,1.256-1.521,2.069-2.125c0.812-0.604,1.72-1.077,2.722-1.417c1.001-0.341,2.05-0.511,3.146-0.511\n                        c1.398,0,2.609,0.179,3.629,0.539c1.02,0.357,1.89,0.831,2.608,1.416c0.717,0.587,1.284,1.249,1.701,1.986\n                        c0.416,0.735,0.699,1.481,0.851,2.236h0.113c0.87-2.04,2.032-3.58,3.488-4.618c1.454-1.039,3.373-1.56,5.753-1.56\n                        c1.323,0,2.542,0.198,3.657,0.595c1.114,0.397,2.078,1.003,2.892,1.814c0.812,0.814,1.445,1.843,1.898,3.09\n                        c0.454,1.247,0.681,2.721,0.681,4.422v19.9h-2.155v-19.957c0-1.852-0.283-3.307-0.85-4.365c-0.568-1.058-1.238-1.862-2.013-2.409\n                        c-0.775-0.548-1.551-0.89-2.324-1.022c-0.775-0.13-1.371-0.196-1.786-0.196c-1.323,0-2.542,0.227-3.656,0.681\n                        c-1.116,0.452-2.079,1.133-2.892,2.04c-0.813,0.907-1.446,2.031-1.899,3.374c-0.454,1.341-0.68,2.884-0.68,4.619v17.236h-2.154\n                        v-19.957c0-1.813-0.274-3.259-0.822-4.336c-0.549-1.079-1.19-1.88-1.928-2.41c-0.737-0.529-1.493-0.869-2.267-1.021\n                        c-0.776-0.15-1.389-0.227-1.843-0.227c-1.02,0-2.079,0.208-3.174,0.622c-1.097,0.416-2.098,1.06-3.004,1.93\n                        c-0.908,0.868-1.645,1.983-2.212,3.345c-0.567,1.359-0.849,2.965-0.849,4.817v17.236h-2.155V969.101z\"/>\n                    <path fill=\"#FFFFFF\" d=\"M564.113,992.458H564c-0.34,0.87-0.833,1.693-1.475,2.466c-0.643,0.776-1.427,1.467-2.353,2.071\n                        c-0.927,0.604-1.975,1.076-3.146,1.416c-1.172,0.341-2.458,0.51-3.855,0.51c-3.1,0-5.499-0.672-7.2-2.013\n                        c-1.701-1.34-2.552-3.41-2.552-6.208c0-1.701,0.342-3.088,1.021-4.166c0.68-1.078,1.54-1.929,2.579-2.552\n                        c1.04-0.623,2.192-1.066,3.458-1.332c1.267-0.265,2.485-0.452,3.657-0.566l3.344-0.284c1.55-0.114,2.769-0.292,3.658-0.539\n                        c0.887-0.244,1.559-0.584,2.012-1.02c0.454-0.434,0.737-0.992,0.851-1.672c0.113-0.682,0.169-1.531,0.169-2.552\n                        c0-0.795-0.151-1.53-0.453-2.211c-0.304-0.68-0.775-1.285-1.418-1.815c-0.642-0.529-1.474-0.943-2.493-1.246\n                        c-1.021-0.304-2.269-0.453-3.743-0.453c-2.607,0-4.715,0.644-6.321,1.928c-1.608,1.285-2.486,3.229-2.637,5.84h-2.153\n                        c0.15-3.213,1.18-5.623,3.088-7.229c1.909-1.605,4.621-2.409,8.137-2.409c3.515,0,6.075,0.689,7.682,2.067\n                        c1.606,1.382,2.41,3.186,2.41,5.417v16.95c0,0.416,0.009,0.831,0.027,1.246c0.019,0.419,0.086,0.795,0.199,1.136\n                        c0.112,0.34,0.301,0.614,0.567,0.821c0.265,0.208,0.642,0.312,1.133,0.312c0.378,0,0.908-0.058,1.588-0.17v1.814\n                        c-0.567,0.152-1.153,0.228-1.757,0.228c-0.87,0-1.559-0.114-2.069-0.342s-0.898-0.53-1.163-0.905\n                        c-0.264-0.38-0.444-0.823-0.539-1.334c-0.095-0.51-0.142-1.065-0.142-1.674V992.458z M564.113,981.686\n                        c-0.529,0.644-1.333,1.079-2.409,1.305c-1.077,0.228-2.277,0.396-3.6,0.511l-3.628,0.34c-1.059,0.113-2.117,0.273-3.175,0.482\n                        c-1.059,0.208-2.013,0.558-2.863,1.048c-0.85,0.493-1.541,1.163-2.069,2.014c-0.529,0.851-0.793,1.956-0.793,3.315\n                        c0,2.155,0.68,3.753,2.042,4.79c1.359,1.042,3.231,1.561,5.612,1.561c2.456,0,4.402-0.444,5.838-1.332\n                        c1.438-0.888,2.533-1.907,3.289-3.062c0.757-1.152,1.237-2.268,1.446-3.346c0.208-1.075,0.312-1.802,0.312-2.181V981.686z\"/>\n                    <path fill=\"#FFFFFF\" d=\"M597.165,969.101v27.61c0,1.625-0.188,3.202-0.565,4.733c-0.378,1.53-1.027,2.882-1.951,4.055\n                        c-0.925,1.169-2.197,2.105-3.818,2.804c-1.621,0.7-3.677,1.051-6.165,1.051c-1.546,0-2.998-0.163-4.354-0.483\n                        c-1.357-0.32-2.545-0.832-3.564-1.531c-1.018-0.697-1.838-1.623-2.459-2.776c-0.622-1.153-0.971-2.58-1.046-4.28h2.154\n                        c0.113,1.284,0.434,2.383,0.965,3.288c0.528,0.906,1.217,1.653,2.068,2.238c0.851,0.587,1.805,1.013,2.863,1.277\n                        s2.191,0.396,3.401,0.396c2.003,0,3.675-0.301,5.018-0.906c1.34-0.605,2.409-1.39,3.202-2.352\n                        c0.794-0.966,1.352-2.062,1.673-3.289c0.32-1.229,0.481-2.467,0.481-3.713v-6.691h-0.165c-1.02,2.156-2.404,3.799-4.159,4.933\n                        c-1.753,1.134-3.874,1.702-6.362,1.702c-2.15,0-4.008-0.371-5.573-1.106c-1.564-0.738-2.867-1.759-3.903-3.061\n                        c-1.038-1.306-1.811-2.825-2.32-4.563s-0.763-3.63-0.763-5.67c0-1.929,0.273-3.762,0.821-5.501\n                        c0.547-1.736,1.351-3.259,2.409-4.563c1.058-1.304,2.372-2.342,3.94-3.118c1.569-0.772,3.374-1.161,5.414-1.161\n                        c2.305,0,4.431,0.585,6.378,1.756c1.947,1.174,3.336,2.836,4.167,4.99h0.114v-6.066H597.165z M584.409,970.292\n                        c-1.776,0-3.316,0.359-4.62,1.076c-1.304,0.72-2.381,1.664-3.232,2.834c-0.85,1.173-1.493,2.505-1.926,3.999\n                        c-0.436,1.491-0.653,3.014-0.653,4.563c0,1.699,0.217,3.315,0.653,4.848c0.433,1.531,1.095,2.862,1.983,3.996\n                        s1.984,2.032,3.29,2.691c1.303,0.664,2.806,0.992,4.506,0.992c1.776,0,3.325-0.338,4.649-1.02\n                        c1.322-0.682,2.428-1.606,3.317-2.777c0.887-1.172,1.548-2.506,1.984-3.997c0.434-1.492,0.652-3.072,0.652-4.733\n                        c0-1.625-0.218-3.194-0.652-4.705c-0.436-1.513-1.097-2.845-1.984-3.998c-0.889-1.151-1.995-2.07-3.317-2.75\n                        C587.734,970.633,586.186,970.292,584.409,970.292z\"/>\n                    <path fill=\"#FFFFFF\" d=\"M604.364,983.954v0.34c0,1.7,0.227,3.328,0.682,4.876c0.455,1.551,1.126,2.91,2.018,4.081\n                        c0.891,1.174,2.008,2.099,3.354,2.778c1.345,0.682,2.908,1.021,4.689,1.021c2.918,0,5.23-0.765,6.935-2.297\n                        c1.705-1.53,2.882-3.656,3.526-6.378h2.153c-0.643,3.402-2.031,6.01-4.166,7.824c-2.136,1.814-4.961,2.721-8.476,2.721\n                        c-2.155,0-4.036-0.389-5.642-1.162c-1.605-0.773-2.947-1.832-4.024-3.176c-1.077-1.34-1.88-2.929-2.409-4.76\n                        c-0.53-1.833-0.793-3.807-0.793-5.925c0-2.042,0.274-3.999,0.822-5.868c0.548-1.872,1.369-3.515,2.466-4.933\n                        c1.095-1.417,2.466-2.551,4.11-3.401c1.645-0.851,3.581-1.275,5.811-1.275c2.041,0,3.847,0.378,5.415,1.134\n                        c1.568,0.755,2.881,1.786,3.939,3.091c1.058,1.304,1.861,2.814,2.41,4.535c0.548,1.72,0.821,3.562,0.821,5.525\n                        c0,0.191-0.009,0.407-0.026,0.653c-0.022,0.246-0.029,0.445-0.029,0.595H604.364z M625.793,982.084\n                        c-0.075-1.589-0.339-3.091-0.794-4.508c-0.456-1.418-1.128-2.665-2.019-3.74c-0.89-1.079-1.971-1.937-3.239-2.58\n                        c-1.271-0.644-2.72-0.964-4.349-0.964c-1.744,0-3.279,0.329-4.604,0.991c-1.328,0.661-2.446,1.531-3.354,2.608\n                        c-0.91,1.077-1.611,2.334-2.104,3.77c-0.493,1.438-0.795,2.912-0.909,4.423H625.793z\"/>\n                    <path fill=\"#FFFFFF\" d=\"M650.909,957.762v17.575h0.114c0.376-1.096,0.916-2.07,1.614-2.92c0.7-0.851,1.513-1.578,2.438-2.182\n                        c0.925-0.605,1.938-1.059,3.032-1.361c1.098-0.303,2.212-0.453,3.345-0.453c1.703,0,3.147,0.209,4.338,0.623\n                        c1.191,0.416,2.164,0.964,2.921,1.645c0.755,0.68,1.35,1.446,1.786,2.296c0.433,0.852,0.745,1.711,0.935,2.579\n                        c0.187,0.87,0.301,1.712,0.34,2.523c0.038,0.813,0.057,1.521,0.057,2.125v18.03h-2.153v-18.427c0-0.717-0.059-1.624-0.173-2.72\n                        c-0.11-1.097-0.442-2.146-0.989-3.146c-0.549-1.002-1.381-1.861-2.497-2.581c-1.114-0.717-2.654-1.076-4.618-1.076\n                        c-1.663,0-3.139,0.303-4.423,0.905c-1.286,0.606-2.38,1.448-3.289,2.524c-0.905,1.077-1.597,2.362-2.069,3.854\n                        c-0.472,1.494-0.708,3.128-0.708,4.905v15.761h-2.154v-40.48H650.909z\"/>\n                    <path fill=\"#FFFFFF\" d=\"M678.973,983.954v0.34c0,1.7,0.228,3.328,0.683,4.876c0.453,1.551,1.125,2.91,2.018,4.081\n                        c0.89,1.174,2.007,2.099,3.353,2.778c1.346,0.682,2.908,1.021,4.689,1.021c2.918,0,5.23-0.765,6.936-2.297\n                        c1.706-1.53,2.88-3.656,3.525-6.378h2.153c-0.644,3.402-2.031,6.01-4.166,7.824c-2.136,1.814-4.961,2.721-8.477,2.721\n                        c-2.153,0-4.035-0.389-5.641-1.162c-1.606-0.773-2.947-1.832-4.024-3.176c-1.078-1.34-1.881-2.929-2.41-4.76\n                        c-0.528-1.833-0.793-3.807-0.793-5.925c0-2.042,0.273-3.999,0.822-5.868c0.547-1.872,1.368-3.515,2.466-4.933\n                        c1.096-1.417,2.466-2.551,4.109-3.401c1.645-0.851,3.581-1.275,5.812-1.275c2.04,0,3.847,0.378,5.414,1.134\n                        c1.568,0.755,2.882,1.786,3.939,3.091c1.06,1.304,1.861,2.814,2.412,4.535c0.545,1.72,0.82,3.562,0.82,5.525\n                        c0,0.191-0.011,0.407-0.027,0.653c-0.021,0.246-0.029,0.445-0.029,0.595H678.973z M700.402,982.084\n                        c-0.076-1.589-0.34-3.091-0.796-4.508c-0.456-1.418-1.129-2.665-2.017-3.74c-0.892-1.079-1.972-1.937-3.241-2.58\n                        c-1.271-0.644-2.721-0.964-4.349-0.964c-1.744,0-3.278,0.329-4.604,0.991c-1.327,0.661-2.446,1.531-3.355,2.608\n                        s-1.608,2.334-2.103,3.77c-0.493,1.438-0.797,2.912-0.909,4.423H700.402z\"/>\n                    <path fill=\"#FFFFFF\" d=\"M709.756,975.563h0.169c0.265-0.943,0.748-1.833,1.447-2.664c0.7-0.83,1.548-1.549,2.551-2.154\n                        c1.002-0.604,2.115-1.067,3.344-1.389c1.23-0.322,2.506-0.463,3.828-0.425v2.153c-1.133-0.149-2.429-0.037-3.883,0.34\n                        c-1.455,0.379-2.845,1.211-4.168,2.495c-0.528,0.567-0.991,1.114-1.389,1.644c-0.396,0.529-0.728,1.116-0.991,1.758\n                        c-0.265,0.643-0.475,1.36-0.625,2.154c-0.151,0.794-0.245,1.739-0.283,2.835v15.932h-2.154v-29.142h2.154V975.563z\"/>\n                    <path fill=\"#FFFFFF\" d=\"M723.477,983.954v0.34c0,1.7,0.227,3.328,0.683,4.876c0.454,1.551,1.126,2.91,2.018,4.081\n                        c0.89,1.174,2.008,2.099,3.354,2.778c1.344,0.682,2.908,1.021,4.689,1.021c2.918,0,5.23-0.765,6.935-2.297\n                        c1.705-1.53,2.88-3.656,3.526-6.378h2.153c-0.644,3.402-2.032,6.01-4.166,7.824c-2.136,1.814-4.962,2.721-8.478,2.721\n                        c-2.153,0-4.034-0.389-5.64-1.162c-1.606-0.773-2.948-1.832-4.025-3.176c-1.077-1.34-1.881-2.929-2.409-4.76\n                        c-0.53-1.833-0.794-3.807-0.794-5.925c0-2.042,0.273-3.999,0.823-5.868c0.547-1.872,1.368-3.515,2.465-4.933\n                        c1.095-1.417,2.467-2.551,4.11-3.401s3.58-1.275,5.812-1.275c2.04,0,3.847,0.378,5.414,1.134\n                        c1.568,0.755,2.882,1.786,3.939,3.091c1.059,1.304,1.86,2.814,2.409,4.535c0.547,1.72,0.822,3.562,0.822,5.525\n                        c0,0.191-0.01,0.407-0.028,0.653c-0.02,0.246-0.027,0.445-0.027,0.595H723.477z M744.905,982.084\n                        c-0.074-1.589-0.341-3.091-0.794-4.508c-0.456-1.418-1.127-2.665-2.019-3.74c-0.892-1.079-1.97-1.937-3.241-2.58\n                        c-1.27-0.644-2.719-0.964-4.348-0.964c-1.743,0-3.277,0.329-4.604,0.991c-1.326,0.661-2.444,1.531-3.353,2.608\n                        c-0.912,1.077-1.61,2.334-2.104,3.77c-0.494,1.438-0.798,2.912-0.91,4.423H744.905z\"/>\n                </g>\n            </g>\n        </g>\n    </svg>\n</g>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],150:[function(require,module,exports){
    var BaseView = require('../../../customize/contents/background/backgrounds');

    module.exports = BaseView.extend({
        callbackName: 'callbackAdminBackgrounds'
    });

},{"../../../customize/contents/background/backgrounds":223}],151:[function(require,module,exports){
    var SubCategoriesView = require('./backgrounds');
    var BaseView = require('../../../components/accordion-list/categories-director');
    var CreateMixin = require('../../../components/mixins/create');

    module.exports = Backbone.mixin(BaseView.extend({
        class: 'sub-category backgrounds',
        CategoriesView: SubCategoriesView,
        views: {},

        addNewEvent: function (event, data) {
            this.modalData = new INKIVE.ModalAdminBackground({ data: data });
            this.modal = INKIVE.Modal.modalWindow(this.modalData.getFormHtml(), {
                width: 850,
                headerIcon: 'icon-news',
                headerTitle: 'modal.title.new_background',
                buttons: [{
                    title: INKIVE.TranslateHelper.translate('modal.buttons.create_background'),
                    onClick: _.bind(this.createTemplate, this)
                }]
            });
        },

        loadButtons: function () {
            var deferred = $.Deferred();

            INKIVE.Tool.preloadBackgroundCategories(function () {
                var data = INKIVE.Tool._cache['backgroundCategories'];
                deferred.resolve(_.map(data, function (backgroundCategory) {
                    return { key: backgroundCategory.id, tag: backgroundCategory.name, icon: 'fa fa-ellipsis-v' };
                }));
            });

            return deferred.promise();
        },

        initialize: function () {
            this.createButtonMargin = 31;
            this.modalData = new INKIVE.ModalAdminBackground();
            this.mode = 'template';
            this.addButtonText = 'tool.admin.new_background';
            this.createCallback = $.noop;

            BaseView.prototype.initialize.call(this);
            this.render();
        },

        _render: function () {
            BaseView.prototype._render.apply(this, arguments);
            this.$el.find('.wrapper').css('top', this.createButtonMargin + 'px');
        },

        toggleAcordionElement: function ($button, value) {
            var $container = $button.closest('dt');
            var $wrapper = $container.closest('.wrapper');
            var top = this.createButtonMargin - $container.position().top;

            BaseView.prototype.toggleAcordionElement.apply(this, arguments);
            $wrapper.css('top', value ? top + 'px' : this.createButtonMargin + 'px');
        }
    }), CreateMixin);

},{"../../../components/accordion-list/categories-director":168,"../../../components/mixins/create":176,"./backgrounds":150}],152:[function(require,module,exports){
    var BaseView = require('../sticker/stickersall');

    module.exports = BaseView.extend({

        where: { isText: true },
        idPrefix: 'banner'

    });

},{"../sticker/stickersall":160}],153:[function(require,module,exports){
    var BaseView = require('../../../components/accordion-list/categories-director');
    var SubCategoriesView = require('./stickers');
    var CreateMixin = require('../../../components/mixins/create');

    module.exports = Backbone.mixin(BaseView.extend({
        CategoriesView: SubCategoriesView,
        views: {},

        initialize: function () {
            this.createButtonMargin = 31;
            this.tool = INKIVE.Tool.getInstance();
            this.modalData = new INKIVE.ModalAdminSticker({ isText: true });
            this.mode = 'banner';
            this.addButtonText = 'tool.admin.new_banner';
            this.createCallback = $.noop;

            BaseView.prototype.initialize.call(this);
            this.render();
        },

        _render: function () {
            BaseView.prototype._render.apply(this, arguments);
            this.$el.find('.wrapper').css('top', this.createButtonMargin + 'px');
        },

        addNewEvent: function (event, data) {
            this.modalData = new INKIVE.ModalAdminSticker({ isText: true, data: data });
            this.modal = INKIVE.Modal.modalWindow(this.modalData.getFormHtml(), {
                width: 600,
                headerIcon: 'icon-news',
                headerTitle: 'modal.title.new_banner',
                buttons: [{
                    title: INKIVE.TranslateHelper.translate('modal.buttons.create_banner'),
                    onClick: _.bind(this.createTemplate, this)
                }]
            });
        },

        toggleAcordionElement: function ($button, value) {
            var $container = $button.closest('dt');
            var $wrapper = $container.closest('.wrapper');
            var top = this.createButtonMargin - $container.position().top;
            BaseView.prototype.toggleAcordionElement.apply(this, arguments);
            $wrapper.css('top', value ? top + 'px' : this.createButtonMargin + 'px');
        },

        extractData: function (data) {
            return [];
        }
    }), CreateMixin);

},{"../../../components/accordion-list/categories-director":168,"../../../components/mixins/create":176,"./stickers":152}],154:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data,blockParams,depths) {
        var stack1, helper, options, buffer =
            "            ";
        stack1 = ((helper = (helper = helpers.data || (depth0 != null ? depth0.data : depth0)) != null ? helper : helpers.helperMissing),(options={"name":"data","hash":{},"fn":container.program(2, data, 0, blockParams, depths),"inverse":container.noop,"data":data}),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : {},options) : helper));
        if (!helpers.data) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "\n";
    },"2":function(container,depth0,helpers,partials,data,blockParams,depths) {
        var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

        return "<option value=\""
            + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"id","hash":{},"data":data}) : helper)))
            + "\">"
            + alias4(container.lambda((depths[1] != null ? depths[1].name : depths[1]), depth0))
            + ": "
            + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
            + "</option>";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data,blockParams,depths) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=helpers.blockHelperMissing, buffer =
            "<div class=\"antiscroll-wrap\">\n  <div class=\"antiscroll-inner\">\n    <div class=\"load-process\">\n      <div class=\"select-wrapper\">\n        <select class=\"from-format\">\n          <option value=\"\" disabled selected>From format...</option>\n";
        stack1 = ((helper = (helper = helpers.groups || (depth0 != null ? depth0.groups : depth0)) != null ? helper : alias2),(options={"name":"groups","hash":{},"fn":container.program(1, data, 0, blockParams, depths),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.groups) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += "        </select>\n      </div>\n\n      <div class=\"select-wrapper\">\n        <select class=\"to-format\">\n          <option value=\"\" disabled selected>To format...</option>\n";
        stack1 = ((helper = (helper = helpers.groups || (depth0 != null ? depth0.groups : depth0)) != null ? helper : alias2),(options={"name":"groups","hash":{},"fn":container.program(1, data, 0, blockParams, depths),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.groups) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "        </select>\n      </div>\n      <button class=\"load btn btn-yellow\">Load</button>\n    </div>\n\n    <button class=\"generate btn btn-yellow hidden\">Generate missing</button>\n    <div class=\"progress hidden\"><p class=\"message\"></p></div>\n\n    <ul class=\"thumbnail-wrapper\"></ul>\n  </div>\n</div>\n";
    },"useData":true,"useDepths":true});

},{"hbsfy/runtime":373}],155:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        return "ok";
    },"3":function(container,depth0,helpers,partials,data) {
        var helper;

        return container.escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : {},{"name":"url","hash":{},"data":data}) : helper)));
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression, alias5=helpers.blockHelperMissing, buffer =
            "<div class=\"container\" style=\"height: "
            + alias4(((helper = (helper = helpers.thumb_height || (depth0 != null ? depth0.thumb_height : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"thumb_height","hash":{},"data":data}) : helper)))
            + "px\">\n  <div class=\"wrapper from-format\" style=\"transform: skewX(-"
            + alias4(((helper = (helper = helpers.angle || (depth0 != null ? depth0.angle : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"angle","hash":{},"data":data}) : helper)))
            + "deg);\">\n    <img src=\""
            + alias4(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"url","hash":{},"data":data}) : helper)))
            + "\" style=\"transform: skewX("
            + alias4(((helper = (helper = helpers.angle || (depth0 != null ? depth0.angle : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"angle","hash":{},"data":data}) : helper)))
            + "deg);\">\n  </div>\n\n  <div class=\"wrapper to-format ";
        stack1 = ((helper = (helper = helpers.has_perfect_match || (depth0 != null ? depth0.has_perfect_match : depth0)) != null ? helper : alias2),(options={"name":"has_perfect_match","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.has_perfect_match) { stack1 = alias5.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += "\" style=\"transform: skewX(-"
            + alias4(((helper = (helper = helpers.angle || (depth0 != null ? depth0.angle : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"angle","hash":{},"data":data}) : helper)))
            + "deg);\" >\n    <img src=\"";
        stack1 = ((helper = (helper = helpers.match || (depth0 != null ? depth0.match : depth0)) != null ? helper : alias2),(options={"name":"match","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.match) { stack1 = alias5.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "\" style=\"transform: skewX("
            + alias4(((helper = (helper = helpers.angle || (depth0 != null ? depth0.angle : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"angle","hash":{},"data":data}) : helper)))
            + "deg);\">\n  </div>\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],156:[function(require,module,exports){
    var template = require('./template.hbs');
    var thumbnailTemplate = require('./thumbnail.hbs');
    var ScrollableMixin = require('../../../components/mixins/scrollable');
    var FormatFactory = require('../../../../../factory/formats');
    var DesignFacade = require('../../../../../facade/design/design');
    var resemble = require('../../../../../../../bower_components/resemblejs/resemble.js');
    var EditorModeManager = require('../../../../editor-mode-manager');

    module.exports = Backbone.mixin(Backbone.View.extend({
        mismatchPerfect: 20,
        mismatchSame: 50,
        events: {
            'click button.load': 'loadEvent',
            'click button.generate': 'generateEvent',
            'click li.thumbnail': 'migrateEvent'
        },

        loadEvent: function () {
            var fromFormatId = this.$el.find('select.from-format').val();
            var toFormatId = this.$el.find('select.to-format').val();

            this.$el.find('.load-process').addClass('hidden');
            this.$el.find('.progress').removeClass('hidden');
            INKIVE.Modal.loader(this.$el.find('.progress'));

            $.when(this.loadAllTemplatesByFormat(fromFormatId, 1), this.loadAllTemplatesByFormat(toFormatId, 0)).then(this.preloadThumbnails).then(this.compare).then(this.renderThumbnails).then(_.bind(function () {
                INKIVE.Modal.loaderClose(this.$el.find('.progress'));
                this.$el.find('button.generate').removeClass('hidden');
                this.$el.find('.progress').addClass('hidden');
            }, this));

            $.when(FormatFactory.getFormat(fromFormatId), FormatFactory.getFormat(toFormatId)).then(_.bind(function (fromFormat, toFormat) {
                this.fromFormat = fromFormat;
                this.toFormat = toFormat;
            }, this));
        },

        generateEvent: function () {
            var processTemplate = _.bind(processTemplate, this);
            var templates = _.filter(this.templates, function (template) {
                return !template.match;
            });
            var total = templates.length;

            processTemplate();

            function processTemplate() {
                INKIVE.Modal.togglePageLoader(false);

                if (templates.length) {
                    try {
                        this.generateMatch(templates.pop()).then(processTemplate);
                    } catch (err) {
                        processTemplate();
                    }
                    INKIVE.Modal.togglePageLoader(true, 'Generating matching template ' + (total - templates.length) + ' of ' + total);
                }
            }
        },

        migrateEvent: function (event) {
            var $item = $(event.currentTarget);
            var template = _.findWhere(this.templates, { id: $item.data('templateid') });

            template.match || this.generateMatch(template);
            if (template.match) {
                var modal = INKIVE.Modal.modalWindow('Edit copy or create a new one?', {
                    headerIcon: 'icon-info',
                    headerTitle: 'Migrate template',
                    buttons: [{
                        title: 'Edit current',
                        onClick: _.bind(function () {
                            this.editMatch(template.match);
                            modal.close();
                        }, this)
                    }, {
                        title: 'Create new',
                        onClick: _.bind(function () {
                            this.generateMatch(template);
                            modal.close();
                        }, this)
                    }]
                });
            }
        },

        editMatch: function (template) {
            INKIVE.Helpers.api('search/layout', 'GET', { id: template['id'] }, _.bind(function (result) {
                EditorModeManager.setMode('template', result);
            }, this));
        },

        generateMatch: function (template) {
            return getOriginalTemplateData.call(this).then(_.bind(createAsDifferentFormat, this)).then(_.bind(resizeContent, this)).then(_.bind(save, this)).then(this.updateThumbnail);

            function getOriginalTemplateData() {
                var deferred = $.Deferred();

                INKIVE.Helpers.api('search/layout', 'GET', { id: template['id'] }, function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise();
            }

            function createAsDifferentFormat(data) {
                var deferred = $.Deferred();
                var convertToPixels = INKIVE.Helpers.convertUnitsToPixels;

                var info = {
                    'name': data['name'],
                    'orientation': data['orientation'],
                    'text': data['text'],
                    'isBackground': data['background'] ? 1 : 0,
                    'set': data['set'],
                    'num': data['num'],
                    'active': 0,
                    'format_id': this.toFormat['id'],
                    'format_width': convertToPixels(this.toFormat['width'], this.toFormat['unit']),
                    'format_height': convertToPixels(this.toFormat['height'], this.toFormat['unit']),
                    'tag': data['tag']
                };

                INKIVE.Helpers.api('management/layoutinfo', 'POST', { info: info }, function (result) {
                    if (result && result.status == 'success') deferred.resolve(_.extend(info, { id: result.id }));else deferred.reject();
                });

                return deferred.promise();
            }

            function resizeContent(newTemplateInfo) {
                var deferred = $.Deferred();

                EditorModeManager.setMode('template', newTemplateInfo);
                DesignFacade.once('template.update.designed', function () {
                    deferred.resolve(newTemplateInfo);
                });

                DesignFacade.set('template', {
                    keep_stage_size: true,
                    designed: { id: template['id'] }
                });

                return deferred.promise();
            }

            function save(newTemplateInfo) {
                var deferred = $.Deferred();

                this.tool.save(null, function () {
                    deferred.resolve(template, newTemplateInfo['id']);
                });

                return deferred.promise();
            }
        },

        updateThumbnail: function (oldTemplate, newTemplateId) {
            var deferred = $.Deferred();
            var mismatchTolerance = this.mismatchPerfect;
            var thumbnail = _.find(this.$el.find('ul.thumbnail-wrapper li.thumbnail'), function (thumbnail) {
                return $(thumbnail).data('templateid') == oldTemplate['id'];
            });

            INKIVE.Helpers.api('search/layout', 'GET', { id: newTemplateId }, function (newTemplate) {
                $(thumbnail).find('.to-format img').attr('src', newTemplate['url']);
                oldTemplate.match = newTemplate;

                resemble(oldTemplate['url']).compareTo(newTemplate['url'].replace(/\/\/static\./, '//oregon.')).onComplete(function (data) {
                    var isSimilar = parseFloat(data.misMatchPercentage) < mismatchTolerance;
                    $(thumbnail).find('.to-format').toggleClass('ok', isSimilar);
                    deferred.resolve();
                });
            });

            return deferred.promise();
        },

        loadAllTemplatesByFormat: function (formatId, active) {
            var start = 0;
            var limit = 10;
            var results = [];
            var deferred = $.Deferred();

            loadMore.call(this);

            return deferred.promise();

            function loadMore() {
                var params = {
                    from: start,
                    limit: limit,
                    where: { format: formatId, active: active }
                };

                start += limit;

                this.$el.find('.progress p').text('Loading format ' + formatId + ', page ' + Math.round(start / limit));
                INKIVE.Helpers.api('search/layouts', 'GET', params, _.bind(function (result) {
                    if (result && result.data && result.data.length) {
                        results = _.union(results, result.data);
                        loadMore.call(this);
                    } else deferred.resolve(results);
                }, this));
            }
        },

        preloadThumbnails: function (fromTemplates, toTemplates) {
            var deferred = $.Deferred();
            var thumbnails = {};
            var templates = _.union(fromTemplates, toTemplates);
            var total = templates.length;

            loadMore.call(this);

            return deferred.promise();

            function loadMore() {
                var thumbnailsLoadNumber = templates.length > 3 ? 3 : templates.length;
                var afterPartialLoad = _.after(thumbnailsLoadNumber, _.bind(loadMore, this));
                var percent = Math.round((total - templates.length) / total * 100);

                this.$el.find('.progress p').text('Loading thumbnails ' + percent + '%');
                templates.length || deferred.resolve(fromTemplates, toTemplates, thumbnails);

                while (thumbnailsLoadNumber-- > 0 && templates.length) {
                    var template = templates.pop();

                    if (template['url']) {
                        var image = new Image();
                        image.setAttribute('crossOrigin', 'anonymous');
                        image.src = template['url'];
                        image.onerror = afterPartialLoad;
                        image.onload = function () {
                            _.defer(afterPartialLoad);
                            var canvas = document.createElement('canvas');
                            canvas.width = this.naturalWidth;
                            canvas.height = this.naturalHeight;

                            canvas.getContext('2d').drawImage(this, 0, 0);
                            this.rawData = canvas.toDataURL('image/png');
                        };

                        thumbnails[template['id']] = image;
                    } else afterPartialLoad();
                }
            }
        },

        compare: function (fromTemplates, toTemplates, thumbnails) {
            var fromCopy = _.filter(fromTemplates, isValidTemplate);
            var toCopy = _.filter(toTemplates, isValidTemplate);
            var deferred = $.Deferred();
            var compareTemplate = _.bind(compareTemplate, this);
            var total = fromCopy.length;
            var misMatchPercentages = [];
            var mismatchSame = this.mismatchSame;
            var mismatchPerfect = this.mismatchPerfect;

            compareTemplate();

            return deferred.promise();

            function isValidTemplate(template) {
                return thumbnails[template['id']]; //template && template['url'];
            }

            function compareTemplate() {
                if (!fromCopy.length) {
                    this.templates = _.filter(fromTemplates, isValidTemplate);
                    matchTemplates();
                    return;
                }

                var closest;
                var closestMisMatch = 100;
                var fromId = fromCopy.pop()['id'];
                var afterCompare = _.after(toCopy.length, _.bind(compareTemplate, this));

                var percent = Math.round((total - fromCopy.length) / total * 100);
                this.$el.find('.progress p').text('Matching templates ' + percent + '%');

                toCopy.length || compareTemplate.call(this);
                _.each(toCopy, function (toTemplate) {
                    var toId = toTemplate['id'];
                    var fromData = thumbnails[fromId].rawData;
                    var toData = thumbnails[toId].rawData;

                    if (!fromData || !toData) {
                        _.defer(afterCompare);
                        return;
                    }

                    resemble(fromData).compareTo(toData).onComplete(function (data) {
                        var misMatch = parseFloat(data.misMatchPercentage);
                        misMatch < mismatchSame && misMatchPercentages.push({
                            fromId: fromId,
                            toId: toId,
                            misMatch: misMatch
                        });

                        _.defer(afterCompare);
                    });
                });

                function matchTemplates() {
                    var matchedTo = [];
                    var matchedFrom = [];

                    _.each(_.sortBy(misMatchPercentages, 'misMatch'), function (obj) {
                        var isPendent = !_.contains(matchedTo, obj.toId) && !_.contains(matchedFrom, obj.fromId);

                        if (isPendent) {
                            var template = _.find(fromTemplates, { id: obj.fromId });
                            template['match'] = _.find(toTemplates, { id: obj.toId });
                            template['hasPerfectMatch'] = obj.misMatch < mismatchPerfect;
                            matchedTo.push(obj.toId);
                            matchedFrom.push(obj.fromId);
                        }
                    });

                    deferred.resolve();
                }
            }
        },

        renderThumbnails: function () {
            _.each(this.templates, function (data) {
                if (data['url']) {
                    this.$el.find('ul.thumbnail-wrapper').append($('<li class="thumbnail"></li>').html(this.getThumbnailHTML(data)).data('templateid', data['id']));
                }
            }, this);

            this.initScroll();
        },

        getThumbnailHTML: function (template) {
            var angle = (Math.PI / 2 - Math.atan(this.fromFormat['height'] / this.fromFormat['width'])) / (Math.PI / 180);
            var params = _.extend(extractData(template), { angle: angle });
            if (template['match']) params['match'] = extractData(template['match']);

            return thumbnailTemplate(params);

            function extractData(item) {
                return {
                    url: item['url'],
                    has_perfect_match: item['hasPerfectMatch'],
                    thumb_height: 275 * (item['format_height'] / item['format_width'])
                };
            }
        },

        initialize: function () {
            _.bindAll(this, 'render', 'compare', 'updateThumbnail', 'renderThumbnails', 'preloadThumbnails', 'loadAllTemplatesByFormat');

            FormatFactory.getGroups().then(this.render);
            this.tool = INKIVE.Tool.getInstance();
        },

        render: function (groups) {
            this.$el.html(template({
                groups: groups
            }));
        }
    }), ScrollableMixin);

},{"../../../../../../../bower_components/resemblejs/resemble.js":1,"../../../../../facade/design/design":19,"../../../../../factory/formats":65,"../../../../editor-mode-manager":102,"../../../components/mixins/scrollable":178,"./template.hbs":154,"./thumbnail.hbs":155}],157:[function(require,module,exports){
    var BaseView = require('../sticker/stickersall');

    module.exports = BaseView.extend({

        where: { isPlaceholder: true },
        idPrefix: 'placeholder'

    });

},{"../sticker/stickersall":160}],158:[function(require,module,exports){
    var BaseView = require('../../../components/accordion-list/categories-director');
    var SubCategoriesView = require('./stickers');
    var CreateMixin = require('../../../components/mixins/create');

    module.exports = Backbone.mixin(BaseView.extend({
        class: 'sub-category stickers',
        CategoriesView: SubCategoriesView,
        views: {},

        initialize: function () {
            this.createButtonMargin = 31;
            this.tool = INKIVE.Tool.getInstance();
            this.modalData = new INKIVE.ModalAdminSticker({ isPlaceholder: true });
            this.mode = 'sticker';
            this.addButtonText = 'tool.admin.new_placeholder';
            this.createCallback = $.noop;

            BaseView.prototype.initialize.call(this);
            this.render();
        },

        _render: function () {
            BaseView.prototype._render.apply(this, arguments);
            this.$el.find('.wrapper').css('top', this.createButtonMargin + 'px');
        },

        addNewEvent: function (event, data) {
            this.modalData = new INKIVE.ModalAdminSticker({ isPlaceholder: true, data: data });
            this.modal = INKIVE.Modal.modalWindow(this.modalData.getFormHtml(), {
                width: 600,
                headerIcon: 'icon-news',
                headerTitle: 'modal.title.new_placeholder',
                buttons: [{
                    title: INKIVE.TranslateHelper.translate('modal.buttons.create_placeholder'),
                    onClick: _.bind(this.createTemplate, this)
                }]
            });
        },

        toggleAcordionElement: function ($button, value) {
            var $container = $button.closest('dt');
            var $wrapper = $container.closest('.wrapper');
            var top = this.createButtonMargin - $container.position().top;
            BaseView.prototype.toggleAcordionElement.apply(this, arguments);
            $wrapper.css('top', value ? top + 'px' : this.createButtonMargin + 'px');
        },

        extractData: function (data) {
            return [];
        }
    }), CreateMixin);

},{"../../../components/accordion-list/categories-director":168,"../../../components/mixins/create":176,"./stickers":157}],159:[function(require,module,exports){
    var BaseView = require('../../../customize/contents/sticker/stickers');

    module.exports = BaseView.extend({
        callbackName: 'callbackAdminStickers',

        getParams: function () {
            var params = {
                from: this.from,
                limit: this.limit,
                where: { category: this.category.name, active: INKIVE.C.USER.IS_SUPER ? 0 : 1 }
            };

            this.from += this.limit;

            return params;
        }

    });

},{"../../../customize/contents/sticker/stickers":232}],160:[function(require,module,exports){
    var BaseView = require('../../../components/accordion-list/content');
    var AnalyticsDecorate = require('../../../../../analytics/decorate');

    module.exports = AnalyticsDecorate(require('../../../customize/analytics/stickers'), BaseView.extend({
        apiCall: 'search/stickers',
        dataName: 'stickerCategories',
        callbackName: 'callbackAdminStickers',
        where: {},
        idPrefix: '',

        initialize: function (options) {
            this.category = { id: 0, name: 'All' };
            BaseView.prototype.initialize.call(this, options);
        },

        getScrollHeight: function ($target) {
            return $target.closest('.tool-content').height();
        },

        getParams: function () {
            var params = {
                from: this.from,
                limit: this.limit,
                where: $.extend(this.where, { active: INKIVE.C.USER.IS_SUPER ? 0 : 1 })
            };

            this.from += this.limit;

            return params;
        },

        extractData: function (data) {
            var that = this;
            return _.map(data, function (item) {
                var id = that.idPrefix ? that.idPrefix + "-" : "";
                id += 'sticker-' + item['id'];

                return {
                    id: id,
                    src: item['url'],
                    width: item['width'],
                    height: item['height'],
                    cls: parseInt(item['active']) ? '' : 'grayscale',
                    isNocover: true,
                    data: {
                        name: item['name'],
                        count: item['count'],
                        changeable: item['changeable'],
                        width: item['width'],
                        height: item['height']
                    }
                };
            });
        }
    }));

},{"../../../../../analytics/decorate":4,"../../../components/accordion-list/content":170,"../../../customize/analytics/stickers":220}],161:[function(require,module,exports){
    var SubCategoriesView = require('./stickers');
    var BaseView = require('../../../customize/contents/sticker/view');
    var CreateMixin = require('../../../components/mixins/create');

    module.exports = Backbone.mixin(BaseView.extend({
        CategoriesView: SubCategoriesView,
        views: {},

        initialize: function () {
            this.createButtonMargin = 31;
            this.tool = INKIVE.Tool.getInstance();
            this.modalData = new INKIVE.ModalAdminSticker();
            this.mode = 'sticker';
            this.addButtonText = 'tool.admin.new_sticker';
            this.createCallback = $.noop;

            BaseView.prototype.initialize.call(this);
            this.render();
        },

        _render: function () {
            BaseView.prototype._render.apply(this, arguments);
            this.$el.find('.wrapper').css('top', this.createButtonMargin + 'px');
        },

        addNewEvent: function (event, data) {
            this.modalData = new INKIVE.ModalAdminSticker({ data: data });
            this.modal = INKIVE.Modal.modalWindow(this.modalData.getFormHtml(), {
                width: 600,
                headerIcon: 'icon-news',
                headerTitle: 'modal.title.new_sticker',
                buttons: [{
                    title: INKIVE.TranslateHelper.translate('modal.buttons.create_sticker'),
                    onClick: _.bind(this.createTemplate, this)
                }]
            });
        },

        toggleAcordionElement: function ($button, value) {
            var $container = $button.closest('dt');
            var $wrapper = $container.closest('.wrapper');
            var top = this.createButtonMargin - $container.position().top;
            BaseView.prototype.toggleAcordionElement.apply(this, arguments);
            $wrapper.css('top', value ? top + 'px' : this.createButtonMargin + 'px');
        },

        extractData: function (data) {
            return [];
        }
    }), CreateMixin);

},{"../../../components/mixins/create":176,"../../../customize/contents/sticker/view":233,"./stickers":159}],162:[function(require,module,exports){
    var BaseView = require('../../../templates/sub-categories');

    module.exports = BaseView.extend({
        TemplatesView: require('./templates')
    });

},{"../../../templates/sub-categories":298,"./templates":163}],163:[function(require,module,exports){
    var BaseView = require('../../../templates/templates-base');
    var ContentView = require('../../../components/accordion-list/content');

    module.exports = BaseView.extend({
        callbackName: 'callbackAdminLayouts',
        appendThumbnails: ContentView.prototype.appendThumbnails,

        render: function () {
            BaseView.prototype.render.apply(this, arguments);
            this.$el.find('ul.thumbnail-wrapper').toggleClass('thumbnail-wrapper thumbnailWrapper').css('padding-left', '5px');
        },

        extractData: function (data) {
            var thumbWidth = 270;

            return _.compact(_.map(data, function (item) {
                var fWidth = parseInt(item['format_width']);
                var fHeight = parseInt(item['format_height']);
                var thumbHeight = fHeight / fWidth * thumbWidth;

                if (!item['id']) return;

                return {
                    id: 'layout-' + item['id'],
                    src: item['url'],
                    width: thumbWidth,
                    height: thumbHeight,
                    isNocover: INKIVE.C.USER.IS_SUPER,
                    cls: parseInt(item['active']) ? '' : 'grayscale',
                    data: {
                        count: item['count'],
                        set: item['set'],
                        num: item['num'],
                        orientation: item['orientation'],
                        text: item['text'],
                        active: item['active']
                    }
                };
            }));
        }
    });

},{"../../../components/accordion-list/content":170,"../../../templates/templates-base":299}],164:[function(require,module,exports){
    var SubCategoriesView = require('./sub-categories');
    var BaseView = require('../../../templates/view-base');
    var CreateMixin = require('../../../components/mixins/create');

    module.exports = Backbone.mixin(BaseView.extend({
        CategoriesView: SubCategoriesView,
        views: {},

        addNewEvent: function (event, data) {
            this.modalData = new INKIVE.ModalAdminLayout({ data: data });
            this.modal = INKIVE.Modal.modalWindow(this.modalData.getFormHtml(), {
                width: 500,
                headerIcon: 'icon-news',
                headerTitle: 'modal.title.new_template',
                buttons: [{
                    title: INKIVE.TranslateHelper.translate('modal.buttons.create_template'),
                    onClick: _.bind(this.createTemplate, this)
                }]
            });
        },

        listContentToggleEvent: function (event) {
            BaseView.prototype.listContentToggleEvent.apply(this, arguments);
            event.stopPropagation();
        },

        initialize: function () {
            this.createButtonMargin = 31;
            this.modalData = new INKIVE.ModalAdminLayout();
            this.mode = 'template';
            this.addButtonText = 'tool.admin.new_template';
            this.createCallback = $.noop;

            BaseView.prototype.initialize.call(this);
            this.render();

            this.$el.find('.wrapper').css('top', this.createButtonMargin + 'px');
        },

        toggleAcordionElement: function ($button, value) {
            var $container = $button.closest('dt');
            var $wrapper = $container.closest('.wrapper');
            var top = this.createButtonMargin - $container.position().top;

            BaseView.prototype.toggleAcordionElement.apply(this, arguments);
            $wrapper.css('top', value ? top + 'px' : this.createButtonMargin + 'px');
        },

        extractData: function (data) {
            return [];
        }
    }), CreateMixin);

},{"../../../components/mixins/create":176,"../../../templates/view-base":301,"./sub-categories":162}],165:[function(require,module,exports){
    var BaseView = require('../components/accordion-list/director');

    module.exports = BaseView.extend({
        class: 'admin',
        views: {},
        Views: {
            templates: require('./contents/template/view'),
            backgrounds: require('./contents/background/view'),
            stickers: require('./contents/sticker/view'),
            banners: require('./contents/banners/view'),
            placeholders: require('./contents/placeholders/view'),
            migrate: require('./contents/migrate/view')
        },
        buttons: [{ key: 'templates', tag: 'tool.admin.templates', icon: 'icon-news' }, { key: 'backgrounds', tag: 'tool.admin.backgrounds', icon: 'icon-backgrounds' }, { key: 'stickers', tag: 'tool.admin.stickers', icon: 'icon-hipster' }, { key: 'banners', tag: 'tool.admin.banners', icon: 'icon-font_download' }, { key: 'placeholders', tag: 'tool.admin.placeholders', icon: 'icon-image' }, { key: 'migrate', tag: 'tool.admin.migrate', icon: 'icon-forward' }],

        render: function () {
            var html = this.template({
                class: this.class,
                buttons: this.buttons
            });

            this.$el.html(html);
        }
    });

},{"../components/accordion-list/director":172,"./contents/background/view":151,"./contents/banners/view":153,"./contents/migrate/view":156,"./contents/placeholders/view":158,"./contents/sticker/view":161,"./contents/template/view":164}],166:[function(require,module,exports){
    module.exports = {
        initializeUploadCheckOnce: function () {
            return window.Android;
        },

        initializeUpload: function () {
            var view = this.loadListContent(this.uploadViewKey);
            var globalAppUploadEvent = 'ik.editor.photoupload';
            var $addButton = this.$el.find('dt a[data-key="add"]');
            var debouncedOpenProjectTab = _.debounce(_.bind(openProjectTab, this), 600);
            var $button = this.$el.find('dt a[data-key="' + this.uploadViewKey + '"]');

            this.appBridge.on(globalAppUploadEvent, function (event, data) {
                var id = data.photoId;

                debouncedOpenProjectTab();
                view.views[id] = view.getNewThumbnail();
                view.views[id].toggleProgressBar(true);
                view.views[id].updateProgressBar(1);
                view.complete(id, data);
            });

            $addButton.on('click', _.bind(function (event) {
                var sizeName = 'o';
                this.appBridge.callAndroid('photo_upload', {
                    'size_name': sizeName
                });
            }, this));

            function openProjectTab() {
                this.showListContent($button);
                $button.parent().addClass('active');
            }
        }
    };

},{}],167:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        return "      <div class=\"tool-static-block\" style=\"z-index: 3; position: relative; margin: 0 10px; background: #2B3031;\">\n        <a class=\"btn btn-black btn-new-item\">"
            + container.escapeExpression((helpers.t || (depth0 && depth0.t) || helpers.helperMissing).call(depth0 != null ? depth0 : {},depth0,{"name":"t","hash":{},"data":data}))
            + "</a>\n      </div>\n";
    },"3":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression, alias5=helpers.blockHelperMissing, buffer =
            "        <dt>\n          <a class=\"btn btn-accordion\" data-key=\""
            + alias4(((helper = (helper = helpers.key || (depth0 != null ? depth0.key : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"key","hash":{},"data":data}) : helper)))
            + "\" data-type=\""
            + alias4(((helper = (helper = helpers.type || (depth0 != null ? depth0.type : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"type","hash":{},"data":data}) : helper)))
            + "\">\n            ";
        stack1 = ((helper = (helper = helpers.icon || (depth0 != null ? depth0.icon : depth0)) != null ? helper : alias2),(options={"name":"icon","hash":{},"fn":container.program(4, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.icon) { stack1 = alias5.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += "\n            ";
        stack1 = ((helper = (helper = helpers.image || (depth0 != null ? depth0.image : depth0)) != null ? helper : alias2),(options={"name":"image","hash":{},"fn":container.program(6, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.image) { stack1 = alias5.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "\n            <i class=\"collapse fa fa-chevron-up hidden\"></i>\n            <i class=\"back fa fa-chevron-left hidden\"></i>\n            <span class=\"name\">"
            + alias4((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,(depth0 != null ? depth0.tag : depth0),{"name":"t","hash":{},"data":data}))
            + "</span>\n          </a>\n        </dt>\n";
    },"4":function(container,depth0,helpers,partials,data) {
        return "<i class=\""
            + container.escapeExpression(container.lambda(depth0, depth0))
            + " main\"></i>";
    },"6":function(container,depth0,helpers,partials,data) {
        var alias1=container.escapeExpression;

        return "<img class=\""
            + alias1(container.lambda(depth0, depth0))
            + " main\" src=\""
            + alias1((helpers.route || (depth0 && depth0.route) || helpers.helperMissing).call(depth0 != null ? depth0 : {},depth0,{"name":"route","hash":{},"data":data}))
            + "\"/>";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", buffer =
            "<div class=\"antiscroll-wrap\">\n  <div class=\"antiscroll-inner\">\n    <div class=\"tab-content "
            + container.escapeExpression(((helper = (helper = helpers["class"] || (depth0 != null ? depth0["class"] : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"class","hash":{},"data":data}) : helper)))
            + " accordion active\">\n";
        stack1 = ((helper = (helper = helpers.add_button || (depth0 != null ? depth0.add_button : depth0)) != null ? helper : alias2),(options={"name":"add_button","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.add_button) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "      <div class=\"wrapper\">\n"
            + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.buttons : depth0),{"name":"each","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "      </div>\n    </div>\n  </div>\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],168:[function(require,module,exports){
    var BaseView = require('./director');
    var ScrollableMixin = require('../mixins/scrollable');

    module.exports = Backbone.mixin(BaseView.extend({
        views: {},
        template: require('./categories-director.hbs'),
        CategoriesView: null,

        loadListContent: function (key) {
            var $el = this.$el;
            var $button = $el.find('dt a[data-key="' + key + '"]');
            this.views[key] = new this.CategoriesView({
                el: getNewImageListContainer(),
                key: key
            });
            this.views[key].on('open_new_view', _.partial(this.openSubView, $button));

            return this.views[key];

            function getNewImageListContainer() {
                var $container = $('<div></div>').addClass('image-list');

                if ($button.length) $container.insertAfter($button);else $el.find('.wrapper').append($container);

                return $container;
            }
        },

        listContentToggleEvent: function (event) {
            BaseView.prototype.listContentToggleEvent.apply(this, arguments);
            event.stopPropagation();
        },

        initialize: function () {
            _.bindAll(this, '_render', 'initScroll');
            this.scrollRefresh = _.debounce(this.initScroll, 2000);
            BaseView.prototype.initialize.apply(this, arguments);
        },

        toggleAcordionElement: function ($button, value) {
            this.$el.find('.antiscroll-wrap:first > .antiscroll-inner').scrollTop(0);
            this.toggleScroll(value);
            BaseView.prototype.toggleAcordionElement.apply(this, arguments);
        },

        openSubView: function ($button, data) {
            $button.children('.collapse').addClass('hidden');
            $button.children('.back').removeClass('hidden');

            if (INKIVE.C.IS_MOBILE) return;

            var name = this.getCategoryName(data);
            var $category = $('<span class="category">').text(': ' + name);
            $button.children('.category').remove();
            $button.append($category);
        },

        closeView: function () {
            var hasOpenAccorion = this.$el.find('.wrapper dt.active').length;
            hasOpenAccorion && this.closeAccordion();
            return !hasOpenAccorion;
        },

        closeSubView: function ($button) {
            var key = $button.data('key');
            var isLastSubview = this.views[key].closeView ? this.views[key].closeView() : true;

            if (isLastSubview) {
                $button.children('.category').remove();
                $button.children('.collapse').removeClass('hidden');
                $button.children('.back').addClass('hidden');
            }
        },

        getCategoryName: function (data) {
            return '';
        },

        refreshView: function () {
            this.scrollRefresh();
        },

        render: function () {
            INKIVE.Modal.loader(this.$el);
            this.loadButtons().then(this._render);
        },

        _render: function (buttons) {
            INKIVE.Modal.loaderClose(this.$el);

            this.$el.html(this.template({
                class: this.class,
                buttons: buttons,
                add_button: this.addButtonText
            }));

            this.scrollRefresh();

            if (!buttons.length) {
                this.loadListContent(0);
                this.$el.find('.image-list').css({
                    'top': 10,
                    'height': this.$el.closest('[role="tabpanel"]').height()
                });
            }
        },

        getScrollHeight: function () {
            return this.$el.closest('.image-list').height();
        },

        loadButtons: function () {
            var deferred = $.Deferred();
            deferred.resolve([]);
            return deferred.promise();
        }
    }), ScrollableMixin);

},{"../mixins/scrollable":178,"./categories-director.hbs":167,"./director":172}],169:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        return "<div class=\"antiscroll-wrap\">\n  <div class=\"antiscroll-inner\"></div>\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],170:[function(require,module,exports){
    var ScrollableMixin = require('../mixins/scrollable');
    var ImagesFactory = require('../../../../factory/images');

    module.exports = Backbone.mixin(Backbone.mixin(Backbone.View.extend({
        from: 0,
        limit: 10,
        apiCall: '',
        callbackName: 'callbackImages',
        template: require('./content.hbs'),

        initialize: function () {
            _.bindAll(this, 'masonryReload', 'render', 'loadData', 'onMoreData', 'closeView');
            this.views = {};

            this.tool = INKIVE.Tool.getInstance();
            this.editor = this.tool.editor;
            this.canvas = this.editor.canvas;

            this.imagesFactory = ImagesFactory;
            this.scrollRefresh = _.debounce(_.bind(this.initScroll, this), 2000);

            this.render();

            INKIVE.Modal.loader(this.$el.find('.antiscroll-inner'));

            _.delay(_.bind(function () {
                this.initScroll();
                this.initDataLoading();
            }, this), 1000);
        },

        initDataLoading: function () {
            var $thumbnailWrapper = this.$el.find('.thumbnailWrapper').length ? this.$el.find('.thumbnailWrapper') : this.$el.find('.thumbnail-wrapper');

            this.end && this.end();
            this.tool.initScrollDetect($thumbnailWrapper, this.loadData);
        },

        loadData: function (repeat, end) {
            this.end = end;
            this.repeat = repeat;

            INKIVE.Modal.loader(this.$el.find('.antiscroll-inner'));
            INKIVE.Helpers.api(this.apiCall, 'GET', this.getParams(), this.onMoreData);
        },

        onMoreData: function (result) {
            var hasResults = result.data.length > 0;
            INKIVE.Modal.loaderClose(this.$el.find('.antiscroll-inner'));

            if (hasResults) {
                this.appendThumbnails(result.data);
                this.repeat();
            } else this.end();

            this.scrollRefresh();
        },

        appendThumbnails: function (data) {
            var callback = _.bind(this.tool[this.callbackName], this.tool);
            this.tool.addThumbItem(this.$el, this.extractData(data), callback);
            this.masonryReload();
        },

        render: function () {
            this.$el.html(this.template());
            this.$el.find('.antiscroll-inner').addThumb();
        },

        remove: function () {
            this.undelegateEvents();
            this.$el.removeData().unbind();
            Backbone.View.prototype.remove.call(this);
        },

        getParams: function () {
            return {};
        },

        extractData: function (data) {
            return data;
        },

        openNewView: function (viewName, View, data) {
            var $view = $('<div></div>').addClass('image-list out right');

            $view.insertAfter(this.$el);

            this.$el.addClass('out left');
            this.views[viewName] = new View(_.extend({ el: $view }, data));
            this.trigger('open_new_view', data);

            _.defer(function () {
                $view.removeClass('out right');
            });
        },

        closeView: function () {
            this.$el.removeClass('out left');
            _.each(this.views, function (view, key) {
                if (key === 'uploadThumbnail') return;
                view.$el.addClass('out right');
                _.delay(function () {
                    view.remove();
                }, 1000);
            });

            this.views = {};
            return true;
        },

        getScrollHeight: function ($target) {
            var containerHeight = $target.closest('.tool-content').height();
            var buttonHeight = INKIVE.C.IS_MOBILE ? $('#ik-menu-back').height() : $target.siblings('.btn.btn-accordion').height();

            return containerHeight - buttonHeight;
        },

        masonryReload: function () {
            var $thumbnailWrapper = this.$el.find('.thumbnailWrapper');
            $thumbnailWrapper.masonry('reloadItems');
            $thumbnailWrapper.masonry('layout');
            this.scrollRefresh();
        }
    }), Backbone.Events), ScrollableMixin);

},{"../../../../factory/images":66,"../mixins/scrollable":178,"./content.hbs":169}],171:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        return "  <div class=\"tool-static-block\" style=\"z-index: 3; position: relative; margin: 0 10px; background: #2B3031;\">\n    <a class=\"btn btn-black btn-new-item\">"
            + container.escapeExpression((helpers.t || (depth0 && depth0.t) || helpers.helperMissing).call(depth0 != null ? depth0 : {},depth0,{"name":"t","hash":{},"data":data}))
            + "</a>\n  </div>\n";
    },"3":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression, alias5=helpers.blockHelperMissing, buffer =
            "    <dt>\n      <a class=\"btn btn-accordion\" data-key=\""
            + alias4(((helper = (helper = helpers.key || (depth0 != null ? depth0.key : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"key","hash":{},"data":data}) : helper)))
            + "\" data-type=\""
            + alias4(((helper = (helper = helpers.type || (depth0 != null ? depth0.type : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"type","hash":{},"data":data}) : helper)))
            + "\">\n        ";
        stack1 = ((helper = (helper = helpers.icon || (depth0 != null ? depth0.icon : depth0)) != null ? helper : alias2),(options={"name":"icon","hash":{},"fn":container.program(4, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.icon) { stack1 = alias5.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += "\n        ";
        stack1 = ((helper = (helper = helpers.image || (depth0 != null ? depth0.image : depth0)) != null ? helper : alias2),(options={"name":"image","hash":{},"fn":container.program(6, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.image) { stack1 = alias5.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "\n        <i class=\"collapse fa fa-chevron-up hidden\"></i>\n        <i class=\"back fa fa-chevron-left hidden\"></i>\n        <span class=\"name\">"
            + alias4((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,(depth0 != null ? depth0.tag : depth0),{"name":"t","hash":{},"data":data}))
            + "</span>\n      </a>\n    </dt>\n";
    },"4":function(container,depth0,helpers,partials,data) {
        return "<i class=\""
            + container.escapeExpression(container.lambda(depth0, depth0))
            + " main\"></i>";
    },"6":function(container,depth0,helpers,partials,data) {
        var alias1=container.escapeExpression;

        return "<img class=\""
            + alias1(container.lambda(depth0, depth0))
            + " main\" src=\""
            + alias1((helpers.route || (depth0 && depth0.route) || helpers.helperMissing).call(depth0 != null ? depth0 : {},depth0,{"name":"route","hash":{},"data":data}))
            + "\"/>";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", buffer =
            "<div class=\"tab-content "
            + container.escapeExpression(((helper = (helper = helpers["class"] || (depth0 != null ? depth0["class"] : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"class","hash":{},"data":data}) : helper)))
            + " accordion active\">\n";
        stack1 = ((helper = (helper = helpers.add_button || (depth0 != null ? depth0.add_button : depth0)) != null ? helper : alias2),(options={"name":"add_button","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.add_button) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "  <div class=\"wrapper\">\n"
            + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.buttons : depth0),{"name":"each","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "  </div>\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],172:[function(require,module,exports){
    var AppDecorate = require('../../../../app/decorate');

    module.exports = AppDecorate(require('./app/director'), Backbone.View.extend({
        views: {},
        Views: {},
        uploadViewKey: '',
        buttons: [],
        template: require('./director.hbs'),

        events: {
            'click dt > a:not([data-key="add"])': 'listContentToggleEvent'
        },

        listContentToggleEvent: function (event) {
            var $button = $(event.currentTarget);
            var $container = $button.closest('dt');
            var isActive = $container.hasClass('active');

            if (isActive) {
                var hasOpenSubView = !$button.children('.back').is('.hidden');

                hasOpenSubView && this.closeSubView($button);
                hasOpenSubView || collapseList.call(this);
            } else uncollapseList.call(this);

            function collapseList() {
                var isAllClosed = this.hideListContent($button);
                isAllClosed && $container.removeClass('active');
            }

            function uncollapseList() {
                this.showListContent($button);
                $container.addClass('active');
            }
        },

        initialize: function () {
            _.bindAll(this, 'show', 'render', 'hideListContent', 'closeAccordion', 'openSubView');
        },

        render: function () {
            var html = this.template({
                class: this.class,
                buttons: this.buttons.filter(function (button) {
                    return !button.disabled;
                })
            });

            this.$el.html(html);
            this.initializeUpload();
        },

        initializeUpload: function () {
            var view = this.loadListContent(this.uploadViewKey);
            var $button = this.$el.find('dt a[data-key="' + this.uploadViewKey + '"]');
            var $container = this.$el.find('dt a[data-key="add"]').parent();
            var debouncedOpenProjectTab = _.debounce(_.bind(openProjectTab, this), 600);

            $container.fineUploaderS3(view.getUploaderOptions($container)).on('progress', view.progressEvent).on('error', view.errorEvent).on('cancel', view.cancelEvent).on('complete', view.completeEvent).on('submitted', _.bind(function () {
                debouncedOpenProjectTab();
                view.submittedEvent.apply(view, arguments);
            }, this));

            this.beforeSubmitEvent && $container.on('click', this.beforeSubmitEvent);

            function openProjectTab() {
                this.showListContent($button);
                $button.parent().addClass('active');
            }
        },

        show: function () {
            var now = new Date();
            var isAlreadyThere = this.$el.find('.tab-content.' + this.class.split(' ').join('.')).length;
            var isDoubleClick = now - this.showingTime < 600;

            isAlreadyThere || this.render();
            isAlreadyThere && isDoubleClick && this.closeAccordion();
            this.showingTime = now;
        },

        closeAccordion: function () {
            _.each(this.views, function (view, key) {
                var $button = this.$el.find('dt a[data-key="' + key + '"]');
                var $container = $button.closest('dt');

                $container.removeClass('active');
                this.hideListContent($button, key);
            }, this);
        },

        loadListContent: function (key) {
            var $button = this.$el.find('dt a[data-key="' + key + '"]');
            this.views[key] = new this.Views[key]({ el: getNewImageListContainer() });
            this.views[key].on('open_new_view', _.partial(this.openSubView, $button));

            return this.views[key];

            function getNewImageListContainer() {
                var $container = $('<div></div>').addClass('image-list content ' + key);

                $container.insertAfter($button);
                return $container;
            }
        },

        openSubView: function ($button, data) {
            $button.children('.collapse').addClass('hidden');
            $button.children('.back').removeClass('hidden');
        },

        closeSubView: function ($button) {
            var key = $button.data('key');
            var isLastSubview = this.views[key].closeView ? this.views[key].closeView() : true;

            if (isLastSubview) {
                $button.children('.collapse').removeClass('hidden');
                $button.children('.back').addClass('hidden');
            }
        },

        showListContent: function ($button, key) {
            key = typeof key != 'undefined' ? key : $button.data('key');

            this.toggleAcordionElement($button, true);
            this.views[key] || this.loadListContent(key);

            this.views[key] && this.views[key].refreshView && this.views[key].refreshView();
        },

        hideListContent: function ($button, key) {
            key = key || $button.data('key');

            this.toggleAcordionElement($button, false);
            if (!this.views[key].closeView) return true;
            while (!this.views[key].closeView()) {}
            return true;
        },

        toggleAcordionElement: function ($button, value) {
            var $container = $button.closest('dt');
            var $wrapper = $container.closest('.wrapper');

            $button.children('i').addClass('hidden', value);
            $button.children('.main').toggleClass('hidden', value);
            $button.children('.collapse').toggleClass('hidden', !value);

            var top = value ? '-' + $container.position().top + 'px' : 0;
            var height = value ? $container.closest('[role="tabpanel"]').height() : '';

            $wrapper.css('top', top);
            $container.height(height);
        }
    }));

},{"../../../../app/decorate":7,"./app/director":166,"./director.hbs":171}],173:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        return "<h3>"
            + container.escapeExpression((helpers.t || (depth0 && depth0.t) || helpers.helperMissing).call(depth0 != null ? depth0 : {},depth0,{"name":"t","hash":{},"data":data}))
            + "</h3>";
    },"3":function(container,depth0,helpers,partials,data) {
        return "<a class=\"btn toggle\"><i class=\""
            + container.escapeExpression(container.lambda(depth0, depth0))
            + "\"></i></a>";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=helpers.blockHelperMissing, buffer =
            "<div class=\"helper-display\">\n  <div class=\"helper-content\">\n    <h2>"
            + container.escapeExpression((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,(depth0 != null ? depth0.title : depth0),{"name":"t","hash":{},"data":data}))
            + "</h2>\n    ";
        stack1 = ((helper = (helper = helpers.sub_title || (depth0 != null ? depth0.sub_title : depth0)) != null ? helper : alias2),(options={"name":"sub_title","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.sub_title) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += "\n    "
            + ((stack1 = ((helper = (helper = helpers.content || (depth0 != null ? depth0.content : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"content","hash":{},"data":data}) : helper))) != null ? stack1 : "")
            + "\n  </div>\n</div>\n";
        stack1 = ((helper = (helper = helpers.button || (depth0 != null ? depth0.button : depth0)) != null ? helper : alias2),(options={"name":"button","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.button) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "\n";
    },"useData":true});

},{"hbsfy/runtime":373}],174:[function(require,module,exports){
    module.exports = Backbone.mixin(Backbone.View.extend({
        template: require('./template.hbs'),
        data: {
            title: '',
            sub_title: null,
            content: '',
            button: 'fa fa-info'
        },

        events: {
            'click .btn.toggle': 'toggleEvent'
        },

        toggleEvent: function (event) {
            this.toggle();
        },

        toggle: function (value) {
            this.$el.toggleClass('show', value);
            this.trigger('toggle', this.$el.hasClass('show'));
        },

        initialize: function () {
            _.bindAll(this, 'toggle');
        },

        render: function (data) {
            data = _.extend({}, this.data, data);

            this.$el.html(this.template(data));
            this.setElementStyle();
        },

        setElementStyle: function () {
            var $toolContent = this.$el.closest('.tool-content');

            var width = $toolContent.outerWidth();
            var height = $toolContent.outerHeight();
            var contentOffset = $toolContent.offset();

            this.$el.addClass('helper').css({
                top: contentOffset.top + 'px',
                left: contentOffset.left + 'px',
                height: height + 'px',
                width: width + 'px'
            });

            this.$el.find('.helper-content').css({
                height: height + 'px',
                width: width + 'px'
            });
        }
    }), Backbone.Events);

},{"./template.hbs":173}],175:[function(require,module,exports){
    module.exports = {
        initializeUploadCheckOnce: function () {
            return window.Android;
        },

        initializeUpload: function () {
            var $button = this.$el.find('.uploader.progress-button');

            $button.on('click', _.bind(function (event) {
                var sizeName = 'o';
                this.appBridge.callAndroid('photo_upload', {
                    'size_name': sizeName
                });
            }, this));
        }
    };

},{}],176:[function(require,module,exports){
    var EditorModeManager = require('../../../editor-mode-manager');

    module.exports = {
        events: {
            'click .btn-new-item': 'addNewEvent'
        },

        addNewEvent: function () {},

        createTemplate: function () {
            this.$el.find('.btn-new-item').addClass('disabled');
            this.modalData.saveForm(_.bind(this.onFormSaved, this));
        },

        onFormSaved: function (status, data) {
            if (status && data.id) {
                this.modal.close();
                EditorModeManager.setMode(this.mode, data);

                var items = this.extractData([data]);
                var callback = _.bind(this.createCallback, this.tool);
                this.tool.addThumbItem(this.$el, items, callback, 'prepend');
            } else {
                this.$el.find('.btn-new-item').removeClass('disabled');
            }
        },

        render: function () {
            this.$el.html(this.template({
                placeholder: this.filterPlaceholder,
                add_button: this.addButtonText
            }));

            this.$el.find('.antiscroll-inner').addThumb();
        }
    };

},{"../../../editor-mode-manager":102}],177:[function(require,module,exports){
    module.exports = {
        outline: '2px solid #ffdd17',

        mouseDownEvent: function (event) {},
        mouseMoveEvent: function (event) {},
        mouseUpEvent: function (event) {},
        clickEvent: function (event) {},

        mouseDown: function (event) {
            this.$draggableClone = this.createDraggableClone();
            this.$draggable.css('outline', this.outline);
            this.uppdateDraggableCloneDataPosition(event);
            this.bindDragDrop();

            this.mouseDownEvent(event);
        },

        createDraggableClone: function () {
            var roundingRect = this.$draggable.get(0).getBoundingClientRect();
            $draggableClone = this.$draggable.clone(true).off();

            $('#draggingObject').remove();

            $draggableClone.attr('id', 'draggingObject');
            $draggableClone.attr('style', this.$draggable.attr('style'));
            $draggableClone.css({
                'position': 'absolute',
                'left': roundingRect.left,
                'top': roundingRect.top,
                'width': roundingRect.width,
                'height': roundingRect.height,
                'z-index': 5000,
                'opacity': '0'
            });

            $draggableClone.find('.tooltip').remove();
            $draggableClone.find('svg *').each(function () {
                var id = $(this).attr('id');
                id && $(this).attr('id', 'clone-' + id);
            });

            $('body').append($draggableClone);

            return $draggableClone;
        },

        uppdateDraggableCloneDataPosition: function (event) {
            var roundingRect = this.$draggable.get(0).getBoundingClientRect();
            var cursorPosition = this.getCursorPosition(event);

            this.$draggableClone.data('offset', {
                x: (cursorPosition.x - roundingRect.left) / roundingRect.width,
                y: (cursorPosition.y - roundingRect.top) / roundingRect.height
            });
        },

        bindDragDrop: function () {
            $(window).unbind('mousemove touchmove', this.mouseMove);
            $(window).unbind('mouseup touchend touchcancel', this.mouseUp);
            $(window).on('mousemove touchmove', this.mouseMove);
            $(window).on('mouseup touchend touchcancel', this.mouseUp);
        },

        mouseMove: function (event) {
            var processDraggable = _.partial(this.processDraggable, event);
            $('#draggingObject').length && _.defer(processDraggable);
        },

        mouseUp: function (event) {
            event.preventDefault();
            var offset = $('#canvas-panel').offset();

            if (this.$draggableClone.length) {
                var cursorPosition = this.getCursorPosition(event);

                if (cursorPosition.x > offset.left) this.mouseUpEvent(event);else if (!this.$draggableClone.data('dragging')) this.clickEvent(event);

                this.endDragging();
            }
        },

        endDragging: function () {
            this.$draggable.css('outline', 'none');
            this.$draggableClone.remove();

            $(window).unbind('mousemove touchmove', this.mouseMove);
            $(window).unbind('mouseup touchend', this.mouseUp);
        },

        processDraggable: function (event) {
            var offset = this.$draggableClone.data('offset');
            if (!this.$draggableClone.length || !offset) return;

            var roundingRect = this.$draggable.get(0).getBoundingClientRect();
            var unsnappedPosition = getUnsnappedPosition.call(this);

            var dx = Math.abs(unsnappedPosition.x - roundingRect.left);
            var dy = Math.abs(unsnappedPosition.y - roundingRect.top);
            var distance = Math.round(Math.sqrt(dx * dx + dy * dy));

            processPosition();
            processScale();

            dx > 110 && event.preventDefault();
            distance > 10 && this.$draggableClone.data('dragging', true);
            this.mouseMoveEvent(event);

            function getUnsnappedPosition() {
                var cursorPosition = this.getCursorPosition(event);

                return {
                    x: cursorPosition.x - roundingRect.width * offset.x,
                    y: cursorPosition.y - roundingRect.height * offset.y
                };
            }

            function processPosition() {
                var isYSnaped = dx < 110;
                var isXSnaped = distance < 80;

                var mouseX = isXSnaped ? roundingRect.left : unsnappedPosition.x;

                var mouseY = isYSnaped ? roundingRect.top : unsnappedPosition.y;

                $draggableClone.css('left', mouseX);
                $draggableClone.css('top', mouseY);

                $draggableClone.css('opacity', isXSnaped && isYSnaped ? '0' : '1');
            }

            function processScale() {
                var minimumScaleDistance = 130;
                var maximumScaleDistance = 300;

                var maxScale = 2;
                var multi = 1;

                if (distance > minimumScaleDistance) {
                    multi += (distance - minimumScaleDistance) / (maximumScaleDistance - minimumScaleDistance);

                    if (multi > maxScale) multi = maxScale;
                }

                $draggableClone.css('transform', 'scale(' + multi + ')');
            }
        },

        getCursorPosition: function (event) {
            if (event.type.indexOf('touch') === 0) {
                var changedTouches = event.originalEvent ? event.originalEvent.changedTouches : event.changedTouches;

                var retval = {
                    x: changedTouches && changedTouches[0].clientX,
                    y: changedTouches && changedTouches[0].clientY
                };

                event.clientX = retval.x;
                event.clientY = retval.y;

                return retval;
            }

            return { x: event.clientX, y: event.clientY };
        },

        initDraggable: function () {
            _.bindAll(this, 'mouseMove', 'mouseUp', 'processDraggable');
        }
    };

},{}],178:[function(require,module,exports){
    module.exports = {
        initScroll: function ($target, options) {
            $target = $target || this.$el;

            var $activeAccordion = $target.find('.accordion dd:visible');
            var hasActiveAccordion = $activeAccordion.length;
            if (hasActiveAccordion) return this.initScroll($activeAccordion, options);

            var options = $.extend({
                autoHide: false,
                width: this.getScrollWidth($target),
                height: this.getScrollHeight($target)
            }, options);

            $target.hasClass('antiscroll-wrap') ? $target.antiscroll(options) : $target.find('.antiscroll-wrap').antiscroll(options);
        },

        getScrollWidth: function ($target) {
            return $target.parents('.tool-content').width();
        },

        getScrollHeight: function ($target) {
            return $target.parents('.tool-content').height();
        },

        toggleScroll: function (value) {
            var $wrapper = this.$el.find('.antiscroll-wrap:first');

            $wrapper.children('.antiscroll-inner').css('overflow', value ? 'hidden' : 'auto');

            $wrapper.children('.antiscroll-scrollbar').toggleClass('antiscroll-scrollbar-shown', !value);
        }
    };

},{}],179:[function(require,module,exports){
    var UploadThumbnailView = require('../thumbnail/upload');
    var AppDecorate = require('../../../../app/decorate');

    module.exports = AppDecorate(require('./app/upload-list'), {
        uploadingThumbs: {},
        uploadAttempt: {},
        files: {},
        uploadConfig: {
            validation: {
                acceptFiles: 'image/*;capture=camera',
                allowedExtensions: ['jpg', 'jpeg', 'gif', 'png']
            },
            scaling: {
                includeExif: false,
                sendOriginal: false,
                sizes: [{
                    name: 'o',
                    maxSize: INKIVE.C.VersionUploadSize['o']
                }]
            }
        },

        initialize: function () {
            _.bindAll(this, 'complete', 'submittedEvent', 'progressEvent', 'errorEvent', 'cancelEvent', 'completeEvent', 'getUploaderOptions');

            this.debouncedMasonryReload = _.debounce(this.masonryReload, 800);
            this.addUploadThumbnail();
            this.initializeUpload();
        },

        addUploadThumbnail: function () {
            var $thumbnailWrapper = this.$el.find('.thumbnailWrapper');
            this.$uploaderThumbnail = $('<div></div>').addClass('thumbnail uploader');

            $thumbnailWrapper.prependThumb(this.$uploaderThumbnail);
            this.views.uploadThumbnail = new UploadThumbnailView({
                el: this.$uploaderThumbnail
            });
        },

        getNewThumbnail: function () {
            var $newThumbnail = $('<div></div>').addClass('thumbnail uploading');

            $newThumbnail.insertAfter(this.$uploaderThumbnail);
            this.debouncedMasonryReload();

            return new UploadThumbnailView({ el: $newThumbnail });
        },

        initializeUpload: function () {
            var $container = this.$el.find('.uploader.progress-button');

            $container.fineUploaderS3(this.getUploaderOptions($container)).on('submitted', this.submittedEvent).on('progress', this.progressEvent).on('error', this.errorEvent).on('cancel', this.cancelEvent).on('complete', this.completeEvent);
        },

        getUploaderOptions: function ($container) {
            var globalConfig = INKIVE.C.DEFAULT_FINEUPLOADER;
            var options = $.extend(true, {
                button: $container,
                objectProperties: { acl: 'public-read', key: getUploadKey }
            }, globalConfig, this.uploadConfig);

            return options;

            function getUploadKey(id) {
                var regEx = /(?:\.([^.]+))?$/;

                var name = $container.fineUploaderS3('getName', id);
                var udid = $container.fineUploaderS3('getUuid', id);
                var extension = regEx.exec(name)[1];
                var region = INKIVE.C.UPLOAD_SERVER.split('/').pop().split('.')[0];

                return region + '/original/' + udid + '.' + extension;
            }
        },

        submittedEvent: function (event, id, fileName) {
            var $container = $(event.currentTarget);

            this.views[id] = this.getNewThumbnail();
            this.views[id].toggleProgressBar(true);

            this.files[id] = $container.fineUploaderS3('getFile', id);
            this.views[id].on('thumbnail_load_error', _.bind(function () {
                this.errorEvent(null, id);
            }, this));

            this.views[id].on('cancel', _.bind(function () {
                var attempt = this.uploadAttempt[id];
                attempt && attempt.abort && attempt.abort();
                $container.fineUploaderS3('cancel', id);
            }, this));

            this.isFallbackUploadForced() && _.defer(_.bind(function () {
                $container.fineUploaderS3('cancel', id);
                this.regularUploadFallback(id);
            }, this));
        },

        progressEvent: function (event, id, fileName, uploadedBytes, totalBytes) {
            this.views[id] && this.views[id].updateProgressBar(uploadedBytes / totalBytes);
        },

        cancelEvent: function (event, id) {
            if (this.isFallbackUploadForced() && !this.uploadAttempt[id]) return;

            var view = this.views[id];
            this.tool.editor.canvas.call('advice.show', 'upload-cancel');
            this.clean(id);

            _.delay(_.bind(function () {
                view.remove();
                this.debouncedMasonryReload();
            }, this), 1000);
        },

        errorEvent: function (event, id) {
            var view = this.views[id];
            var isFirstFail = !this.uploadAttempt[id] || event.type === 'complete';

            if (isFirstFail) {
                event.type !== 'complete' && this.regularUploadFallback(id);
                return false;
            }

            INKIVE.Modal.alertMessage(INKIVE.TemplatesHelper('alert_default', {
                message: 'modal.alert.upload_image',
                try_again: true
            }));

            this.clean(id);
            _.delay(_.bind(function () {
                view && view.remove();
                this.debouncedMasonryReload();
            }, this), 1000);

            return true;
        },

        regularUploadFallback: function (id) {
            var file = this.files[id];
            var errorEvent = this.errorEvent;
            var onComplete = _.partial(this.complete, id);
            var $container = this.$el.find('.uploader.progress-button');

            this.uploadAttempt[id] = true;
            this.forceFallbackUpload();

            this.regularUploadFallbackUrl && onEndPoint.call(this);
            this.regularUploadFallbackUrl || $.get(BASE_URL + 'upload/getdirectuploadendpoint', _.bind(function (url) {
                this.regularUploadFallbackUrl = url;
                onEndPoint.call(this);
            }, this));

            function onEndPoint() {
                var progressEvent = _.bind(this.progressEvent, this);
                var formData = new FormData();
                formData.append('userfile', file);
                formData.append('project_id', INKIVE.C.BOOK.id);

                this.uploadAttempt[id] = $.ajax({
                    url: this.regularUploadFallbackUrl,
                    type: 'POST',
                    success: onSuccess,
                    error: _.bind(function (event) {
                        this.errorEvent(event, id);
                    }, this),
                    data: formData,
                    cache: false,
                    contentType: false,
                    processData: false,
                    dataType: 'json',
                    xhr: function () {
                        var myXhr = $.ajaxSettings.xhr();

                        myXhr.upload && myXhr.upload.addEventListener('progress', function (event) {
                            progressEvent(event, id, null, event.loaded, event.total);
                        }, false);

                        return myXhr;
                    }
                });
            }

            function onSuccess(data) {
                var key = data['key'];

                $.ajax({
                    url: INKIVE.C.BASE_URL + 'upload/successasync',
                    type: 'POST',
                    dataType: 'json',
                    success: onComplete,
                    error: _.bind(function (event) {
                        errorEvent(event, id);
                    }, this),
                    data: {
                        type: 'editor',
                        scrapbookId: INKIVE.C.BOOK.id,
                        key: key,
                        name: file.name,
                        bucket: 'virginia.inkive.com'
                    }
                });
            }
        },

        completeEvent: function (event, id, fileName, response, xhr) {
            var $container = $(event.currentTarget);

            if (response.success) this.complete(id, response);else this.errorEvent(event, id) && $container.fineUploaderS3('cancel', id);
        },

        complete: function (id, data) {
            var thumb = data.tempLink.replace('/original/', '/thumb/');

            this.clean(id);
            this.views[id].setImage('photo-saved-' + data.photoId, thumb);
            this.views[id].on('resize', this.debouncedMasonryReload);
        },

        clean: function (id) {
            this.files = _.omit(this.files, id);
            this.uploadAttempt = _.omit(this.uploadAttempt, id);
        },

        forceFallbackUpload: function () {
            INKIVE.C.USE_FALLBACK_UPLOAD = 'FORCE';
        },

        isFallbackUploadForced: function () {
            return INKIVE.C.USE_FALLBACK_UPLOAD === 'FORCE';
        }
    });

},{"../../../../app/decorate":7,"../thumbnail/upload":215,"./app/upload-list":175}],180:[function(require,module,exports){
    var BaseView = require('./base');
    var DesignFacade = require('../../../../../facade/design/design');

    module.exports = BaseView.extend({
        addElement: function (elementData) {
            DesignFacade.create('sticker', _.extend({
                'sticker_id': this.svg['id'],
                'thumb_src': this.svg['url']
            }, elementData));
        },

        initialize: function (options) {
            this.svg = options.svg;
            BaseView.prototype.initialize.call(this);
            this.setImageListeners();
        },

        setImageListeners: function () {
            this.$el.find('img')[0].onload = this.resize;
        },

        getTemplateRenderData: function () {
            return {
                image: { src: this.svg['url'] }
            };
        }
    });

},{"../../../../../facade/design/design":19,"./base":181}],181:[function(require,module,exports){
    var DraggableMixin = require('../../mixins/draggable');
    var EditorFacade = require('../../../../../facade/editor/editor');

    module.exports = Backbone.mixin(Backbone.mixin(Backbone.View.extend({
        template: require('../templates/base.hbs'),
        elementType: '',
        height: 86,
        width: 110,

        events: {
            'touchstart .item': 'mouseDown',
            'mousedown .item': 'mouseDown'
        },

        getClickElementData: function (event) {
            var bb = this.$draggableClone ? this.$draggableClone.get(0).getBoundingClientRect() : this.$el.get(0).getBoundingClientRect();

            var scale = Math.min(this.canvas.contentW, this.canvas.contentH);
            scale /= Math.max(bb.width, bb.height);

            return {
                position: {
                    x: (this.canvas.contentW - bb.width * (scale / 2)) / 2,
                    y: (this.canvas.contentH - bb.height * (scale / 2)) / 2
                },
                size: {
                    width: bb.width * (scale / 2),
                    height: bb.height * (scale / 2)
                }
            };
        },

        getMouseUpElementData: function (event) {
            var bb = this.$draggableClone.get(0).getBoundingClientRect();
            var zoom = EditorFacade.handle('zoom', 'get');
            var offset = this.editor.getOffset();

            return {
                position: {
                    x: Math.floor4((bb.left - offset.x) / zoom),
                    y: Math.floor4((bb.top - offset.y) / zoom)
                },
                size: {
                    width: Math.floor4(bb.width / zoom),
                    height: Math.floor4(bb.height / zoom)
                }
            };
        },

        clickEvent: function (event) {
            this.addElement(this.getClickElementData(event));
        },

        mouseUpEvent: function (event) {
            this.addElement(this.getMouseUpElementData(event));
        },

        addElement: function (elementData) {
            var element = this.editor.addElement(this.elementType, elementData);
            INKIVE.Tool.blinkScreen(element);
        },

        initialize: function () {
            _.bindAll(this, 'resize');
            this.editor = INKIVE.Tool.getInstance().editor;
            this.canvas = this.editor.canvas;

            this.render();
            this.initDraggable();
        },

        render: function () {
            var html = this.template(this.getTemplateRenderData());

            this.$el.html(html);
            this.width && this.$el.css('width', this.width);
            this.height && this.$el.css('height', this.height);
            this.$draggable = this.$el.find('a.item');
        },

        remove: function () {
            this.undelegateEvents();
            this.$el.removeData().unbind();
            Backbone.View.prototype.remove.call(this);
        },

        resize: function () {
            var height = this.$el.find('img').height();
            this.$el.height(height);
            this.trigger('resize');
        },

        getTemplateRenderData: function () {}
    }), Backbone.Events), DraggableMixin);

},{"../../../../../facade/editor/editor":45,"../../mixins/draggable":177,"../templates/base.hbs":203}],182:[function(require,module,exports){
    var BaseView = require('./base');
    var AnalyticsDecorate = require('../../../../../analytics/decorate');

    module.exports = AnalyticsDecorate(require('../analytics/template'), BaseView.extend({
        events: {
            'click': 'addEvent'
        },

        addEvent: function (event) {
            var isEmpty = $('#svgroot .main').find(':not(title)').length === 0;
            var requireNewPage = !this.isSameSize() && !this.isCustomFormat && !isEmpty;

            if (requireNewPage) this.addOnNewPage();else if (isEmpty || this.setCurrentPage) this.setTemplate();else this.displayModalOptions();
        },

        initialize: function () {
            this.tool = INKIVE.Tool.getInstance();
            this.editor = this.tool.editor;
            this.canvas = this.editor.canvas;

            _.bindAll(this, 'onNewPageCreated', 'setTemplate', 'onTemplateSet', 'acceptModal', 'closeModal');
        },

        addOnNewPage: function (layoutData) {
            var newPageId = parseInt(INKIVE.C.BOOK.num_pages) + 1;
            var url = INKIVE.C.BASE_URL + 'inkiveeditor/addPage/' + INKIVE.C.BOOK.id + '/' + newPageId;

            INKIVE.Modal.togglePageLoader(true);
            $.get(url, null, this.onNewPageCreated);
        },

        onNewPageCreated: function (result) {
            INKIVE.Modal.togglePageLoader(false);
            result = $.parseJSON(result);

            if (result.status == 'success') {
                INKIVE.C.BOOK.num_pages++;
                this.tool.load(result.data['now'], this.setTemplate);
            } else {
                INKIVE.Modal.alertMessage(INKIVE.TemplatesHelper('alert_default', {
                    message: 'modal.alert.add',
                    try_again: true
                }));
            }

            INKIVE.Modal.togglePageLoader(false);
        },

        displayModalOptions: function () {
            var newSize = 0;
            this.modal = INKIVE.Modal.modalWindow(INKIVE.TemplatesHelper('modal_layout_load', {
                new_size: newSize,
                current_size: Math.round(this.canvas.contentW) + 'x' + Math.round(this.canvas.contentH),
                keep_images: !INKIVE.C.MODE.IS_DESYGNER,
                has_images: $('#svgcontent .main image').length > 0,
                keep_size: !INKIVE.C.MODE.IS_DESYGNER,
                is_same_size: true
            }), {
                width: 600,
                headerIcon: 'icon-cloud-download',
                headerTitle: 'modal.title.change_name',
                buttons: [{
                    title: INKIVE.TranslateHelper.translate('modal.buttons.apply_name'),
                    onClick: this.acceptModal
                }, {
                    title: INKIVE.TranslateHelper.translate('common.cancel'),
                    onClick: this.closeModal
                }]
            });

            $('[data-id="' + this.modal.id + '"] [type=checkbox]').iCheck({
                checkboxClass: 'icheckbox_square-yellow'
            });
        },

        acceptModal: function () {
            this.keepSize = $('input[name="keep-size-input"]').is(':checked');
            this.keepImages = $('input[name="keep-images-input"]').is(':checked');
            this.setTemplate();
            this.modal.close();
        },

        closeModal: function () {
            this.modal.close();
        },

        setTemplate: function () {
            this.oldImages = _.map($('#svgcontent .main image'), function (image) {
                return image.getAttribute('xlink:href');
            });

            this.editor.loadingElement(1);
            INKIVE.DesignFacade.once(this.designAddedEvent, this.onTemplateSet);
        },

        onTemplateSet: function () {
            INKIVE.Tool.blinkScreen();

            var $layoutBoxes = $('#svgcontent .main .layoutBox');
            this.keepImages && _.any($layoutBoxes, function (elem, index) {
                if (this.oldImages.length > index) this.canvas.runExtensions('addLayoutImage', {
                    elem: elem,
                    data: this.oldImages[index]
                });else return true;
            }, this);

            INKIVE.C.IS_MOBILE && this.canvas.call('advice.show', 'template-back');

            INKIVE.C.IS_MOBILE || $layoutBoxes.length && INKIVE.C.MODE.IS_DESYGNER && this.canvas.call('advice.show', 'template-placeholders');
            INKIVE.Helpers.displayImagesLoadingAnimation();

            this.editor.loadingElement(0);
        }
    }));

},{"../../../../../analytics/decorate":4,"../analytics/template":189,"./base":181}],183:[function(require,module,exports){
    module.exports = {
        eventCategory: 'Editor UI | Tool Menu | customize',

        clickEvent: function () {
            this.trackEvent({ eventAction: 'backgrounds_set_color', eventLabel: this.color });
        }
    };

},{}],184:[function(require,module,exports){
    module.exports = {};

},{}],185:[function(require,module,exports){
    module.exports = {};

},{}],186:[function(require,module,exports){
    module.exports = {};

},{}],187:[function(require,module,exports){
    module.exports = {};

},{}],188:[function(require,module,exports){
    module.exports = {};

},{}],189:[function(require,module,exports){
    module.exports = {
        eventCategory: 'Editor UI | Tool Menu | templates',

        addEvent: function (event) {
            var isEmpty = $('#svgroot .main').find(':not(title)').length === 0;
            var requireNewPage = !this.isSameSize() && !isEmpty;

            (requireNewPage || isEmpty) && this.trackEvent({
                eventAction: 'add_' + (this.design ? 'designed' : 'grid'),
                eventLabel: requireNewPage ? 'new_page' : 'current_empty_page'
            });
        },

        acceptModal: function (event) {
            this.trackEvent({
                eventAction: 'add_' + (this.design ? 'designed' : 'grid'),
                eventLabel: 'current_page'
            });
        },

        closeModal: { eventAction: 'cancel_adding' }
    };

},{}],190:[function(require,module,exports){
    module.exports = {
        eventCategory: 'Editor UI | Tool Menu | text banners',

        clickEvent: function (event) {
            this.trackEvent({
                eventAction: 'add_click',
                eventLabel: this.svg['id']
            });
        },

        mouseUpEvent: function () {
            this.trackEvent({
                eventAction: 'add_drop',
                eventLabel: this.svg['id']
            });
        }
    };

},{}],191:[function(require,module,exports){
    module.exports = {
        eventCategory: 'Editor UI | Tool Menu | text',
        eventAction: 'text_edit',

        toggleBoldFontEvent: { eventLabel: 'toggle_bold' },
        toggleItalicFontEvent: { eventLabel: 'toggle_italic' },
        toggleOptionsEvent: { eventLabel: 'toggle_options' },
        endEditingEvent: { eventLabel: 'change_content' },
        toggleUnderlineFontEvent: { eventLabel: 'toggle_underline' },
        clickEvent: { eventAction: 'add_click' },
        mouseUpEvent: { eventAction: 'add_drop' },

        changeFontFamilyEvent: function (event) {
            var fontFamily = $(event.currentTarget).css('font-family');

            this.trackEvent({
                eventLabel: 'change_font_family ' + this.getQuoteScaped(fontFamily)
            });
        }
    };

},{}],192:[function(require,module,exports){
    module.exports = {
        displayFontFamiliesEventCheckOnce: function () {
            return !window.Android && this.appBridge.version.isGreaterThan('1.1.1') || window.Android && !this.appBridge.version.isLowerThan('1.1.3');
        },

        displayFontFamiliesEvent: function (event) {
            var $fontFamily = this.$el.find('.fonts-list');

            this.appBridge.callBoth('pick_font', _.extend(this.getTextData('_'), {
                'position': _.extend($fontFamily.offset(), {
                    height: $fontFamily.height(),
                    width: $fontFamily.width()
                })
            }));

            $fontFamily.find('.ui-dropdown-items').removeAttr('style').hide();

            this.appBridge.off('ik.editor.text_update');
            this.appBridge.on('ik.editor.text_update', _.bind(function (event, data) {
                this.setTextData(data);
            }, this));
        }
    };

},{}],193:[function(require,module,exports){
    var tinycolor = require('../../../../../../bower_components/tinycolor/tinycolor');
    var DesignFacade = require('../../../../facade/design/design');
    var template = require('./templates/color.hbs');
    var AnalyticsDecorate = require('../../../../analytics/decorate');

    module.exports = AnalyticsDecorate(require('./analytics/color'), Backbone.View.extend({
        events: {
            'click': 'clickEvent'
        },

        clickEvent: function (event) {
            DesignFacade.set('background', { color: this.color });
        },

        initialize: function (options) {
            var color = tinycolor(options.color);

            this.editor = INKIVE.Tool.getInstance().editor;
            this.color = options.color;
            this.stroke = color.isLight() ? '#555' : '#AAA';

            this.render();
        },

        render: function () {
            this.$el.html(template({
                color: this.color,
                stroke: this.stroke
            }));

            this.$el.data('attr', 'fill fill-opacity');
            this.$el.attr('title', this.color);
        }
    }));

},{"../../../../../../bower_components/tinycolor/tinycolor":2,"../../../../analytics/decorate":4,"../../../../facade/design/design":19,"./analytics/color":183,"./templates/color.hbs":204}],194:[function(require,module,exports){
    module.exports = TypeEffect;

    function TypeEffect($el) {
        this.$el = $el;
        this.caption = '';
        this.captionLength = 0;

        _.bindAll(this, 'type', 'erase', 'startTyping', 'startErasing');

        var height = this.$el.height();
        this.$el.empty();
        this.$text = $('<span class="content avoid-shortcuts"></span>').height(height).appendTo(this.$el);
        this.$cursor = $('<span class="cursor">|</span>').appendTo(this.$el);
    }

    TypeEffect.prototype.hide = function () {
        this.$cursor.hide();
    };

    TypeEffect.prototype.show = function () {
        this.$cursor.show();
    };

    TypeEffect.prototype.startTyping = function (caption) {
        this.deferred = $.Deferred();

        this.show();
        this.caption = caption;
        this.captionLength = 0;

        this.type();

        return this.deferred.promise();
    };

    TypeEffect.prototype.startErasing = function () {
        this.deferred = $.Deferred();

        this.show();
        this.caption = this.$text.text();
        this.captionLength = this.caption.length;

        this.erase();

        return this.deferred.promise();
    };

    TypeEffect.prototype.type = function () {
        this.$text.html(this.caption.substr(0, this.captionLength++) || '&nbsp;');

        if (this.captionLength <= this.caption.length) _.delay(this.type, 100);else {
            this.captionLength = 0;
            this.caption = '';
            this.deferred.resolve();
        }
    };

    TypeEffect.prototype.erase = function () {
        this.$text.html(this.caption.substr(0, this.captionLength--) || '&nbsp;');

        if (this.captionLength >= 0) _.delay(this.erase, 50);else {
            this.captionLength = 0;
            this.caption = '';
            this.deferred.resolve();
        }
    };

},{}],195:[function(require,module,exports){
    /**
     * uiProgressButton.js v1.0.0
     * http://www.codrops.com
     *
     * Licensed under the MIT license.
     * http://www.opensource.org/licenses/mit-license.php
     *
     * Copyright 2014, Codrops
     * http://www.codrops.com
     */

    module.exports = UIProgressButton;

    function getTransitionName() {
        var p = document.createElement('p').style;

        return 'transition' in p ? 'transitionend' : 'WebkitTransition' in p ? 'webkitTransitionEnd' : 'MozTransition' in p ? 'transitionend' : 'msTransition' in p ? 'MSTransitionEnd' : 'OTransition' in p ? 'oTransitionEnd' : null;
    }

    var transEndEventName = getTransitionName();

    function extend(a, b) {
        for (var key in b) if (b.hasOwnProperty(key)) a[key] = b[key];

        return a;
    }

    function SVGEl(el) {
        this.el = el;
        // the path elements
        this.paths = [].slice.call(this.el.querySelectorAll('path'));
        // we will save both paths and its lengths in arrays
        this.pathsArr = new Array();
        this.lengthsArr = new Array();
        this._init();
    }

    SVGEl.prototype._init = function () {
        var self = this;
        this.paths.forEach(function (path, i) {
            self.pathsArr[i] = path;
            path.style.strokeDasharray = self.lengthsArr[i] = path.getTotalLength();
        });

        // undraw stroke
        this.draw(0);
    };

// val in [0,1] : 0 - no stroke is visible, 1 - stroke is visible
    SVGEl.prototype.draw = function (val) {
        for (var i = 0, len = this.pathsArr.length; i < len; ++i) this.pathsArr[i].style.strokeDashoffset = this.lengthsArr[i] * (1 - val);
    };

    function UIProgressButton(el, options) {
        this.el = el;
        this.options = extend({}, this.options);
        extend(this.options, options);
        this._init();
    }

    UIProgressButton.prototype.options = {};

    UIProgressButton.prototype._init = function () {
        this.progressEl = new SVGEl(this.el.querySelector('svg.progress-circle'));
        this.successEl = new SVGEl(this.el.querySelector('svg.checkmark'));
        this.errorEl = new SVGEl(this.el.querySelector('svg.cross'));

        $(this.el).addClass('error plus');
        this.errorEl.draw(1);
    };

    UIProgressButton.prototype._submit = function () {
        $(this.el).addClass('loading').removeClass('plus');

        var self = this;
        var onEndBtnTransitionFn = function (ev) {
            if (transEndEventName) {
                if (ev.propertyName !== 'width') return false;
                this.removeEventListener(transEndEventName, onEndBtnTransitionFn);
            }

            this.setAttribute('disabled', '');

            if (typeof self.options.callback === 'function') {
                self.options.callback(self);
            } else {
                self.setProgress(1);
                self.stop();
            }
        };
    };

// runs after the progress reaches 100%
    UIProgressButton.prototype.stop = function (status) {
        var self = this;
        var endLoading = function () {
            self.progressEl.draw(0);

            if (typeof status === 'number') {
                var statusClass = status >= 0 ? 'success' : 'error';
                var statusEl = status >= 0 ? self.successEl : self.errorEl;

                statusEl.draw(1);
                $(self.el).addClass(statusClass);

                self.clear = function () {
                    $(self.el).removeClass(statusClass);
                    statusEl.draw(0);
                };
            }

            $(self.el).removeClass('loading error');
        };

        setTimeout(endLoading, 300);
    };

    UIProgressButton.prototype.clear = function () {};

    UIProgressButton.prototype.setProgress = function (val) {
        this.progressEl.draw(val);
    };

},{}],196:[function(require,module,exports){
    var BaseView = require('./abstract/template');
    var UserInfoFactory = require('../../../../factory/user-info');

    module.exports = BaseView.extend({
        height: null,
        template: require('./templates/template.hbs'),
        designAddedEvent: 'template.update.designed',

        addEvent: function (event) {
            var isLocked = this.design && this.design['is_premium'] === '1' && !this.isPremium;
            this.design && !isLocked && BaseView.prototype.addEvent.apply(this, arguments);
        },

        initialize: function (options) {
            BaseView.prototype.initialize.call(this);

            this.width = options.width;
            this.format = options.format;
            this.design = options.design;
            this.isCustomFormat = options.isCustomFormat;

            UserInfoFactory.get().then(_.bind(function (userInfo) {
                this.isPremium = _(userInfo['roles']).contains('ROLE_PREMIUM');

                this.render();
                this.initImageLoad();
            }, this));
        },

        render: function () {
            BaseView.prototype.render.apply(this, arguments);
            this.$el.toggleClass('locked', this.design && this.design['is_premium'] === '1' && !this.isPremium);
        },

        getTemplateRenderData: function () {
            if (this.format) return this.getFormatRenderData();

            var ratio = this.isCustomFormat ? this.canvas.contentW / this.canvas.contentH : this.design['format_width'] / this.design['format_height'];
            var thumbHeight = this.width * (1 / ratio);

            return {
                url: this.design['url'],
                is_premium_user: this.isPremium,
                is_premium_template: this.design['is_premium'] === '1',
                thumb_height: Math.floor(thumbHeight)
            };
        },

        getFormatRenderData: function () {
            var twoLinesDescriptionHeight = 56;
            var ratio = this.format['thumb_width'] / this.format['thumb_height'];
            var thumbHeight = this.width * (1 / ratio);

            return _.extend(this.format, {
                is_single_line: thumbHeight < twoLinesDescriptionHeight,
                thumb_height: Math.floor(thumbHeight)
            });
        },

        initImageLoad: function () {
            var isCustomFormat = this.isCustomFormat;

            this.$el.find('img').each(function () {
                this.onload = onImageLoad;
                this.src = $(this).data('src');
            });

            function onImageLoad() {
                var $image = $(this);
                $image.closest('.thumbnail.image').removeClass('loading');

                if (isCustomFormat) {
                    var $thumbnail = $image.parent();
                    $thumbnail.height($image.height()).addClass('custom');
                    $thumbnail.width() > $image.width() && $image.width($thumbnail.width()).removeAttr('height');
                } else $image.removeAttr('height');
            }
        },

        setTemplate: function () {
            BaseView.prototype.setTemplate.apply(this, arguments);
            INKIVE.DesignFacade.set('template', {
                'keep_stage_size': this.isCustomFormat,
                'designed': { 'id': this.design['id'] }
            });
        },

        isSameSize: function () {
            return this.canvas.contentW == this.design['format_width'] && this.canvas.contentH == this.design['format_height'];
        }
    });

},{"../../../../factory/user-info":81,"./abstract/template":182,"./templates/template.hbs":211}],197:[function(require,module,exports){
    var BaseView = require('./abstract/template');
    var thumbIndex = 0;

    module.exports = BaseView.extend({
        width: null,
        height: null,
        setCurrentPage: false,
        template: require('./templates/grid.hbs'),
        designAddedEvent: 'template.update.grid',

        initialize: function (options) {
            BaseView.prototype.initialize.call(this);

            this.setCurrentPage = options.setCurrentPage;
            this.size = options.size;
            this.format = options.format;
            this.numberOfPhotos = options.numberOfPhotos;

            this.processSVGData(options.data);
            this.render();
        },

        getTemplateRenderData: function () {
            return {
                defs: this.defs,
                content: this.svg,
                width: this.size.width,
                height: this.size.height
            };
        },

        processSVGData: function (data) {
            thumbIndex++;

            this.defs = replaceOwnIds(data.defs);
            this.svg = replaceImages(data.svg, data.defs);
            this.svg = replaceOwnIds(this.svg);
            this.svg = replaceClipPaths(this.svg);
            this.name = data.name;

            function replaceImages(str, defs) {
                INKIVE.SVGPlaceholderImage.setClipsData(defs);
                var imageExp = /<image xmlns:xlink="[^"]*" id="([^"]*)" clip-path="url\(#([^"]*)\)" [^>]*">[^<]*<\/image>/g;
                return str.replace(imageExp, function (prev, id, clipId) {
                    var svgPlaceholder = INKIVE.SVGPlaceholderImage.render(id, clipId);
                    return svgPlaceholder ? svgPlaceholder.svgString : prev;
                });
            }

            function replaceOwnIds(str) {
                return str.replace(/id="(.*?)"/g, 'id="$1-thumb-' + thumbIndex + '"');
            }

            function replaceClipPaths(str) {
                return str.replace(/clip-path="url\(#(.*?)\)"/g, 'clip-path="url(#$1-thumb-' + thumbIndex + ')"');
            }
        },

        setTemplate: function () {
            BaseView.prototype.setTemplate.apply(this, arguments);

            INKIVE.DesignFacade.set('template', {
                size: this.format,
                setCurrentPage: this.setCurrentPage,
                grid: {
                    'index_in_set': this.name,
                    'number_of_photos': this.numberOfPhotos
                }
            });
        },

        isSameSize: function () {
            return this.canvas.contentW == this.format['width'] && this.canvas.contentH == this.format['height'];
        }
    });

},{"./abstract/template":182,"./templates/grid.hbs":205}],198:[function(require,module,exports){
    var BaseView = require('../abstract/base');
    var DesignFacade = require('../../../../../facade/design/design');
    var AnalyticsDecorate = require('../../../../../analytics/decorate');

    module.exports = AnalyticsDecorate(require('../analytics/library-background'), BaseView.extend({
        template: require('../templates/library-background.hbs'),
        events: { 'click': 'addEvent' },

        addEvent: function (event) {
            DesignFacade.set('background', {
                source: this.item['data']['thumb']
            });
        },

        initialize: function (options) {
            this.item = options.item;
            BaseView.prototype.initialize.call(this);
            this.setImageListeners();
        },

        render: function () {
            this.$el.html(this.template(this.item));
        },

        setImageListeners: function () {
            var image = new Image();
            var $item = this.$el;
            var thumbnail = this.item['data']['thumb'];

            image.src = thumbnail;
            image.onload = function () {
                $item.find('.loading').addClass('disappear');
                $item.find('.image').css('background-image', 'url("' + thumbnail + '")');
            };
        }
    }));

},{"../../../../../analytics/decorate":4,"../../../../../facade/design/design":19,"../abstract/base":181,"../analytics/library-background":184,"../templates/library-background.hbs":206}],199:[function(require,module,exports){
    var BaseView = require('../abstract/base');
    var DesignFacade = require('../../../../../facade/design/design');
    var EditorFacade = require('../../../../../facade/editor/editor');
    var AnalyticsDecorate = require('../../../../../analytics/decorate');

    module.exports = AnalyticsDecorate(require('../analytics/library-color'), BaseView.extend({
        template: require('../templates/library-color.hbs'),
        events: {
            'mouseover': 'overThumbnailEvent',
            'click ul.options li[data-type="font"]': 'setFontColorEvent',
            'click ul.options li[data-type="fill"]': 'setFillColorEvent',
            'click ul.options li[data-type="stroke"]': 'setStrokeColorEvent',
            'click ul.options li[data-type="background"]': 'setBackgroundColorEvent'
        },

        setBackgroundColorEvent: function (event) {
            var color = $(event.currentTarget).closest('.color').find('.info .code').text();
            DesignFacade.set('background', { color: color });
        },

        setFontColorEvent: function (event) {
            var facadeElements = this.getSelectionFacadeElements();
            var elementsWithText = this.getElementsWithText(facadeElements);
            var color = $(event.currentTarget).closest('.color').find('.info .code').text();

            setTextsColor(_.filter(elementsWithText, this.isText));
            setStickersTextColor(_.filter(elementsWithText, this.isSticker));

            function setTextsColor(texts) {
                _.each(texts, function (text) {
                    DesignFacade.set(text['id'], { color: color });
                });
            }

            function setStickersTextColor(stickers) {
                _.each(stickers, function (sticker) {
                    var newTextsData = {};
                    _.each(DesignFacade.get(sticker['id'], 'texts'), function (text, index) {
                        newTextsData[index] = { color: color };
                    });

                    DesignFacade.set(sticker['id'], { texts: newTextsData });
                });
            }
        },

        setFillColorEvent: function (event) {
            var facadeElements = this.getSelectionFacadeElements();
            var elementsWithFill = this.getElementsWithFill(facadeElements);
            var color = $(event.currentTarget).closest('.color').find('.info .code').text();

            setShapesFillColor(_.filter(elementsWithFill, this.isShape));
            setStickersFillColor(_.filter(elementsWithFill, this.isSticker));

            function setShapesFillColor(shapes) {
                _.each(shapes, function (shape) {
                    DesignFacade.set(shape['id'], { fill: { color: color } });
                });
            }

            function setStickersFillColor(stickers) {
                _.each(stickers, function (sticker) {
                    var newShapesData = {};
                    _.each(DesignFacade.get(sticker['id'], 'shapes'), function (shape, index) {
                        if (shape.fill && shape.fill.color) newShapesData[index] = { fill: { color: color } };
                    });

                    DesignFacade.set(sticker['id'], { shapes: newShapesData });
                });
            }
        },

        setStrokeColorEvent: function (event) {
            var facadeElements = this.getSelectionFacadeElements();
            var elementsWithStroke = this.getElementsWithStroke(facadeElements);
            var color = $(event.currentTarget).closest('.color').find('.info .code').text();

            setShapesStrokeColor(_.filter(elementsWithStroke, this.isShape));
            setStickersStrokeColor(_.filter(elementsWithStroke, this.isSticker));

            function setShapesStrokeColor(shapes) {
                _.each(shapes, function (shape) {
                    DesignFacade.set(shape['id'], { stroke: { color: color } });
                });
            }

            function setStickersStrokeColor(stickers) {
                _.each(stickers, function (sticker) {
                    var newShapesData = {};
                    _.each(DesignFacade.get(sticker['id'], 'shapes'), function (shape, index) {
                        if (shape.stroke && shape.stroke.color && shape.stroke.width !== 0) newShapesData[index] = { stroke: { color: color } };
                    });

                    DesignFacade.set(sticker['id'], { shapes: newShapesData });
                });
            }
        },

        overThumbnailEvent: function (event) {
            var $options = this.$el.find('ul.options li');
            var facadeElements = this.getSelectionFacadeElements();

            $options.filter('[data-type="font"]').toggleClass('disabled', !this.getElementsWithText(facadeElements).length);

            $options.filter('[data-type="fill"]').toggleClass('disabled', !this.getElementsWithFill(facadeElements).length);

            $options.filter('[data-type="stroke"]').toggleClass('disabled', !this.getElementsWithStroke(facadeElements).length);
        },

        getSelectionFacadeElements: function () {
            var currentElems = _.compact(_.toArray(this.canvas.getSelectedElems()));

            return _.map(currentElems, function (elem) {
                return {
                    type: EditorFacade.getType(elem),
                    id: elem.getAttribute('id')
                };
            });
        },

        getElementsWithText: function (facadeElements) {
            var stickers = _.filter(facadeElements, this.isSticker);

            return _.union(_.filter(facadeElements, this.isText), _.filter(stickers, function (data) {
                return !_.isEmpty(DesignFacade.get(data['id'], 'texts'));
            }));
        },

        getElementsWithStroke: function (facadeElements) {
            var shapes = _.filter(facadeElements, this.isShape);
            var stickers = _.filter(facadeElements, this.isSticker);

            return _.union(_.filter(shapes, function (data) {
                var stroke = DesignFacade.get(data['id'], 'stroke');
                return stroke && stroke.color && stroke.width !== 0;
            }), _.filter(stickers, function (data) {
                return _.any(DesignFacade.get(data['id'], 'shapes'), function (shape) {
                    return shape.stroke && shape.stroke.color && shape.stroke.width !== 0;
                });
            }));
        },

        getElementsWithFill: function (facadeElements) {
            var shapes = _.filter(facadeElements, this.isShape);
            var stickers = _.filter(facadeElements, this.isSticker);

            return _.union(_.filter(shapes, function (data) {
                return DesignFacade.get(data['id'], 'fill.color');
            }), _.filter(stickers, function (data) {
                return _.any(DesignFacade.get(data['id'], 'shapes'), function (shape) {
                    return shape.fill && shape.fill.color;
                });
            }));
        },

        isText: function (data) {
            return data['type'] === 'text';
        },
        isShape: function (data) {
            return data['type'] === 'shape';
        },
        isSticker: function (data) {
            return data['type'] === 'sticker';
        },

        initialize: function (options) {
            this.item = options.item;
            BaseView.prototype.initialize.call(this);
        },

        render: function () {
            this.$el.html(this.template(this.item));
        }
    }));

},{"../../../../../analytics/decorate":4,"../../../../../facade/design/design":19,"../../../../../facade/editor/editor":45,"../abstract/base":181,"../analytics/library-color":185,"../templates/library-color.hbs":207}],200:[function(require,module,exports){
    var BaseView = require('../abstract/base');
    var DesignFacade = require('../../../../../facade/design/design');
    var AnalyticsDecorate = require('../../../../../analytics/decorate');

    module.exports = AnalyticsDecorate(require('../analytics/library-image'), BaseView.extend({
        template: require('../templates/library-image.hbs'),

        addElement: function (elementData) {
            DesignFacade.create('image', _.extend({
                source: { url: this.item['data']['thumb'] }
            }, elementData));
        },

        getMouseUpElementData: function (event) {
            return _.extend({ placeholder: false }, BaseView.prototype.getMouseUpElementData.call(this, event));
        },

        initialize: function (options) {
            var tool = INKIVE.Tool.getInstance();

            this.item = options.item;
            this.editor = tool.editor;
            this.canvas = this.editor.canvas;

            BaseView.prototype.initialize.call(this);
            this.setImageListeners();
        },

        render: function () {
            this.$el.html(this.template(this.item));
            this.$draggable = this.$el.find('.draggable');
        },

        mouseMove: function (event) {
            BaseView.prototype.mouseMove.apply(this, arguments);

            var offset = this.editor.getOffset();
            var mouse_x = event.clientX;
            var mouse_y = event.clientY;

            var layoutBox = this.canvas.runExtensions('overLayoutImage', {
                elem: this.$draggableClone.get(0),
                mouse_x: mouse_x - offset.x,
                mouse_y: mouse_y - offset.y
            });

            var isOverEditableLayout = layoutBox && !$(layoutBox).hasClass('locked-image');
            this.layoutTarget = isOverEditableLayout && layoutBox;
        },

        mouseUp: function (event) {
            event.preventDefault();

            this.layoutTarget && this.dropOverLayoutbox();
            this.layoutTarget || BaseView.prototype.mouseUp.apply(this, arguments);
        },

        dropOverLayoutbox: function () {
            var prevAttributesData = this.canvas._t.layout_prvAttr;
            if (prevAttributesData) {
                prevAttributesData['xlink:href'] = prevAttributesData.url;

                this.canvas.undoMgr.addCommandToHistory(new svgedit.history.ChangeElementCommand(this.layoutTarget, { '#layout-delete': prevAttributesData }));
            }

            this.endDragging();
            this.canvas.runExtensions('addLayoutImage', {
                elem: this.layoutTarget,
                data: { version: this.item.data }
            });

            if (this.canvas._t.layout_prvElem) {
                this.canvas._t.layout_prvElem = null;
                this.canvas._t.layout_prvAttr = null;
            }
        },

        setImageListeners: function () {
            var image = new Image();
            var $item = this.$el;

            image.src = this.item['data']['thumb'];
            image.onload = _.bind(function () {
                var imageRatio = image.width / image.height;

                $item.find('.loading').addClass('disappear');
                $item.height($item.width() / imageRatio);
                this.trigger('resize');
            }, this);
        }
    }));

},{"../../../../../analytics/decorate":4,"../../../../../facade/design/design":19,"../abstract/base":181,"../analytics/library-image":186,"../templates/library-image.hbs":208}],201:[function(require,module,exports){
    var BaseView = require('../abstract/base');
    var DesignFacade = require('../../../../../facade/design/design');
    var AnalyticsDecorate = require('../../../../../analytics/decorate');

    module.exports = AnalyticsDecorate(require('../analytics/library-logo'), BaseView.extend({
        template: require('../templates/library-logo.hbs'),

        addElement: function (elementData) {
            var isImageLogo = this.item['data']['type'] == 1;

            isImageLogo && this.addImageLogoElement(elementData);
            isImageLogo || this.addSVGLogoElement(elementData);
        },

        addImageLogoElement: function (elementData) {
            DesignFacade.once('image.create', this.setPostCreateAttributes);
            DesignFacade.create('image', _.extend({
                placeholder: false,
                source: { url: this.item['data']['thumb'] }
            }, elementData));
        },

        addSVGLogoElement: function (elementData) {
            var svgContent = this.item['data']['content'];

            if (this.item['data']['type'] == 3) svgContent = svgContent.replace(/<g class="background"(.*?)<\/g>/, '');

            DesignFacade.once('sticker.create', this.setPostCreateAttributes);
            DesignFacade.create('sticker', _.extend({
                'content': Base64.encode(svgContent)
            }, elementData));
        },

        setPostCreateAttributes: function (data) {
            $('#' + data.id).addClass('logo');
        },

        initialize: function (options) {
            this.item = options.item;
            BaseView.prototype.initialize.call(this);
            this.setImageListeners();
        },

        render: function () {
            this.$el.html(this.template(this.item));
            this.$draggable = this.$el.find('.draggable');
        },

        setImageListeners: function () {
            var image = new Image();
            var $item = this.$el;
            var thumbnail = this.item['data']['thumb'];

            image.src = thumbnail;
            image.onload = function () {
                $item.find('.loading').addClass('disappear');
                $item.find('.image').css('background-image', 'url("' + thumbnail + '")');
            };
        }
    }));

},{"../../../../../analytics/decorate":4,"../../../../../facade/design/design":19,"../abstract/base":181,"../analytics/library-logo":187,"../templates/library-logo.hbs":209}],202:[function(require,module,exports){
    var BaseView = require('../abstract/base');
    var DesignFacade = require('../../../../../facade/design/design');
    var AnalyticsDecorate = require('../../../../../analytics/decorate');

    module.exports = AnalyticsDecorate(require('../analytics/library-text'), BaseView.extend({
        template: require('../templates/library-text.hbs'),

        addElement: function (elementData) {
            var data = this.item['data'];

            DesignFacade.once('text.create', function (text) {
                DesignFacade.set(text['id'], {
                    color: data['color_code'],
                    spacing: {
                        letter: data['letter_spacing'],
                        word: data['word_spacing'],
                        line: data['line_spacing']
                    }
                });
            });

            DesignFacade.create('text', _.extend({
                content: data['default_content'] || data['name'] || data['family'],
                decoration: data['underline'] ? 'underline' : null,
                font: {
                    family: data['family'],
                    size: data['size'],
                    weight: data['bold'] ? 'bold' : null,
                    style: data['italic'] ? 'italic' : null
                }
            }, elementData));
        },

        initialize: function (options) {
            this.item = options.item;
            BaseView.prototype.initialize.call(this);
        },

        render: function () {
            this.$el.html(this.template(this.item));
            this.$draggable = this.$el.find('.draggable');
        }
    }));

},{"../../../../../analytics/decorate":4,"../../../../../facade/design/design":19,"../abstract/base":181,"../analytics/library-text":188,"../templates/library-text.hbs":210}],203:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        return "<div class=\"uploader progress-button\">\n  <svg class=\"progress-circle\" width=\"70\" height=\"70\">\n    <path d=\"m35,2.5c17.955803,0 32.5,14.544199 32.5,32.5c0,17.955803 -14.544197,32.5 -32.5,32.5c-17.955803,0 -32.5,-14.544197 -32.5,-32.5c0,-17.955801 14.544197,-32.5 32.5,-32.5z\"/>\n  </svg>\n\n  <svg class=\"checkmark\" width=\"70\" height=\"70\">\n    <path d=\"m31.5,46.5l15.3,-23.2\"/>\n    <path d=\"m31.5,46.5l-8.5,-7.1\"/>\n  </svg>\n\n  <svg class=\"cross\" width=\"70\" height=\"70\">\n    <path d=\"m35,35l-9.3,-9.3\"/>\n    <path d=\"m35,35l9.3,9.3\"/>\n    <path d=\"m35,35l-9.3,9.3\"/>\n    <path d=\"m35,35l9.3,-9.3\"/>\n  </svg>\n</div>\n";
    },"3":function(container,depth0,helpers,partials,data) {
        return " hidden";
    },"5":function(container,depth0,helpers,partials,data) {
        return "style=\"opacity: 0\"";
    },"7":function(container,depth0,helpers,partials,data) {
        var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

        return "<img id=\""
            + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"id","hash":{},"data":data}) : helper)))
            + "\" src=\""
            + alias4(((helper = (helper = helpers.src || (depth0 != null ? depth0.src : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"src","hash":{},"data":data}) : helper)))
            + "\">";
    },"9":function(container,depth0,helpers,partials,data) {
        var alias1=container.escapeExpression;

        return "  <div class=\"thumb_sticker\" data-popover=\"tooltip\" data-original-title=\""
            + alias1((helpers.t || (depth0 && depth0.t) || helpers.helperMissing).call(depth0 != null ? depth0 : {},"tool.images.times_used",depth0,{"name":"t","hash":{},"data":data}))
            + "\">"
            + alias1(container.lambda(depth0, depth0))
            + "</div>\n";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=helpers.blockHelperMissing, buffer = "";

        stack1 = ((helper = (helper = helpers.upload || (depth0 != null ? depth0.upload : depth0)) != null ? helper : alias2),(options={"name":"upload","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.upload) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += "\n<a class=\"item";
        stack1 = ((helper = (helper = helpers.image || (depth0 != null ? depth0.image : depth0)) != null ? helper : alias2),(options={"name":"image","hash":{},"fn":container.noop,"inverse":container.program(3, data, 0),"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.image) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += "\"";
        stack1 = ((helper = (helper = helpers.no_opacity || (depth0 != null ? depth0.no_opacity : depth0)) != null ? helper : alias2),(options={"name":"no_opacity","hash":{},"fn":container.program(5, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.no_opacity) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += ">\n  ";
        stack1 = ((helper = (helper = helpers.image || (depth0 != null ? depth0.image : depth0)) != null ? helper : alias2),(options={"name":"image","hash":{},"fn":container.program(7, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.image) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += "\n</a>\n\n";
        stack1 = ((helper = (helper = helpers.times_used || (depth0 != null ? depth0.times_used : depth0)) != null ? helper : alias2),(options={"name":"times_used","hash":{},"fn":container.program(9, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.times_used) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer;
    },"useData":true});

},{"hbsfy/runtime":373}],204:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

        return "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\">\n  <rect x=\"0\" y=\"0\" width=\"32\" height=\"32\" fill-opacity=\"1\" stroke=\""
            + alias4(((helper = (helper = helpers.stroke || (depth0 != null ? depth0.stroke : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"stroke","hash":{},"data":data}) : helper)))
            + "\" stroke-width=\"1px\" fill=\""
            + alias4(((helper = (helper = helpers.color || (depth0 != null ? depth0.color : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"color","hash":{},"data":data}) : helper)))
            + "\"></rect>\n</svg>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],205:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

        return "<a class=\"item\">\n  <svg width=\""
            + alias4(((helper = (helper = helpers.width || (depth0 != null ? depth0.width : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"width","hash":{},"data":data}) : helper)))
            + "\" height=\""
            + alias4(((helper = (helper = helpers.height || (depth0 != null ? depth0.height : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"height","hash":{},"data":data}) : helper)))
            + "\">\n    <rect width=\""
            + alias4(((helper = (helper = helpers.width || (depth0 != null ? depth0.width : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"width","hash":{},"data":data}) : helper)))
            + "\" height=\""
            + alias4(((helper = (helper = helpers.height || (depth0 != null ? depth0.height : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"height","hash":{},"data":data}) : helper)))
            + "\" fill=\"#313d43\" />\n    <defs>"
            + ((stack1 = ((helper = (helper = helpers.defs || (depth0 != null ? depth0.defs : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"defs","hash":{},"data":data}) : helper))) != null ? stack1 : "")
            + "</defs>\n    "
            + ((stack1 = ((helper = (helper = helpers.content || (depth0 != null ? depth0.content : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"content","hash":{},"data":data}) : helper))) != null ? stack1 : "")
            + "\n  </svg>\n</a>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],206:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        var stack1;

        return "<span>"
            + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.name : stack1), depth0))
            + "</span>";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, alias1=depth0 != null ? depth0 : {}, alias2=container.escapeExpression;

        return "<div class=\"image\">\n  <div class=\"loading\" style=\"background-image: url('"
            + alias2((helpers.route || (depth0 && depth0.route) || helpers.helperMissing).call(alias1,"assets/img/editor/loading-128.gif",{"name":"route","hash":{},"data":data}))
            + "')\"></div>\n  <img class=\"draggable\" src=\""
            + alias2(container.lambda(((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.thumbnail : stack1), depth0))
            + "\" />\n  <div class=\"overlay\">"
            + ((stack1 = helpers["if"].call(alias1,((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.name : stack1),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "</div>\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],207:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        return " dark";
    },"3":function(container,depth0,helpers,partials,data) {
        return "<span class=\"name\">"
            + container.escapeExpression(container.lambda(depth0, depth0))
            + "</span><br>";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, alias1=depth0 != null ? depth0 : {}, alias2=container.lambda, alias3=container.escapeExpression, alias4=helpers.helperMissing;

        return "<div class=\"color"
            + ((stack1 = helpers["if"].call(alias1,((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.is_dark : stack1),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "\" style=\"background-color: "
            + alias3(alias2(((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.color_code : stack1), depth0))
            + "\">\n  <div class=\"info\">\n    "
            + ((stack1 = helpers.blockHelperMissing.call(depth0,alias2(((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.name : stack1), depth0),{"name":"data.name","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "\n    <span class=\"code\">"
            + alias3(alias2(((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.color_code : stack1), depth0))
            + "</span>\n  </div>\n\n  <div class=\"overlay\">\n    <ul class=\"options\">\n      <li data-type=\"fill\" data-popover=\"tooltip\" data-original-title=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias4).call(alias1,"tool.library.tooltip.fill",{"name":"t","hash":{},"data":data}))
            + "\"><i class=\"fa fa-circle\"></i></li>\n      <li data-type=\"stroke\" data-popover=\"tooltip\" data-original-title=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias4).call(alias1,"tool.library.tooltip.stroke",{"name":"t","hash":{},"data":data}))
            + "\"><i class=\"fa fa-circle-o\"></i></li>\n      <li data-type=\"font\" data-popover=\"tooltip\" data-original-title=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias4).call(alias1,"tool.library.tooltip.font",{"name":"t","hash":{},"data":data}))
            + "\"><i class=\"fa fa-font\"></i></li>\n      <li data-type=\"background\" data-popover=\"tooltip\" data-original-title=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias4).call(alias1,"tool.library.tooltip.background",{"name":"t","hash":{},"data":data}))
            + "\"><i class=\"fa fa-th\"></i></li>\n    </ul>\n  </div>\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],208:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        var stack1;

        return "<span>"
            + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.name : stack1), depth0))
            + "</span>";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, alias1=depth0 != null ? depth0 : {}, alias2=container.escapeExpression;

        return "<div class=\"image item\">\n  <div class=\"loading\" style=\"background-image: url('"
            + alias2((helpers.route || (depth0 && depth0.route) || helpers.helperMissing).call(alias1,"assets/img/editor/loading-128.gif",{"name":"route","hash":{},"data":data}))
            + "')\"></div>\n  <img class=\"draggable\" src=\""
            + alias2(container.lambda(((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.thumb : stack1), depth0))
            + "\" width=\"100%\" />\n  <div class=\"overlay\">"
            + ((stack1 = helpers["if"].call(alias1,((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.name : stack1),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "</div>\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],209:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        var stack1;

        return "<span>"
            + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.name : stack1), depth0))
            + "</span>";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, alias1=depth0 != null ? depth0 : {}, alias2=container.escapeExpression;

        return "<div class=\"image item\">\n  <div class=\"loading\" style=\"background-image: url('"
            + alias2((helpers.route || (depth0 && depth0.route) || helpers.helperMissing).call(alias1,"assets/img/editor/loading-128.gif",{"name":"route","hash":{},"data":data}))
            + "')\"></div>\n  <img class=\"draggable\" src=\""
            + alias2(container.lambda(((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.thumb : stack1), depth0))
            + "\" />\n  <div class=\"overlay\">"
            + ((stack1 = helpers["if"].call(alias1,((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.name : stack1),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "</div>\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],210:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        return " dark";
    },"3":function(container,depth0,helpers,partials,data) {
        return "font-weight: bold;";
    },"5":function(container,depth0,helpers,partials,data) {
        return "font-style: italic;";
    },"7":function(container,depth0,helpers,partials,data) {
        return "text-decoration: underline;";
    },"9":function(container,depth0,helpers,partials,data) {
        return container.escapeExpression(container.lambda(depth0, depth0));
    },"11":function(container,depth0,helpers,partials,data) {
        var stack1;

        return container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.family : stack1), depth0));
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, alias1=depth0 != null ? depth0 : {}, alias2=container.lambda, alias3=container.escapeExpression, alias4=helpers.blockHelperMissing;

        return "<div class=\"text item"
            + ((stack1 = helpers["if"].call(alias1,((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.is_dark : stack1),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "\">\n  <span class=\"color\">\n    <i class=\"fa fa-circle\" style=\"color: "
            + alias3(alias2(((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.color_code : stack1), depth0))
            + ";\"></i>\n    <span class=\"size\">"
            + alias3(alias2(((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.size : stack1), depth0))
            + "</span>\n  </span>\n  <span class=\"name\" style=\"\n    font-family: "
            + alias3(alias2(((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.family : stack1), depth0))
            + ";\n    letter-spacing: "
            + alias3(alias2(((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.letter_spacing : stack1), depth0))
            + "px;\n    word-spacing: "
            + alias3(alias2(((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.word_spacing : stack1), depth0))
            + "px;\n    "
            + ((stack1 = helpers["if"].call(alias1,((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.bold : stack1),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "\n    "
            + ((stack1 = helpers["if"].call(alias1,((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.italic : stack1),{"name":"if","hash":{},"fn":container.program(5, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "\n    "
            + ((stack1 = helpers["if"].call(alias1,((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.underline : stack1),{"name":"if","hash":{},"fn":container.program(7, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "\">\n    "
            + ((stack1 = alias4.call(depth0,alias2(((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.name : stack1), depth0),{"name":"data.name","hash":{},"fn":container.program(9, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "\n    "
            + ((stack1 = alias4.call(depth0,alias2(((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.name : stack1), depth0),{"name":"data.name","hash":{},"fn":container.noop,"inverse":container.program(11, data, 0),"data":data})) != null ? stack1 : "")
            + "\n  </span>\n  <div class=\"draggable\" style=\"\n    font-family: "
            + alias3(alias2(((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.family : stack1), depth0))
            + ";\n    font-size: "
            + alias3(alias2(((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.size : stack1), depth0))
            + "px;\n    color: "
            + alias3(alias2(((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.color_code : stack1), depth0))
            + ";\n    letter-spacing: "
            + alias3(alias2(((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.letter_spacing : stack1), depth0))
            + "px; \n    word-spacing: "
            + alias3(alias2(((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.word_spacing : stack1), depth0))
            + "px;\n    "
            + ((stack1 = helpers["if"].call(alias1,((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.bold : stack1),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "\n    "
            + ((stack1 = helpers["if"].call(alias1,((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.italic : stack1),{"name":"if","hash":{},"fn":container.program(5, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "\n    "
            + ((stack1 = helpers["if"].call(alias1,((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.underline : stack1),{"name":"if","hash":{},"fn":container.program(7, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "\">\n    "
            + ((stack1 = alias4.call(depth0,alias2(((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.name : stack1), depth0),{"name":"data.name","hash":{},"fn":container.program(9, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "\n    "
            + ((stack1 = alias4.call(depth0,alias2(((stack1 = (depth0 != null ? depth0.data : depth0)) != null ? stack1.name : stack1), depth0),{"name":"data.name","hash":{},"fn":container.noop,"inverse":container.program(11, data, 0),"data":data})) != null ? stack1 : "")
            + "\n  </div>\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],211:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        return "data-original-title=\""
            + container.escapeExpression(container.lambda(depth0, depth0))
            + "\"";
    },"3":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression, buffer =
            "<p class=\"description";
        stack1 = ((helper = (helper = helpers.is_single_line || (depth0 != null ? depth0.is_single_line : depth0)) != null ? helper : alias2),(options={"name":"is_single_line","hash":{},"fn":container.program(4, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.is_single_line) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "\">\n  <label>"
            + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
            + "</label>\n  <span>"
            + alias4(((helper = (helper = helpers.width || (depth0 != null ? depth0.width : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"width","hash":{},"data":data}) : helper)))
            + "x"
            + alias4(((helper = (helper = helpers.height || (depth0 != null ? depth0.height : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"height","hash":{},"data":data}) : helper)))
            + alias4(((helper = (helper = helpers.unit || (depth0 != null ? depth0.unit : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"unit","hash":{},"data":data}) : helper)))
            + "</span>\n</p>\n";
    },"4":function(container,depth0,helpers,partials,data) {
        return " no-break";
    },"6":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=helpers.blockHelperMissing, buffer = "";

        stack1 = ((helper = (helper = helpers.is_premium_user || (depth0 != null ? depth0.is_premium_user : depth0)) != null ? helper : alias2),(options={"name":"is_premium_user","hash":{},"fn":container.noop,"inverse":container.program(7, data, 0),"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.is_premium_user) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += "\n<div class=\"premium\">\n  ";
        stack1 = ((helper = (helper = helpers.is_premium_user || (depth0 != null ? depth0.is_premium_user : depth0)) != null ? helper : alias2),(options={"name":"is_premium_user","hash":{},"fn":container.program(9, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.is_premium_user) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += "\n  ";
        stack1 = ((helper = (helper = helpers.is_premium_user || (depth0 != null ? depth0.is_premium_user : depth0)) != null ? helper : alias2),(options={"name":"is_premium_user","hash":{},"fn":container.noop,"inverse":container.program(11, data, 0),"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.is_premium_user) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "\n</div>\n";
    },"7":function(container,depth0,helpers,partials,data) {
        return "  <a href=\""
            + container.escapeExpression((helpers.route || (depth0 && depth0.route) || helpers.helperMissing).call(depth0 != null ? depth0 : {},"library?r=upgrade",{"name":"route","hash":{},"data":data}))
            + "\" target=\"_blank\" class=\"unlock\">\n      <span><span>Unlock premium content</span></span>\n  </a>\n";
    },"9":function(container,depth0,helpers,partials,data) {
        return "<i class=\"fa fa-unlock-alt\" aria-hidden=\"true\"></i>";
    },"11":function(container,depth0,helpers,partials,data) {
        return "<i class=\"fa fa-lock\" aria-hidden=\"true\"></i>";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression, buffer =
            "<img data-src=\""
            + alias4(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"url","hash":{},"data":data}) : helper)))
            + "\" data-popover=\"tooltip\" ";
        stack1 = ((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(options={"name":"name","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.name) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + " height="
            + alias4(((helper = (helper = helpers.thumb_height || (depth0 != null ? depth0.thumb_height : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"thumb_height","hash":{},"data":data}) : helper)))
            + ">\n<span class=\"overlay\"></span>\n"
            + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.name : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "\n"
            + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.is_premium_template : depth0),{"name":"if","hash":{},"fn":container.program(6, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "");
    },"useData":true});

},{"hbsfy/runtime":373}],212:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

        return "        <a style=\"font-family: "
            + alias4(((helper = (helper = helpers.family || (depth0 != null ? depth0.family : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"family","hash":{},"data":data}) : helper)))
            + ";\" data-fontid=\""
            + alias4(((helper = (helper = helpers.index || (data && data.index)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"index","hash":{},"data":data}) : helper)))
            + "\">"
            + alias4(((helper = (helper = helpers.family || (depth0 != null ? depth0.family : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"family","hash":{},"data":data}) : helper)))
            + "</a>\n";
    },"3":function(container,depth0,helpers,partials,data) {
        return " applied";
    },"5":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, buffer =
            "    <li class=\"underline-font\">\n      <a class=\"btn btn-onmenu";
        stack1 = ((helper = (helper = helpers.text_decoration || (depth0 != null ? depth0.text_decoration : depth0)) != null ? helper : helpers.helperMissing),(options={"name":"text_decoration","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data}),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : {},options) : helper));
        if (!helpers.text_decoration) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "\" data-popover=\"tooltip\" data-original-title=\"Underline\" data-title=\"Underline\">\n        <i class=\"icon-underline\"></i>\n      </a>\n    </li>\n";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression, alias5=helpers.blockHelperMissing, buffer =
            "<div class=\"line-container\">\n  <a id=\""
            + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"id","hash":{},"data":data}) : helper)))
            + "\" class=\"item\" data-popover=\"tooltip\" data-original-title=\""
            + alias4(((helper = (helper = helpers.font_family || (depth0 != null ? depth0.font_family : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"font_family","hash":{},"data":data}) : helper)))
            + ": "
            + alias4(((helper = (helper = helpers.font_size || (depth0 != null ? depth0.font_size : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"font_size","hash":{},"data":data}) : helper)))
            + "\" style=\"font-size: "
            + alias4(((helper = (helper = helpers.font_size || (depth0 != null ? depth0.font_size : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"font_size","hash":{},"data":data}) : helper)))
            + "; font-family: "
            + alias4(((helper = (helper = helpers.font_family || (depth0 != null ? depth0.font_family : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"font_family","hash":{},"data":data}) : helper)))
            + "; font-weight: "
            + alias4(((helper = (helper = helpers.font_weight || (depth0 != null ? depth0.font_weight : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"font_weight","hash":{},"data":data}) : helper)))
            + "; font-style: "
            + alias4(((helper = (helper = helpers.font_style || (depth0 != null ? depth0.font_style : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"font_style","hash":{},"data":data}) : helper)))
            + "; text-decoration: "
            + alias4(((helper = (helper = helpers.text_decoration || (depth0 != null ? depth0.text_decoration : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"text_decoration","hash":{},"data":data}) : helper)))
            + "\">&nbsp;</a>\n\n  <input type=\"text\" />\n  <a href=\"#\" class=\"toggle-options\"><i class=\"icon-sound-mix\"></i></a>\n</div>\n\n<div class=\"menu options hidden\">\n  <ul>\n    <li class=\"fonts-list\">\n      <a class=\"btn btn-onmenu toggle\">\n        <i class=\"icon-font\"></i>\n        <span class=\"ui-dropdown-title\">"
            + alias4(((helper = (helper = helpers.font_family || (depth0 != null ? depth0.font_family : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"font_family","hash":{},"data":data}) : helper)))
            + "</span>\n        <i class=\"icon-unfold_more\"></i>\n      </a>\n      <div class=\"ui-dropdown-items ui-dropdown-div hidden\">\n"
            + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.fonts : depth0),{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "      </div>\n    </li>\n\n    <li class=\"bold-font\">\n      <a class=\"btn btn-onmenu";
        stack1 = ((helper = (helper = helpers.font_weight || (depth0 != null ? depth0.font_weight : depth0)) != null ? helper : alias2),(options={"name":"font_weight","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.font_weight) { stack1 = alias5.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += "\" data-original-title=\"Bold\" data-title=\"Bold\">\n        <i class=\"icon-bold\"></i>\n      </a>\n    </li>\n\n    <li class=\"italic-font\">\n      <a class=\"btn btn-onmenu";
        stack1 = ((helper = (helper = helpers.font_style || (depth0 != null ? depth0.font_style : depth0)) != null ? helper : alias2),(options={"name":"font_style","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.font_style) { stack1 = alias5.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += "\" data-original-title=\"Italic\" data-title=\"Italic\">\n        <i class=\"icon-italic\"></i>\n      </a>\n    </li>\n\n";
        stack1 = ((helper = (helper = helpers.Mobile || (depth0 != null ? depth0.Mobile : depth0)) != null ? helper : alias2),(options={"name":"Mobile","hash":{},"fn":container.noop,"inverse":container.program(5, data, 0),"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.Mobile) { stack1 = alias5.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "\n    <li>\n      <a class=\"btn btn-onmenu begin-edit\" data-popover=\"tooltip\" data-original-title=\""
            + alias4((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"popupmenu.text_begin_edit.dropdown_title",{"name":"t","hash":{},"data":data}))
            + "\" data-title=\""
            + alias4((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"popupmenu.text_begin_edit.dropdown_title",{"name":"t","hash":{},"data":data}))
            + "\">\n        <i class=\"icon-edit\"></i>\n      </a>\n    </li>\n  </ul>\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],213:[function(require,module,exports){
    var BaseView = require('./abstract/SVG');
    var AnalyticsDecorate = require('../../../../analytics/decorate');

    module.exports = AnalyticsDecorate(require('./analytics/text-banner'), BaseView.extend({
        invertFilter: {
            '-webkit-filter': 'grayscale(1) invert(1)',
            'filter': 'grayscale(1) invert(1)'
        },
        regularFilter: {
            '-webkit-filter': 'grayscale(1)',
            'filter': 'grayscale(1)'
        },

        setImageListeners: function (data) {
            var $image = this.$el.find('img');

            $image[0].crossOrigin = 'Anonymous';
            $image.on('load', _.bind(this.processImage, this, $image));
        },

        getTemplateRenderData: function () {
            return {
                no_opacity: true,
                image: { src: this.svg['url'] }
            };
        },

        processImage: function ($image) {
            try {
                var numerOfPixels,
                    sum,
                    grey = 255 / 2;
                var pixelData = getPixelData();
                var pixelsGray = [];

                for (var i = 0, n = pixelData.length; i < n; i += 4) {
                    var r = pixelData[i + 0];
                    var g = pixelData[i + 1];
                    var b = pixelData[i + 2];

                    pixelData[i + 3] && pixelsGray.push((r + g + b) / 3);
                }

                numerOfPixels = pixelsGray.length;
                sum = _.reduce(pixelsGray, function (memo, num) {
                    return memo + num;
                }, 0);
                pixelsGray = sum / numerOfPixels;

                $image.css(pixelsGray < grey ? this.invertFilter : this.regularFilter);
            } catch (err) {
                $image.css(this.invertFilter);
            }

            this.resize();
            $image.parent().css('opacity', 1);

            function getPixelData() {
                var canvas = $('<canvas>')[0];
                var context = canvas.getContext('2d');

                var w = $image.width();
                var h = $image.height();

                canvas.width = w;
                canvas.height = h;

                context.drawImage($image[0], 0, 0, w, h);
                return context.getImageData(0, 0, w, h).data;
            }
        }
    }));

},{"../../../../analytics/decorate":4,"./abstract/SVG":180,"./analytics/text-banner":190}],214:[function(require,module,exports){
    var BaseView = require('./abstract/base');
    var TypeEffect = require('./components/type-effect');
    var humps = require('../../../../utils/humps');
    var AppDecorate = require('../../../../app/decorate');
    var DesignFacade = require('../../../../facade/design/design');
    var AnalyticsDecorate = require('../../../../analytics/decorate');
    var EditorFacade = require('../../../../facade/editor/editor');

    module.exports = AnalyticsDecorate(require('./analytics/text'), AppDecorate(require('./app/text'), BaseView.extend({
        template: require('./templates/text.hbs'),
        width: null,
        height: null,

        events: _.extend({
            'click a.toggle-options': 'toggleOptionsEvent',
            'click  .btn.begin-edit': 'startEditingEvent',
            'blur .line-container input': 'endEditingEvent',
            'keyup .line-container input': 'keyupEvent',
            'keydown .line-container input': 'keydownEvent',
            'click .options .fonts-list': 'displayFontFamiliesEvent',
            'click .options .bold-font a': 'toggleBoldFontEvent',
            'click .options .italic-font a': 'toggleItalicFontEvent',
            'click .options .underline-font a': 'toggleUnderlineFontEvent',
            'click .options .fonts-list .ui-dropdown-items a': 'changeFontFamilyEvent'
        }, BaseView.prototype.events),

        changeFontFamilyEvent: function (event) {
            var $text = this.$el.find('.line-container > .item');
            var $options = this.$el.find('.options');
            var fontFamily = $(event.currentTarget).css('font-family');

            $text.css({
                'font-family': fontFamily,
                'font-weight': '',
                'font-style': '',
                'text-decoration': ''
            });

            $options.find('.fonts-list .ui-dropdown-title').text(this.getQuoteScaped(fontFamily));
            $options.find('.btn-onmenu').removeClass('applied');
            this.toggleFontAvailableOptions($(event.currentTarget).data('fontid'));

            this.trigger('change');
        },

        getQuoteScaped: function (fontFamily) {
            return fontFamily.replace(/^['|"](.*)['|"]$/, function (initial, data) {
                return data;
            });
        },

        toggleBoldFontEvent: function (event) {
            this.cssToggle(event, 'font-weight', 'bold');

            !this.currentFont.support.bi && this.currentFont.support.i && this.$el.find('.options .italic-font').toggleClass('disabled', $(event.currentTarget).hasClass('applied'));
        },

        toggleItalicFontEvent: function (event) {
            this.cssToggle(event, 'font-style', 'italic');

            !this.currentFont.support.bi && this.currentFont.support.b && this.$el.find('.options .bold-font').toggleClass('disabled', $(event.currentTarget).hasClass('applied'));
        },

        toggleUnderlineFontEvent: function (event) {
            this.cssToggle(event, 'text-decoration', 'underline');
        },

        cssToggle: function (event, attrName, value) {
            var $text = this.$el.find('.line-container > .item');
            var $target = $(event.currentTarget).toggleClass('applied');

            $text.css(attrName, $target.hasClass('applied') ? value : '');
            this.trigger('change');
        },

        clickEvent: function (event) {
            var isEditing = this.isBeingEdit();
            isEditing || this.addElement(this.getClickElementData(event));
        },

        mouseUpEvent: function (event) {
            var isEditing = this.isBeingEdit();
            isEditing || this.addElement(this.getMouseUpElementData(event));
        },

        toggleOptionsEvent: function (event) {
            var currentHeight = this.$el.height();
            var hasOpenOptionsMenu = currentHeight > this.minimizedHeight;
            var isEditing = this.isBeingEdit();
            $(event.currentTarget).toggleClass('active');

            hasOpenOptionsMenu || this.startEditingEvent();
            hasOpenOptionsMenu && this.$el.css('overflow', 'hidden');
            hasOpenOptionsMenu && isEditing && this.blurEditableContent();

            this.$el.height(hasOpenOptionsMenu ? this.minimizedHeight : this.fullHeight);
        },

        keydownEvent: function (event) {
            if (event.which === 13) {
                event.preventDefault();
                this.blurEditableContent();
            }
        },

        keyupEvent: function (event) {
            var text = this.$el.find('.line-container input').val() || '&nbsp;';
            this.$el.find('.line-container > .item .content').html(text);
        },

        blurEditableContent: function () {
            this.$el.find('.line-container input').blur();
        },

        startEditingEvent: function (event) {
            var now = new Date();
            if (now - this.editEndTime < 1000) return;

            this.preEditText = this.$el.find('.line-container > .item .content').text();
            var $input = this.$el.find('.line-container input').val('').show();

            this.$el.css('overflow', '');
            this.$el.find('.btn.begin-edit').addClass('applied');

            this.erase().then(function () {
                $input.focus();
            });
        },

        endEditingEvent: function (event) {
            var $input = this.$el.find('.line-container input');
            this.$el.find('.btn.begin-edit').removeClass('applied');
            this.editEndTime = new Date();

            if ($input.val()) {
                this.endTyping();
                this.trigger('change');
            } else this.type(this.preEditText).then(_.bind(function () {
                this.endTyping();
            }, this));
        },

        addElement: function (elementData) {
            DesignFacade.create('text', elementData);
        },

        getClickElementData: function (event) {
            var offset = this.editor.getOffset();
            var baseData = this.getBaseElementData(offset);
            var x = (offset.width - baseData['size']['width']) / 2;

            return _.extend(baseData, { position: {
                'x': Math.floor4(x),
                'y': Math.floor4((offset.height - baseData['font']['size']) / 2)
            } });
        },

        getMouseUpElementData: function (event) {
            var zoom = EditorFacade.handle('zoom', 'get');
            var offset = this.editor.getOffset();
            var bbRect = this.$draggableClone[0].getBoundingClientRect();
            var baseData = this.getBaseElementData(offset);
            var x = event.clientX - baseData['size']['width'] / 2 * zoom - offset.x;

            return _.extend(baseData, { position: {
                'x': Math.floor4(x),
                'y': Math.floor4((bbRect.top - offset.y) / zoom)
            } });
        },

        getBaseElementData: function (offset) {
            var canvas = this.editor.canvas;
            var $text = this.$el.find('.line-container > .item .content');
            var baseSize = _.min([canvas.contentW, canvas.contentH]);
            var containerWidth = $text[0].getBoundingClientRect().width;
            var fontSize = Math.round(baseSize * this.data['size']);
            var width = containerWidth * (fontSize / 25);
            var data = this.getTextData();

            return {
                'content': data.text,
                'decoration': data.textDecoration,
                'font': {
                    'family': data.fontFamily,
                    'weight': data.fontWeight,
                    'style': data.fontStyle,
                    'size': fontSize
                },
                'size': { 'width': Math.floor4(width) }
            };
        },

        initialize: function (options) {
            _.bindAll(this, 'type', 'erase', 'initAccordion', 'getTextData');
            this.data = options.data;
            BaseView.prototype.initialize.call(this);
        },

        initAccordion: function () {
            var $options = this.$el.find('.menu.options');

            this.minimizedHeight = this.$el.height();
            this.$el.height(this.minimizedHeight);
            $options.removeClass('hidden');
            this.fullHeight = this.minimizedHeight + $options.outerHeight();
            this.$draggable = this.$el.find('a.item > .content');
            this.toggleFontAvailableOptions();
        },

        render: function () {
            BaseView.prototype.render.call(this);

            this.$el.find('.fonts-list').popupmenudropdown({
                left: 0,
                onShow: _.bind(function () {
                    this.$el.css('overflow', 'visible').find('.line-container input').hide();
                }, this),
                forceBottom: true
            });

            this.$el.find('.fonts-list .ui-dropdown-items').removeClass('hidden');

            var lineHeight = this.$el.find('.line-container > .item').height();
            this.$el.find('.line-container > .item').height(lineHeight);
        },

        getTemplateRenderData: function () {
            return _.extend(this.data, {
                id: this.data['uuid'],
                font_size: this.data['font_size'] + 'px',
                fonts: INKIVE.FontsFactory.get()
            });
        },

        type: function (text) {
            var message = text || this.data.text;
            this.typeEffect = this.typeEffect || new TypeEffect(this.$el.find('a.item'));

            return this.typeEffect.startTyping(message);
        },

        erase: function () {
            this.typeEffect = this.typeEffect || new TypeEffect(this.$el.find('a.item'));
            return this.typeEffect.startErasing();
        },

        endTyping: function () {
            this.typeEffect.hide();
            this.$el.find('.menu.options').hasClass('hidden') && this.initAccordion();
        },

        isBeingEdit: function () {
            return this.$el.find('.line-container input').is(':focus');
        },

        toggleFontAvailableOptions: function (id) {
            var $options = this.$el.find('.options');
            var fonts = INKIVE.FontsFactory.get();

            this.currentFont = id ? fonts[id] : getCurrentFont.call(this);
            $options.find('.bold-font').toggleClass('disabled', !this.currentFont.support.b);
            $options.find('.italic-font').toggleClass('disabled', !this.currentFont.support.i);

            function getCurrentFont() {
                var $title = this.$el.find('.fonts-list .ui-dropdown-title');
                var currentFontFamily = $title.text();

                return _.find(fonts, { family: currentFontFamily });
            }
        },

        createDraggableClone: function () {
            var $draggableClone = BaseView.prototype.createDraggableClone.call(this);
            $draggableClone.css(_.omit(this.getTextData('-'), 'text'));

            return $draggableClone;
        },

        setTextData: function (data) {
            var $text = this.$el.find('.line-container > .item .content');
            var $options = this.$el.find('.options');

            data = humps.camelizeKeys(data);

            data.text && $text.text(data.text);
            $text.css('font-family', data.fontFamily);
            this.$el.find('.fonts-list .ui-dropdown-title').text(data.fontFamily);
            this.toggleFontAvailableOptions();

            $options.find('.bold-font a').toggleClass('applied', data.fontWeight || false);
            $text.css('font-weight', data.fontWeight);

            $options.find('.italic-font a').toggleClass('applied', data.fontStyle || false);
            $text.css('font-style', data.fontStyle);

            $options.find('.underline-font a').toggleClass('applied', data.textDecoration || false);
            $text.css('text-decoration', data.textDecoration);
        },

        getTextData: function (separator) {
            var $text = this.$el.find('.line-container > .item .content');
            var $options = this.$el.find('.options');

            var data = {
                fontFamily: this.getQuoteScaped($text.css('font-family')),
                text: $text.text() === '&nbsp;' ? this.preEditText : $text.text()
            };

            if ($options.find('.bold-font a').hasClass('applied')) data.fontWeight = $text.css('font-weight');

            if ($options.find('.italic-font a').hasClass('applied')) data.fontStyle = $text.css('font-style');

            if ($options.find('.underline-font a').hasClass('applied')) data.textDecoration = $text.css('text-decoration');

            if (separator) return humps.decamelizeKeys(data, { separator: separator });

            return data;
        }
    })));

},{"../../../../analytics/decorate":4,"../../../../app/decorate":7,"../../../../facade/design/design":19,"../../../../facade/editor/editor":45,"../../../../utils/humps":323,"./abstract/base":181,"./analytics/text":191,"./app/text":192,"./components/type-effect":194,"./templates/text.hbs":212}],215:[function(require,module,exports){
    var BaseView = require('./abstract/base');
    var UIProgressButton = require('./components/upload-effect.js');

    module.exports = BaseView.extend({
        events: {
            'click .uploader.progress-button.loading': 'cancelEvent'
        },

        cancelEvent: function (event) {
            this.trigger('cancel');
            this.cancel();
        },

        cancel: function () {
            this.canceled = true;
            this.progressBar.setProgress(0);
        },

        initialize: function () {
            this.attemptsLeft = 3;
            this.attemptDelay = 2000;

            BaseView.prototype.initialize.call(this);
            _.bindAll(this, 'setImage', 'onImageLoaded', 'onImageError', 'cancel');
        },

        render: function () {
            var html = this.template(this.getTemplateRenderData());
            this.$el.html(html).css({ width: 110, height: 86 });
            this.progressBar = new UIProgressButton(this.$el.find('.progress-button')[0]);
        },

        toggleProgressBar: function (isShow) {
            isShow && this.progressBar._submit();
        },

        updateProgressBar: function (value) {
            if (!this.canceled) {
                this.progressBar.setProgress(value);
                value === 1 && this.progressBar.stop(1);
            }
        },

        setImage: function (id, src) {
            if (!this.canceled) {
                var $image = $('<img>').attr('id', id).attr('src', src).on('error', this.onImageError).on('load', this.onImageLoaded);

                this.$el.find('a.item').removeClass('hidden').append($image);
            }
        },

        onImageLoaded: function () {
            var $uploader = this.$el.find('.uploader');

            this.$el.find('a.item').addClass('loaded');
            this.progressBar.clear();
            this.resize();

            _.delay(function () {
                $uploader.remove();
            }, 1000);
        },

        onImageError: function (event) {
            var $image = $(event.currentTarget);
            var hasAttemptsLeft = --this.attemptsLeft > 0;
            var setImage = _.partial(this.setImage, $image.attr('id'), $image.attr('src'));

            $image.remove();
            hasAttemptsLeft && _.delay(setImage, this.attemptDelay);
            if (!hasAttemptsLeft) {
                this.progressBar.setProgress(0);
                this.trigger('thumbnail_load_error');
            }
        },

        getTemplateRenderData: function () {
            return { upload: true };
        }
    });

},{"./abstract/base":181,"./components/upload-effect.js":195}],216:[function(require,module,exports){
    module.exports = {
        eventCategory: 'Editor UI | Tool Menu | customize | background',

        render: function () {
            this.trackEvent({
                eventAction: 'show',
                eventLabel: this.category.id
            });
        }
    };

},{}],217:[function(require,module,exports){
    module.exports = {
        eventCategory: 'Editor UI | Tool Menu | customize | grids',

        render: function () {
            this.trackEvent({
                eventAction: 'show',
                eventLabel: ''
            });
        }
    };

},{}],218:[function(require,module,exports){
    module.exports = {
        eventCategory: 'Editor UI | Tool Menu | customize | placeholders',

        render: function () {
            this.trackEvent({
                eventAction: 'show',
                eventLabel: this.categoryKey
            });
        }
    };

},{}],219:[function(require,module,exports){
    module.exports = {
        eventCategory: 'Editor UI | Tool Menu | customize | shapes',

        render: function () {
            this.trackEvent({
                eventAction: 'show',
                eventLabel: this.categoryKey
            });
        }
    };

},{}],220:[function(require,module,exports){
    module.exports = {
        eventCategory: 'Editor UI | Tool Menu | customize | stickers',

        render: function () {
            this.trackEvent({
                eventAction: 'show',
                eventLabel: this.category.id
            });
        }
    };

},{}],221:[function(require,module,exports){
    module.exports = {
        eventCategory: 'Editor UI | Tool Menu | customize',
        show: { eventAction: 'show' },

        listContentToggleEvent: function (event) {
            var $button = $(event.currentTarget);
            var $container = $button.closest('dt');

            $container.hasClass('active') || this.trackEvent({
                eventAction: 'content_toggle',
                eventLabel: $button.data('key')
            });
        }
    };

},{}],222:[function(require,module,exports){
    var BaseView = require('../../components/accordion-list/director');

    module.exports = {
        listContentToggleEventCheckOnce: function () {
            return !window.Android && this.appBridge.version.isGreaterThan('1.1.1') || window.Android && !this.appBridge.version.isLowerThan('1.1');
        },

        listContentToggleEvent: function (event) {
            var isBackgroundButton, isShapeButton;
            var $button = $(event.currentTarget);
            var isStickerButton = $button.is('[data-key="stickers"]');
            var isHandledHere = isStickerButton;

            isStickerButton && this.appBridge.callBoth('pick_sticker');

            if (!isStickerButton && window.Android) {
                isBackgroundButton = $button.is('[data-key="backgrounds"]');
                isShapeButton = $button.is('[data-key="shapes"]');
                isHandledHere = isBackgroundButton || isShapeButton;

                isBackgroundButton && this.appBridge.callBoth('pick_background');
                isShapeButton && this.appBridge.callBoth('pick_shape');
            }

            isHandledHere || BaseView.prototype.listContentToggleEvent.call(this, event);
        }
    };

},{"../../components/accordion-list/director":172}],223:[function(require,module,exports){
    var BaseView = require('../../../components/accordion-list/content');
    var ColorThumbnailView = require('../../../components/thumbnail/color');
    var AnalyticsDecorate = require('../../../../../analytics/decorate');

    module.exports = AnalyticsDecorate(require('../../analytics/backgrounds'), BaseView.extend({
        apiCall: 'search/backgrounds',
        dataName: 'backgroundCategories',
        callbackName: 'callbackBackgrounds',
        where: {},

        initialize: function (options) {
            this.category = _.find(INKIVE.Tool._cache['backgroundCategories'], function (category) {
                return category.id == options.key;
            });

            BaseView.prototype.initialize.call(this, options);
        },

        getParams: function () {
            var params = {
                from: this.from,
                limit: this.limit,
                where: { category: this.category.name }
            };

            this.from += this.limit;

            return params;
        },

        extractData: function (data) {
            return _.map(data, function (item) {
                var imageData = this.getImageData(item);
                this.imagesFactory.addImageData(imageData);

                return {
                    id: 'background-' + item['id'],
                    src: imageData.version.thumb,
                    cls: parseInt(item['active']) ? '' : 'grayscale',
                    data: imageData,
                    width: 110,
                    height: 78
                };
            }, this);
        },

        getImageData: function (item) {
            return {
                name: item['readable_name'],
                count: item['count'],
                version: {
                    original: item['url'],
                    largeweb: item['url'],
                    web: item['url'],
                    tab: item['url'],
                    mobile: item['url'] && item['url'].replace('-web', '-mobile'),
                    thumb: item['url'] && item['url'].replace('-web', '-thumb')
                }
            };
        },

        getScrollHeight: function ($target) {
            return $target.closest('.tab-content').height() - this.$el.siblings().height();
        },

        render: function () {
            this.$el.html(this.template({
                placeholder: this.filterPlaceholder,
                colors: true
            }));

            this.$el.find('.antiscroll-inner').addThumb();
            this.renderColors();
        },

        renderColors: function () {
            var $addMore = this.$el.find('.colorLineWrapper .addmore');
            _.each(this.tool.editor.getFavColors(), this.addColorThumb, this);
            this.initColorPicker();
        },

        addColorThumb: function (color) {
            var $view = $('<div class="palette_item">');
            var colorThumbnail = new ColorThumbnailView({
                el: $view,
                color: color
            });

            $view.insertBefore(this.$el.find('.colorLineWrapper .addmore'));
        },

        initColorPicker: function () {
            var $newcolor;
            var $wrapper = this.$el.find('.colorLineWrapper');

            $wrapper.find('.addmore').colorpicker({
                defaultColor: '#FFFFFF',
                onSubmit: _.bind(function (color, context) {
                    this.addColorThumb(color);
                }, this)
            });
        }
    }));

},{"../../../../../analytics/decorate":4,"../../../components/accordion-list/content":170,"../../../components/thumbnail/color":193,"../../analytics/backgrounds":216}],224:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        return "<div class=\"antiscroll-wrap\">\n  <div class=\"antiscroll-inner\">\n    <div class=\"colorLineWrapper\">\n      <div class=\"palette_item addmore\" data-attr=\"fill fill-opacity\" title=\"addmore\">\n        <i class=\"icon-plus\"></i>\n      </div>\n    </div>\n  </div>\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],225:[function(require,module,exports){
    var BaseView = require('../../../components/accordion-list/content');
    var ColorThumbnailView = require('../../../components/thumbnail/color');
    var UserInfoFactory = require('../../../../../factory/user-info');
    var LibraryFactory = require('../../../../../factory/library');

    module.exports = BaseView.extend({
        template: require('./colours.hbs'),
        initialize: function () {
            _.bindAll(this, 'renderColors');
            this.tool = INKIVE.Tool.getInstance();
            this.render();

            UserInfoFactory.get().then(_.bind(function (userInfo) {
                var hasLibrary = _(userInfo['roles']).contains('ROLE_LIBRARY');

                hasLibrary && LibraryFactory.get('colors').then(this.renderColors);
                hasLibrary || this.renderColors();
            }, this));
        },

        renderColors: function (colors) {
            var $addMore = this.$el.find('.colorLineWrapper .addmore');

            _(colors).chain().pluck('data').pluck('color_code').each(this.addColorThumb, this);

            _.each(this.tool.editor.getFavColors(), this.addColorThumb, this);

            this.initColorPicker();
        },

        addColorThumb: function (color) {
            var $view = $('<div class="palette_item">');
            var colorThumbnail = new ColorThumbnailView({
                el: $view,
                color: color
            });

            $view.insertBefore(this.$el.find('.colorLineWrapper .addmore'));
        },

        initColorPicker: function () {
            var $newcolor;
            var $wrapper = this.$el.find('.colorLineWrapper');

            $wrapper.find('.addmore').colorpicker({
                defaultColor: '#FFFFFF',
                onSubmit: _.bind(function (color, context) {
                    this.addColorThumb(color);
                }, this)
            });
        }
    });

},{"../../../../../factory/library":67,"../../../../../factory/user-info":81,"../../../components/accordion-list/content":170,"../../../components/thumbnail/color":193,"./colours.hbs":224}],226:[function(require,module,exports){
    var BaseView = require('../../../components/accordion-list/categories-director');
    var DirectorView = require('../../../components/accordion-list/director');
    var CategoriesView = require('./backgrounds');

    module.exports = BaseView.extend({
        class: 'sub-category backgrounds',
        CategoriesView: CategoriesView,
        Views: { colours: require('./colours') },
        views: {},

        loadListContent: function (key) {
            var isColourView = key === 'colours';

            isColourView || BaseView.prototype.loadListContent.call(this, key);
            isColourView && DirectorView.prototype.loadListContent.call(this, key);
        },

        loadButtons: function () {
            var deferred = $.Deferred();
            var coloursButton = {
                key: 'colours',
                tag: 'tool.customize.backgrounds_colours',
                icon: 'fa fa-paint-brush'
            };

            INKIVE.Tool.preloadBackgroundCategories(function () {
                var data = INKIVE.Tool._cache['backgroundCategories'];
                deferred.resolve(_.union([coloursButton], _.map(data, function (backgroundCategory) {
                    return { key: backgroundCategory.id, tag: backgroundCategory.name, icon: 'fa fa-ellipsis-v' };
                })));
            });

            return deferred.promise();
        },

        initialize: function () {
            BaseView.prototype.initialize.call(this);
            this.render();
        }
    });

},{"../../../components/accordion-list/categories-director":168,"../../../components/accordion-list/director":172,"./backgrounds":223,"./colours":225}],227:[function(require,module,exports){
    var template = require('./templates/drawing.hbs');

    module.exports = Backbone.View.extend({
        buttons: [
            //{ tag: 'tool.customize.draw.move',   mode: 'select',  icon: 'icon-arrows' },
            { tag: 'tool.customize.draw.pen', mode: 'fhpath', icon: 'icon-pen-alt2' }, { tag: 'tool.customize.draw.square', mode: 'square', icon: 'icon-stop' }, { tag: 'tool.customize.draw.rect', mode: 'rect', icon: 'icon-stop desygner-icon-rect' }, { tag: 'tool.customize.draw.circle', mode: 'circle', icon: 'icon-circle-thin' }, { tag: 'tool.customize.draw.ellip', mode: 'ellipse', icon: 'icon-circle-thin desygner-icon-ellips' }, { tag: 'tool.customize.draw.line', mode: 'line', icon: 'icon-minus' }],

        events: {
            'click .drawingTool': 'changeModeEvent'
        },

        changeModeEvent: function (event) {
            var mode = $(event.currentTarget).data('mode');
            this.editor.setMode(mode);
        },

        initialize: function () {
            _.bindAll(this, 'updateDrawingButtons');

            this.editor = INKIVE.Tool.getInstance().editor;
            this.render();
        },

        render: function () {
            this.$el.html(template(this.buttons));
            this.updateDrawingButtons();
        },

        updateDrawingButtons: function () {
            var mode = this.editor.canvas.getMode();
            var $drawingTools = this.$el.find('.drawingTool[data-mode]');
            var selectionModes = ['select', 'multiselect', 'resize', 'rotate'];
            var isSelectionModeTool = _.contains(selectionModes, mode);

            $drawingTools.removeClass('active');
            isSelectionModeTool && setSelectionModeTools();
            isSelectionModeTool || setDefaultModeTools();

            function setSelectionModeTools() {
                $('.drawingTool[data-mode=select]').addClass('active');
                $('#workarea').css('cursor', '');
            }

            function setDefaultModeTools() {
                $('.drawingTool[data-mode=' + mode + ']').addClass('active');
                $('#workarea').css('cursor', mode == 'textedit' ? 'text' : 'crosshair');
            }
        }
    });

},{"./templates/drawing.hbs":234}],228:[function(require,module,exports){
    var BaseView = require('../../../components/accordion-list/content');
    var AnalyticsDecorate = require('../../../../../analytics/decorate');
    var FormatFactory = require('../../../../../factory/formats');
    var GridThumbnailView = require('../../../components/thumbnail/grid');

    module.exports = AnalyticsDecorate(require('../../analytics/grids'), BaseView.extend({
        apiCall: 'grid/fetch',
        columnWidth: INKIVE.C.IS_MOBILE ? 210 : 275,
        numberOfPhotos: 0,

        initialize: function () {
            this.tool = INKIVE.Tool.getInstance();
            this.canvas = this.tool.editor.canvas;

            this.getFormat().then(_.bind(function () {
                this.setGridTemplateFormat();
                BaseView.prototype.initialize.call(this);
            }, this));

            this.$el.find('.thumbnailWrapper').addClass('thumbnail-wrapper').removeClass('thumbnailWrapper');
        },

        getFormat: function () {
            var deferred = $.Deferred();
            var getClosestFormat = _.bind(getCF, this);

            FormatFactory.getFormats().then(function (formats) {
                deferred.resolve(getClosestFormat(formats));
            });

            return deferred.promise();

            function getCF(formats) {
                var format;
                var sizeDifference = Infinity;
                var ratioDifference = Infinity;
                var width = this.canvas.contentW;
                var height = this.canvas.contentH;
                var ratio = width / height;

                _.each(formats, function (f) {
                    var pixelFormat = convertToPixels(f);
                    var sd,
                        rd = Math.abs(ratio - pixelFormat.ratio);
                    if (rd < ratioDifference) {
                        sd = Math.abs(width - pixelFormat.width) + Math.abs(height - pixelFormat.height);
                        if (sd < sizeDifference) {
                            format = f;
                            sizeDifference = sd;
                            ratioDifference = rd;
                        }
                    }
                });

                return format;

                function convertToPixels(format) {
                    var w = INKIVE.Helpers.convertUnitsToPixels(format['width'], format['unit']);
                    var h = INKIVE.Helpers.convertUnitsToPixels(format['height'], format['unit']);

                    return _.extend(format, { width: w, height: h, ratio: w / h });
                }
            }
        },

        loadData: function (repeat, end) {
            var onMoreData = _.partial(this.onMoreData, this.filterActionId);

            this.end = end;
            this.repeat = repeat;

            INKIVE.Modal.loader(this.$el.find('.antiscroll-inner'));

            INKIVE.Helpers.sendCmd(INKIVE.C.BASE_URL + this.apiCall, this.getParams(), onMoreData);

            this.$el.find('.thumbnail-wrapper').css({ height: 'auto' });
        },

        getParams: function () {
            return _.extend({
                number_of_photos: ++this.numberOfPhotos
            }, this.size);
        },

        onMoreData: function (faId, result) {
            if (faId !== this.filterActionId) return;

            result = JSON.parse(result);
            var hasResults = result['STATUS'] === 'SUCCESS';

            if (hasResults) {
                this.appendGridThumbnails(result['MESSAGE']);
                this.repeat();
            } else {
                this.end();
                INKIVE.Modal.loaderClose(this.$el.find('.antiscroll-inner'));
            }

            this.scrollRefresh();
        },

        appendGridThumbnails: function (data) {
            var $scrollDetect = this.$el.find('.thumbnail-wrapper .scrollDetect');

            _.each(data, function (item) {
                var $thumbnailView = $('<div>').addClass('thumbnail grid').insertBefore($scrollDetect);

                new GridThumbnailView({
                    setCurrentPage: true,
                    el: $thumbnailView,
                    size: this.size,
                    format: this.callFormat,
                    data: item,
                    numberOfPhotos: this.numberOfPhotos
                });
            }, this);
        },

        setGridTemplateFormat: function () {
            var thumbWidth = this.columnWidth;
            var canvas = this.tool.editor.canvas;

            this.callFormat = {
                width: canvas.contentW,
                height: canvas.contentH
            };

            this.size = {
                width: thumbWidth,
                height: thumbWidth * (this.callFormat.height / this.callFormat.width)
            };
        }

    }));

},{"../../../../../analytics/decorate":4,"../../../../../factory/formats":65,"../../../components/accordion-list/content":170,"../../../components/thumbnail/grid":197,"../../analytics/grids":217}],229:[function(require,module,exports){
    var BaseView = require('../../../components/accordion-list/content');
    var AnalyticsDecorate = require('../../../../../analytics/decorate');

    module.exports = AnalyticsDecorate(require('../../analytics/placeholders'), BaseView.extend({
        apiCall: 'search/stickers',
        callbackName: 'callbackStickers',

        initialize: function () {
            this.debouncedMasonryReload = _.debounce(_.bind(this.masonryReload, this), 2000);
            BaseView.prototype.initialize.call(this);
        },

        getParams: function () {
            var params = {
                from: this.from,
                limit: this.limit,
                where: {
                    isPlaceholder: true,
                    active: INKIVE.C.USER.IS_SUPER ? 0 : 1
                }
            };

            this.from += this.limit;

            return params;
        },

        extractData: function (data) {
            return _.map(data, function (item) {
                var id = this.idPrefix ? this.idPrefix + '-' : '';
                id += 'sticker-' + item['id'];

                return {
                    id: id,
                    src: item['url'],
                    width: 1000,
                    height: 1000,
                    cls: parseInt(item['active']) ? '' : 'grayscale',
                    data: {
                        name: item['name'],
                        count: item['count'],
                        changeable: item['changeable']
                    }
                };
            }, this);
        },

        getScrollHeight: function ($target) {
            return $target.height();
        }
    }));

},{"../../../../../analytics/decorate":4,"../../../components/accordion-list/content":170,"../../analytics/placeholders":218}],230:[function(require,module,exports){
    var BaseView = require('../../../components/accordion-list/content');
    var ColorThumbnailView = require('../../../components/thumbnail/color');
    var AnalyticsDecorate = require('../../../../../analytics/decorate');
    var shapesFactory = require('../../../../../factory/shapes');

    module.exports = AnalyticsDecorate(require('../../analytics/shapes'), BaseView.extend({
        apiCall: 'search/shapes',
        dataName: 'shapesCategories',

        initialize: function (options) {
            this.categoryKey = options.key;
            BaseView.prototype.initialize.call(this, options);
            this.scrollRefresh = _.debounce(_.bind(this.initScroll, this), 500);
        },

        loadData: function (repeat, end) {
            this.end = end;

            INKIVE.Modal.loader(this.$el.find('.antiscroll-inner'));
            shapesFactory.get(this.categoryKey).then(this.onMoreData);
        },

        onMoreData: function (shapes) {
            shapes.length && this.appendThumbnails(shapes);
            INKIVE.Modal.loaderClose(this.$el.find('.antiscroll-inner'));
            this.end();
            this.scrollRefresh();
        },

        getScrollHeight: function ($target) {
            return $target.closest('.tab-content').height() - this.$el.siblings().height();
        },

        appendThumbnails: function (data) {
            _.each(data, function (item) {
                var $thumb = new INKIVE.ThumbShape(_.extend(item, { tooltip: item['name'] }));

                $thumb.appendTo(this.$el);
            }, this);

            this.masonryReload();
        }
    }));

},{"../../../../../analytics/decorate":4,"../../../../../factory/shapes":80,"../../../components/accordion-list/content":170,"../../../components/thumbnail/color":193,"../../analytics/shapes":219}],231:[function(require,module,exports){
    var BaseView = require('../../../components/accordion-list/categories-director');
    var CategoriesView = require('./shapes');
    var shapesFactory = require('../../../../../factory/shapes');

    module.exports = BaseView.extend({
        class: 'sub-category shapes',
        CategoriesView: CategoriesView,
        views: {},

        loadButtons: function () {
            var deferred = $.Deferred();

            shapesFactory.getCategories().then(function (data) {
                deferred.resolve(_.map(data, function (stickersCategory) {
                    return { key: stickersCategory.key, tag: stickersCategory.name, icon: 'fa fa-ellipsis-v' };
                }));
            });

            return deferred.promise();
        },

        initialize: function () {
            BaseView.prototype.initialize.call(this);
            this.render();
        }
    });

},{"../../../../../factory/shapes":80,"../../../components/accordion-list/categories-director":168,"./shapes":230}],232:[function(require,module,exports){
    var BaseView = require('../../../components/accordion-list/content');
    var ColorThumbnailView = require('../../../components/thumbnail/color');
    var AnalyticsDecorate = require('../../../../../analytics/decorate');

    module.exports = AnalyticsDecorate(require('../../analytics/stickers'), BaseView.extend({
        apiCall: 'search/stickers',
        dataName: 'stickerCategories',
        callbackName: 'callbackStickers',
        where: {},

        initialize: function (options) {
            this.category = _.find(INKIVE.Tool._cache['stickerCategories'], function (category) {
                return category.id == options.key;
            });

            BaseView.prototype.initialize.call(this, options);
        },

        getScrollHeight: function ($target) {
            return $target.closest('.tab-content').height() - this.$el.siblings().height();
        },

        getParams: function () {
            var params = {
                from: this.from,
                limit: this.limit,
                where: { category: this.category.name, active: INKIVE.C.USER.IS_SUPER ? 0 : 1 }
            };

            this.from += this.limit;

            return params;
        },

        extractData: function (data) {
            return _.map(data, function (item) {
                return {
                    id: 'sticker-' + item['id'],
                    src: item['url'],
                    width: item['width'],
                    height: item['height'],
                    cls: parseInt(item['active']) ? '' : 'grayscale',
                    data: {
                        name: item['name'],
                        count: item['count'],
                        changeable: item['changeable'],
                        width: item['width'],
                        height: item['height']
                    }
                };
            });
        }
    }));

},{"../../../../../analytics/decorate":4,"../../../components/accordion-list/content":170,"../../../components/thumbnail/color":193,"../../analytics/stickers":220}],233:[function(require,module,exports){
    var BaseView = require('../../../components/accordion-list/categories-director');
    var CategoriesView = require('./stickers');

    module.exports = BaseView.extend({
        class: 'sub-category stickers',
        CategoriesView: CategoriesView,
        views: {},

        loadButtons: function () {
            var deferred = $.Deferred();

            INKIVE.Tool.preloadStickerCategories(function () {
                var data = INKIVE.Tool._cache['stickerCategories'];
                deferred.resolve(_.map(data, function (stickersCategory) {
                    return { key: stickersCategory.id, tag: stickersCategory.name, icon: 'fa fa-ellipsis-v' };
                }));
            });

            return deferred.promise();
        },

        initialize: function () {
            BaseView.prototype.initialize.call(this);
            this.render();
        }
    });

},{"../../../components/accordion-list/categories-director":168,"./stickers":232}],234:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=container.escapeExpression, alias4="function";

        return "  <li>\n    <a class=\"btn btn-squire btn-tag drawingTool\" tag=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,(depth0 != null ? depth0.tag : depth0),{"name":"t","hash":{},"data":data}))
            + "\" data-mode=\""
            + alias3(((helper = (helper = helpers.mode || (depth0 != null ? depth0.mode : depth0)) != null ? helper : alias2),(typeof helper === alias4 ? helper.call(alias1,{"name":"mode","hash":{},"data":data}) : helper)))
            + "\">\n      <div class=\"iconWrapper\"><i class=\""
            + alias3(((helper = (helper = helpers.icon || (depth0 != null ? depth0.icon : depth0)) != null ? helper : alias2),(typeof helper === alias4 ? helper.call(alias1,{"name":"icon","hash":{},"data":data}) : helper)))
            + "\"></i></div>\n    </a>\n  </li>\n";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1;

        return "<ul class=\"btnWrapper\">\n"
            + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},depth0,{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "</ul>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],235:[function(require,module,exports){
    module.exports = {
        render: function () {
            var can = this.restrictionsFacade.isFunctionalityAllowed;
            var html = this.template({
                class: this.class,
                buttons: this.buttons.filter(buttonFilter)
            });

            this.$el.html(html);

            function buttonFilter(button) {
                if (button.disabled) return false;

                switch (button.key) {
                    case 'backgrounds':
                        return can('function_use_desygner_background');
                    case 'placeholders':
                        return can('function_use_desygner_images') && can('image_add');
                    case 'stickers':
                        return can('function_use_desygner_vector') && can('vector_add');
                    case 'shapes':
                        return can('function_use_desygner_vector') && can('vector_add');
                    case 'grids':
                        return can('function_use_desygner_images') && can('image_add');
                    case 'drawing':
                        return can('function_draw') && can('vector_add');
                }

                return true;
            }
        }
    };

},{}],236:[function(require,module,exports){
    var BaseView = require('../components/accordion-list/director');
    var AppDecorate = require('../../../app/decorate');
    var RestrictDecorate = require('../../../facade/restrictions/decorate');
    var AnalyticsDecorate = require('../../../analytics/decorate');
    var EditorModeManager = require('../../editor-mode-manager');

    module.exports = AnalyticsDecorate(require('./analytics/view'), AppDecorate(require('./app/view'), RestrictDecorate(require('./restrict/view'), BaseView.extend({
        class: 'customize',
        views: {},
        Views: {
            backgrounds: require('./contents/background/view'),
            placeholders: require('./contents/placeholders/view'),
            stickers: require('./contents/sticker/view'),
            shapes: require('./contents/shape/view'),
            grids: require('./contents/grids/view'),
            drawing: require('./contents/drawing'),
            text: require('../text/view'),
            banners: require('../text/banners')
        },
        buttons: [{ key: 'backgrounds', tag: 'tool.customize.backgrounds', icon: 'icon-backgrounds' }, { key: 'placeholders', tag: 'tool.customize.placeholders', icon: 'icon-image' }, { key: 'stickers', tag: 'tool.customize.stickers', icon: 'icon-hipster' }, { key: 'shapes', tag: 'tool.customize.shapes', icon: 'icon-bug' }, { key: 'grids', tag: 'tool.customize.grids', icon: 'icon-grid' }, { key: 'drawing', tag: 'tool.customize.drawing', icon: 'icon-pencil' }],

        initialize: function () {
            INKIVE.C.IS_MOBILE && this.addTextOptions();
            BaseView.prototype.initialize.call(this);
        },

        addTextOptions: function () {
            this.buttons.unshift({ key: 'banners', tag: 'tool.customize.banners', icon: 'icon-brightness_auto' });
            this.buttons.unshift({ key: 'text', tag: 'tool.customize.text', icon: 'icon-text-height' });
        },

        show: function () {
            BaseView.prototype.show.call(this);

            this.$el.find('.wrapper [data-key="backgrounds"]').parent().toggle(!EditorModeManager.isMode('logo'));
        },

        render: function () {
            var html = this.template({
                class: this.class,
                buttons: this.buttons.filter(function (button) {
                    return !button.disabled;
                })
            });

            this.$el.html(html);
        },

        closeAccordion: function ($button, key) {
            _.each(this.views, function (view, key) {
                var $button = this.$el.find('dt a[data-key="' + key + '"]');
                var $container = $button.closest('dt');

                if ($container.is('.active')) {
                    this.hideListContent($button, key) && $container.removeClass('active');
                }
            }, this);
        },

        hideListContent: function ($button, key) {
            key = key || $button.data('key');

            var isClosed = !this.views[key].closeView || this.views[key].closeView();
            isClosed && this.toggleAcordionElement($button, false);

            return isClosed;
        },

        updateDrawingButtons: function () {
            var drawingView = this.views.drawing;
            drawingView && drawingView.updateDrawingButtons();
        }
    }))));

},{"../../../analytics/decorate":4,"../../../app/decorate":7,"../../../facade/restrictions/decorate":57,"../../editor-mode-manager":102,"../components/accordion-list/director":172,"../text/banners":305,"../text/view":307,"./analytics/view":221,"./app/view":222,"./contents/background/view":226,"./contents/drawing":227,"./contents/grids/view":228,"./contents/placeholders/view":229,"./contents/shape/view":231,"./contents/sticker/view":233,"./restrict/view":235}],237:[function(require,module,exports){
    module.exports = {
        eventCategory: 'Editor UI | Tool Menu | images',

        show: { eventAction: 'show' },
        openSearchTabEvent: { eventAction: 'open_search_tab' },

        listContentToggleEvent: function (event) {
            var $button = $(event.currentTarget);
            var $container = $button.closest('dt');

            $container.hasClass('active') || this.trackEvent({
                eventAction: 'content_toggle',
                eventLabel: $button.data('key')
            });
        }
    };

},{}],238:[function(require,module,exports){
    module.exports = {
        authenticate: function () {
            var deferred = $.Deferred();

            if (this.authenticated) deferred.resolve();else {
                if (!FB.getAccessToken()) {
                    this.appBridge.off('ik.editor.auth.facebook');
                    this.appBridge.on('ik.editor.auth.facebook', _.bind(onAppResponse, this));

                    this.appBridge.callBoth('send_facebook_credentials');
                } else authenticated();
            }

            return deferred.promise();

            function onAppResponse(event, data) {
                //_.defer(_.bind(function() {
                this.tool.facebookToken = data.access_token;
                authenticated.call(this);
                //}, this));
            }

            function authenticated() {
                deferred.resolve();
                this.initAuthenticatedDataLoading();
            }
        }
    };

},{}],239:[function(require,module,exports){
    module.exports = {
        authenticate: function () {
            var deferred = $.Deferred();

            if (this.authenticated) deferred.resolve();else {
                if (!this.tool.token.instagram) {
                    this.appBridge.off('ik.editor.auth.instagram');
                    this.appBridge.on('ik.editor.auth.instagram', _.bind(onAppResponse, this));

                    this.appBridge.callBoth('send_instagram_credentials');
                } else authenticated.call(this);
            }

            return deferred.promise();

            function onAppResponse(event, data) {
                var url = INKIVE.C.BASE_URL + 'load/api/instagramSetAuth';
                var params = { auth: data.access_token };
                var afterAuth = _.bind(_.debounce(authenticated, 500), this);

                this.tool.token.instagram = data.access_token;
                INKIVE.Helpers.sendCmd(url, params, afterAuth);
            }

            function authenticated() {
                deferred.resolve();
                this.initAuthenticatedDataLoading();
            }
        }
    };

},{}],240:[function(require,module,exports){
    var BaseView = require('../../components/accordion-list/content');

    module.exports = BaseView.extend({
        page: 0,

        initDataLoading: function () {
            this.end && this.end();
            INKIVE.Modal.loader(this.$el.find('.antiscroll-inner'));
        },

        initAuthenticatedDataLoading: function () {
            this.authenticated = true;
            BaseView.prototype.initDataLoading.call(this);
        },

        authenticate: function () {
            var deferred = $.Deferred();

            this.authenticated && deferred.resolve();
            this.authenticated || window.dbAsynInit(_.bind(function (success) {
                if (success) {
                    this.initAuthenticatedDataLoading();
                    deferred.resolve();
                } else {
                    this.trigger('no_access');
                    INKIVE.Modal.loaderClose(this.$el.find('.antiscroll-inner'));
                    deferred.reject();
                }
            }, this));

            return deferred.promise();
        },

        loadData: function (repeat, end) {
            this.end = end;
            this.repeat = repeat;

            this.canvas.call('advice.show', 'dropbox-view');
            INKIVE.Modal.loader(this.$el.find('.antiscroll-inner'));
            this.imagesFactory.getDropboxPhotos({ page: this.page++ }, this.onMoreData);
        },

        onMoreData: function (status, imagesData, data) {
            INKIVE.Modal.loaderClose(this.$el.find('.antiscroll-inner'));
            if (!status || !data.length) {
                this.end();return;
            }

            var callback = _.bind(this.tool.callbackImages, this.tool);
            this.tool.addThumbItem(this.$el, this.extractData(imagesData, data), callback);
            this.scrollRefresh();
            this.end();
        },

        extractData: function (imagesData, data) {
            return _.map(data, function (item) {
                return {
                    id: 'photo-fl-' + item.object_id,
                    src: item.src,
                    data: imagesData[item.src_big]
                };
            });
        }
    });

},{"../../components/accordion-list/content":170}],241:[function(require,module,exports){
    var BaseView = require('./facebook/access');
    var FacebookImagesView = require('./facebook/images');

    module.exports = BaseView.extend({
        scope: 'user_photos',
        apiCall: 'load/albums/facebook',

        thumbnailClickEvent: function (id) {
            this.openNewView('images', FacebookImagesView, { albumId: id });
        }
    });

},{"./facebook/access":243,"./facebook/images":244}],242:[function(require,module,exports){
    var BaseView = require('./facebook/access');
    var FacebookPageView = require('./facebook/page');

    module.exports = BaseView.extend({
        scope: 'manage_pages',
        apiCall: 'load/albums/facebook/pages',

        thumbnailClickEvent: function (id) {
            this.openNewView('page', FacebookPageView, { pageId: id });
        },

        closeView: function () {
            var isLastSubView = true;

            _.each(this.views, function (view) {
                isLastSubView &= view.closeView();
            });

            return isLastSubView && BaseView.prototype.closeView.call(this);
        }
    });

},{"./facebook/access":243,"./facebook/page":245}],243:[function(require,module,exports){
    var BaseView = require('../../../components/accordion-list/content');
    var AppDecorate = require('../../../../../app/decorate');

    module.exports = AppDecorate(require('../app/facebook'), BaseView.extend({
        initialize: function () {
            _.bindAll(this, 'thumbnailClickEvent');
            BaseView.prototype.initialize.call(this);
        },

        thumbnailClickEvent: function () {},

        initDataLoading: function () {
            this.end && this.end();
            INKIVE.Modal.loader(this.$el.find('.antiscroll-inner'));
        },

        initAuthenticatedDataLoading: function () {
            this.authenticated = true;
            BaseView.prototype.initDataLoading.call(this);
        },

        authenticate: function () {
            var deferred = $.Deferred();
            this.authenticated && deferred.resolve();
            this.authenticated || FB.login(_.bind(onFacebookLogin, this), { scope: this.scope });

            return deferred.promise();

            function onFacebookLogin(response) {
                if (response.authResponse) {
                    deferred.resolve();
                    this.initAuthenticatedDataLoading();
                } else {
                    this.trigger('no_access');
                    deferred.reject();
                    INKIVE.Modal.loaderClose(this.$el.find('.antiscroll-inner'));
                }
            }
        },

        loadData: function (repeat, end) {
            this.end = end;
            this.repeat = repeat;

            INKIVE.Modal.loader(this.$el.find('.antiscroll-inner'));
            INKIVE.Helpers.sendCmd(INKIVE.C.BASE_URL + this.apiCall, this.getParams(), this.onMoreData);
        },

        getParams: function () {
            return {
                width: 107,
                height: 73,
                fb_token: this.tool.facebookToken || FB.getAccessToken()
            };
        },

        onMoreData: function (result) {
            this.end();
            this.appendThumbnails(result);
            INKIVE.Modal.loaderClose(this.$el.find('.antiscroll-inner'));
        },

        appendThumbnails: function (data) {
            var $thumbnailWrapper = this.$el.find('.thumbnailWrapper');

            _.each(this.extractData(data), function (item) {
                var onClick = _.partial(this.thumbnailClickEvent, item['id']);
                var $thumbGroup = new INKIVE.ThumbGroupImage($.extend(item, {
                    tooltip: item['name'],
                    thumb: item['src'],
                    onItemLoad: function (thumb) {
                        $(thumb).on('click', onClick);
                    }
                }));

                $thumbGroup.appendTo($thumbnailWrapper);
            }, this);
        },

        extractData: function (data) {
            return $.parseJSON(data);
        }
    }));

},{"../../../../../app/decorate":7,"../../../components/accordion-list/content":170,"../app/facebook":238}],244:[function(require,module,exports){
    var BaseView = require('../../../components/accordion-list/content');

    module.exports = BaseView.extend({
        initialize: function (options) {
            this.albumId = options.albumId;
            BaseView.prototype.initialize.call(this);
        },

        loadData: function (repeat, end) {
            this.end = end;
            this.repeat = repeat;

            INKIVE.Modal.loader(this.$el.find('.antiscroll-inner'));
            this.imagesFactory.getFacebookPhotos(this.getParams(), this.onMoreData);
        },

        getParams: function () {
            return {
                albums: [{ id: this.albumId, after: this.after }],
                fb_token: this.tool.facebookToken || FB.getAccessToken()
            };
        },

        onMoreData: function (status, imagesData, data) {
            var callback = _.bind(this.tool.callbackImages, this.tool);
            var values = this.extractData(imagesData, data[this.albumId]['data']);

            INKIVE.Modal.loaderClose(this.$el.find('.antiscroll-inner'));
            this.after = data[this.albumId]['paging']['cursors']['after'];

            this.tool.addThumbItem(this.$el, values, callback);
            this.scrollRefresh();

            if (!data[this.albumId]['paging']['next']) this.end();else this.repeat();
        },

        extractData: function (imagesData, data) {
            return _.map(data, function (item, index) {
                return {
                    id: 'photo-fb-' + item['object_id'],
                    src: item['src'],
                    data: imagesData[item.src_big],
                    width: 110,
                    height: 84
                };
            });
        }
    });

},{"../../../components/accordion-list/content":170}],245:[function(require,module,exports){
    var BaseView = require('./access');
    var FacebookImagesView = require('./images');

    module.exports = BaseView.extend({
        apiCall: 'load/albums/facebook',

        initialize: function (options) {
            this.pageId = options.pageId;
            _.bindAll(this, 'thumbnailClickEvent');
            BaseView.prototype.initialize.call(this);
        },

        initDataLoading: function () {
            this.end && this.end();
            INKIVE.Modal.loader(this.$el.find('.antiscroll-inner'));
            this.initAuthenticatedDataLoading();
        },

        getParams: function () {
            var params = { page_ids: '["' + this.pageId + '"]' };
            params['fb_token'] = this.tool.facebookToken || FB.getAccessToken();

            return params;
        },

        thumbnailClickEvent: function (id) {
            this.openNewView('images', FacebookImagesView, { albumId: id });
        },

        closeView: function () {
            var hasSubViews = _.size(this.views) > 0;
            if (!hasSubViews) return true;

            BaseView.prototype.closeView.call(this);
            return false;
        }
    });

},{"./access":243,"./images":244}],246:[function(require,module,exports){
    var BaseView = require('../../components/accordion-list/content');

    module.exports = BaseView.extend({
        page: 0,

        initDataLoading: function () {
            this.end && this.end();
            INKIVE.Modal.loader(this.$el.find('.antiscroll-inner'));
        },

        initAuthenticatedDataLoading: function () {
            this.authenticated = true;
            BaseView.prototype.initDataLoading.call(this);
        },

        authenticate: function () {
            var deferred = $.Deferred();

            this.authenticated && deferred.resolve();
            this.authenticated || window.flAsynInit(_.bind(function (success) {
                if (success) {
                    this.initAuthenticatedDataLoading();
                    deferred.resolve();
                } else {
                    this.trigger('no_access');
                    INKIVE.Modal.loaderClose(this.$el.find('.antiscroll-inner'));
                    deferred.reject();
                }
            }, this));

            return deferred.promise();
        },

        loadData: function (repeat, end) {
            this.end = end;
            this.repeat = repeat;

            INKIVE.Modal.loader(this.$el.find('.antiscroll-inner'));
            this.imagesFactory.getFlickerPhotos({ page: this.page++ }, this.onMoreData);
        },

        onMoreData: function (status, imagesData, data) {
            INKIVE.Modal.loaderClose(this.$el.find('.antiscroll-inner'));
            if (!status || !data.length) {
                this.end();return;
            }

            var callback = _.bind(this.tool.callbackImages, this.tool);
            this.tool.addThumbItem(this.$el, this.extractData(imagesData, data), callback);
            this.scrollRefresh();
            this.repeat();
        },

        extractData: function (imagesData, data) {
            return _.map(data, function (item) {
                return {
                    id: 'photo-fl-' + item.object_id,
                    src: item.src,
                    data: imagesData[item.src_big]
                };
            });
        }
    });

},{"../../components/accordion-list/content":170}],247:[function(require,module,exports){
    var BaseView = require('../../components/accordion-list/content');

    module.exports = BaseView.extend({
        page: 0,

        initDataLoading: function () {
            this.end && this.end();
            INKIVE.Modal.loader(this.$el.find('.antiscroll-inner'));
        },

        initAuthenticatedDataLoading: function () {
            this.authenticated = true;
            BaseView.prototype.initDataLoading.call(this);
        },

        authenticate: function () {
            var deferred = $.Deferred();

            this.authenticated && deferred.resolve();
            this.authenticated || window.gdAsynInit(_.bind(function (success) {
                if (success) {
                    this.initAuthenticatedDataLoading();
                    deferred.resolve();
                } else {
                    this.trigger('no_access');
                    INKIVE.Modal.loaderClose(this.$el.find('.antiscroll-inner'));
                    deferred.reject();
                }
            }, this));

            return deferred.promise();
        },

        loadData: function (repeat, end) {
            this.end = end;
            this.repeat = repeat;

            INKIVE.Modal.loader(this.$el.find('.antiscroll-inner'));
            this.imagesFactory.getGooglePhotos({ page: this.page++ }, this.onMoreData);
        },

        onMoreData: function (status, imagesData, data) {
            INKIVE.Modal.loaderClose(this.$el.find('.antiscroll-inner'));
            if (!status || !data.length) {
                this.end();return;
            }

            var callback = _.bind(this.tool.callbackImages, this.tool);
            this.tool.addThumbItem(this.$el, this.extractData(imagesData, data), callback);
            this.scrollRefresh();
            this.repeat();
        },

        extractData: function (imagesData, data) {
            return _.map(data, function (item) {
                return {
                    id: 'photo-gd-' + item.object_id,
                    src: item.src,
                    data: imagesData[item.src_big]
                };
            });
        }
    });

},{"../../components/accordion-list/content":170}],248:[function(require,module,exports){
    var BaseView = require('../../components/accordion-list/content');
    var AppDecorate = require('../../../../app/decorate');

    module.exports = AppDecorate(require('./app/instagram'), BaseView.extend({
        initialize: function () {
            _.bindAll(this, 'initAuthenticatedDataLoading');
            BaseView.prototype.initialize.call(this);
        },

        initDataLoading: function () {
            this.end && this.end();
            INKIVE.Modal.loader(this.$el.find('.antiscroll-inner'));
        },

        initAuthenticatedDataLoading: function () {
            this.authenticated = true;
            BaseView.prototype.initDataLoading.call(this);
        },

        authenticate: function () {
            var deferred = $.Deferred();

            this.authenticated && deferred.resolve();
            this.authenticated || window.inAsynInit(_.bind(function (success) {

                if (success) {
                    this.initAuthenticatedDataLoading();
                    deferred.resolve();
                } else {
                    this.trigger('no_access');
                    INKIVE.Modal.loaderClose(this.$el.find('.antiscroll-inner'));
                    deferred.reject();
                }
            }, this));

            return deferred.promise();
        },

        loadData: function (repeat, end) {
            this.end = end;
            this.repeat = repeat;

            INKIVE.Modal.loader(this.$el.find('.antiscroll-inner'));
            this.imagesFactory.getInstagramPhotos(null, this.onMoreData);
        },

        onMoreData: function (status, imagesData, data) {
            INKIVE.Modal.loaderClose(this.$el.find('.antiscroll-inner'));
            if (!status) return;

            var callback = _.bind(this.tool.callbackImages, this.tool);
            this.tool.addThumbItem(this.$el, this.extractData(imagesData, data), callback);
            this.scrollRefresh();
            this.end();
        },

        extractData: function (imagesData, data) {
            return _.map(data, function (item) {
                return {
                    id: 'photo-in-' + item.object_id,
                    src: item.src,
                    width: item.src_web_width,
                    height: item.src_web_height,
                    data: imagesData[item.src_big]
                };
            });
        }
    }));

},{"../../../../app/decorate":7,"../../components/accordion-list/content":170,"./app/instagram":239}],249:[function(require,module,exports){
    var BaseView = require('../../components/accordion-list/content');
    var ProjectView = require('./project');

    module.exports = BaseView.extend({
        apiCall: 'photo/saved',

        initialize: function () {
            BaseView.prototype.initialize.call(this);
            _.bindAll(this, 'displayProjectImagesEvent');
        },

        displayProjectImagesEvent: function (id) {
            this.openNewView('project', ProjectView, { projectId: id });
        },

        getParams: function () {
            var params = {
                id: INKIVE.C.BOOK.id,
                type: 'albums',
                from: this.from,
                limit: this.limit
            };

            this.from += this.limit;

            return params;
        },

        appendThumbnails: function (data) {
            var $thumbnailWrapper = this.$el.find('.thumbnailWrapper');

            _.each(data, function (item) {
                var onClick = _.partial(this.displayProjectImagesEvent, item['id']);
                var $thumbGroup = new INKIVE.ThumbGroupImage($.extend(item, {
                    tooltip: item['name'],
                    thumb: item['scrapbook_url_key'],
                    onItemLoad: function (thumb) {
                        $(thumb).on('click', onClick);
                    }
                }));

                $thumbGroup.appendTo($thumbnailWrapper);
            }, this);

            this.masonryReload();
        }
    });

},{"../../components/accordion-list/content":170,"./project":250}],250:[function(require,module,exports){
    var BaseView = require('../../components/accordion-list/content');
    var UploadListMixin = require('../../components/mixins/upload-list');

    module.exports = Backbone.mixin(BaseView.extend({
        apiCall: 'photo/saved',

        initialize: function (options) {
            this.projectId = options.projectId;
            BaseView.prototype.initialize.call(this);

            this.projectId || UploadListMixin.initialize.call(this);
        },

        getParams: function () {
            var params = {
                id: this.projectId || INKIVE.C.BOOK.id,
                type: 'photos',
                from: this.from,
                limit: this.limit
            };

            this.from += this.limit;

            return params;
        },

        extractData: function (data) {
            return _.compact(_.map(data, function (item) {
                if (!item['thumb_photo'].trim()) return;

                var imageData = this.getImageData(item);
                this.imagesFactory.addImageData(imageData);

                return {
                    id: 'photo-saved-' + item['photo_id'],
                    src: item['thumb_photo'],
                    width: item['original_photo_width'],
                    height: item['original_photo_height'],
                    times_used: item['count'],
                    data: imageData,
                    sticker_value: item['count'],
                    sticker_tooltip: 'used ' + item['count'] + ' time' + (item['count'] > 1 ? 's' : '')
                };
            }, this));
        },

        getImageData: function (item) {
            return {
                name: item['name'],
                date: item['create_date'],
                version: {
                    thumb: item['thumb_photo'],
                    mobile: item['mobile_photo'],
                    tab: item['tab_photo'],
                    web: item['web_photo'],
                    largeweb: item['largeweb_photo'],
                    original: item['original_photo']
                }
            };
        },

        complete: function (id, data) {
            UploadListMixin.complete.call(this, id, data);
            // TODO: this code should be at image thumbnail, involving callbacks refactoring
            this.views[id].$el.find('.item').data('version', { original: data.tempLink });
            this.tool.callbackImages(this.views[id].$el, this.$el);
        },

        closeView: function () {
            return true;
        }
    }), UploadListMixin);

},{"../../components/accordion-list/content":170,"../../components/mixins/upload-list":179}],251:[function(require,module,exports){
    var BaseView = require('../../components/accordion-list/director');

    module.exports = {
        render: function (lockedLibrary) {
            var can = this.restrictionsFacade.isFunctionalityAllowed;
            this.buttons = this.buttons.filter(buttonFilter);

            BaseView.prototype.render.call(this);

            function buttonFilter(button) {
                if (button.disabled) return false;

                switch (button.key) {
                    case 'search':
                        return can('function_use_web_images') && can('image_add');
                }

                return true;
            }
        }
    };

},{"../../components/accordion-list/director":172}],252:[function(require,module,exports){
    var BaseView = require('../components/accordion-list/director');
    var AnalyticsDecorate = require('../../../analytics/decorate');
    var RestrictDecorate = require('../../../facade/restrictions/decorate');

    module.exports = AnalyticsDecorate(require('./analytics/view'), RestrictDecorate(require('./restrict/view'), BaseView.extend({
        class: 'images',
        uploadViewKey: 'project',
        views: {},
        Views: {
            project: require('./contents/project'),
            other: require('./contents/other'),
            facebookAlbums: require('./contents/facebook-albums'),
            facebookPages: require('./contents/facebook-pages'),
            instagram: require('./contents/instagram'),
            flickr: require('./contents/flickr'),
            gdrive: require('./contents/gdrive'),
            dropbox: require('./contents/dropbox')
        },
        buttons: [],

        events: {
            'click dt > a:not([data-key="add"]):not([data-key="search"])': 'listContentToggleEvent',
            'click dt > a[data-key="search"]': 'openSearchTabEvent'
        },

        loadListContent: function (key) {
            var $button = this.$el.find('dt a[data-key="' + key + '"]');
            var view = BaseView.prototype.loadListContent.apply(this, arguments);

            view.on('no_access', function () {
                $button.addClass('blink');
            });

            return view;
        },

        listContentToggleEvent: function (event) {
            var $button = $(event.currentTarget);
            $button.removeClass('blink');
            var $container = $button.closest('dt');
            var isActive = $container.hasClass('active');
            var key = $button.data('key');
            this.views[key] || this.loadListContent(key);

            if (!isActive && this.views[key].authenticate) {
                this.views[key].authenticate().then(_.bind(function () {
                    BaseView.prototype.listContentToggleEvent.call(this, event);
                }, this));

                return;
            }

            BaseView.prototype.listContentToggleEvent.call(this, event);
        },

        openSearchTabEvent: function (event) {
            $('.tool-menu li > a[href="#tabSearch"]').trigger('click');
        },

        initialize: function () {
            this.buttons = [{ key: 'add', tag: 'tool.images.add', icon: 'icon-plus' }, { key: 'project', tag: 'tool.images.this', image: 'assets/img/favicon-editor.png' }, { key: 'other', tag: 'tool.images.other', image: 'assets/img/favicon-editor.png' }];

            INKIVE.C.IS_MOBILE || this.buttons.push({
                key: 'search',
                tag: 'tool.images.search',
                icon: 'icon-magnifying-glass'
            });

            this.buttons = _.union(this.buttons, [{ key: 'facebookAlbums', tag: 'tool.images.facebook_albums', icon: 'icon-fbk' }, { key: 'facebookPages', tag: 'tool.images.facebook_pages', icon: 'icon-fbk' }, { key: 'instagram', tag: 'tool.images.instagram', icon: 'icon-in' }]);

            if (!INKIVE.C.IS_MOBILE_APP) {
                this.buttons = _.union(this.buttons, [{ key: 'flickr', tag: 'tool.images.flickr', icon: 'icon-fl' }, { key: 'gdrive', tag: 'tool.images.gdrive', icon: 'icon-gd', disabled: !INKIVE.C.USER.IS_SUPER }, { key: 'dropbox', tag: 'tool.images.dropbox', icon: 'icon-db', disabled: !INKIVE.C.USER.IS_SUPER }]);
            }

            BaseView.prototype.initialize.call(this);
        }
    })));

},{"../../../analytics/decorate":4,"../../../facade/restrictions/decorate":57,"../components/accordion-list/director":172,"./analytics/view":237,"./contents/dropbox":240,"./contents/facebook-albums":241,"./contents/facebook-pages":242,"./contents/flickr":246,"./contents/gdrive":247,"./contents/instagram":248,"./contents/other":249,"./contents/project":250,"./restrict/view":251}],253:[function(require,module,exports){
    module.exports = {
        eventCategory: 'Editor UI | Tool Menu | import',

        show: { eventAction: 'show' },

        listContentToggleEvent: function (event) {
            var $button = $(event.currentTarget);
            var $container = $button.closest('dt');

            $container.hasClass('active') || this.trackEvent({
                eventAction: 'content_toggle',
                eventLabel: $button.data('key')
            });
        }
    };

},{}],254:[function(require,module,exports){
    var BaseView = require('./base');
    var UploadListMixin = require('../../components/mixins/upload-list');

    module.exports = Backbone.mixin(BaseView.extend({
        uploadConfig: {
            validation: {
                acceptFiles: '.pdf, .psd, .svg, .ppt, .pptx',
                allowedExtensions: ['pdf', 'psd', 'svg', 'ppt', 'pptx']
            },
            uploadSuccess: { params: { loadType: 120 } }
        },

        initialize: function () {
            BaseView.prototype.initialize.call(this);
            UploadListMixin.initialize.call(this);
        },

        complete: function (id, data) {
            var view = this.views[id];
            view.cancel();

            _.delay(_.bind(function () {
                view.remove();
                this.refreshView();
            }, this), 1000);
        },

        appendThumbnails: function (data) {
            var $content = this.$el.find('.thumbnailWrapper');
            var callback = _.bind(this.tool.callbackImages, this.tool);

            this.tool.addThumbItem(this.$el, this.extractImageData(data), callback);

            _.each(this.extractSvgData(data), function (svgThumb) {
                this.$el.find('#' + svgThumb.uuid).length || svgThumb.appendTo($content);
            }, this);

            _.each(this.extractTextData(data), function (textThumb) {
                this.$el.find('#' + textThumb.uuid).length || textThumb.appendTo($content);
            }, this);

            this.masonryReload();
        },

        closeView: function () {
            return true;
        }
    }), UploadListMixin);

},{"../../components/mixins/upload-list":179,"./base":255}],255:[function(require,module,exports){
    var BaseView = require('../../components/accordion-list/content');

    module.exports = BaseView.extend({
        apiCall: 'photo/imported',
        limit: 20,

        initialize: function () {
            BaseView.prototype.initialize.call(this);

            this.refreshView = _.debounce(_.bind(function () {
                this.masonryReload();

                this.from -= this.limit * 2;
                this.from = this.from < 0 ? 0 : this.from;
                this.initDataLoading();
            }, this), 2000);
        },

        getParams: function () {
            var params = {
                id: INKIVE.C.BOOK.id,
                from: this.from,
                limit: this.limit
            };

            this.from += this.limit;

            return params;
        },

        extractSvgData: function (data) {
            return _.compact(_.map(data, function (item) {
                if (item.type == 'svg') return new INKIVE.ThumbSvg(item);
            }, this));
        },

        extractTextData: function (data) {
            return _.compact(_.map(data, function (item) {
                if (item.type == 'text') return new INKIVE.ThumbText($.extend(item, { tooltip: data.text }));
            }, this));
        },

        extractImageData: function (data) {
            return _.compact(_.map(data, function (item) {
                if (item.type == 'svg' || item.type == 'text') return;
                if (!item['thumb_photo'].trim()) return;

                var id = 'photo-saved-' + item['photo_id'];
                if (this.$el.find('#' + id).length) return;

                var imageData = this.getImageData(item);
                this.imagesFactory.addImageData(imageData);

                return {
                    id: id,
                    src: item['thumb_photo'],
                    width: item['original_photo_width'],
                    height: item['original_photo_height'],
                    times_used: item['count'],
                    data: imageData,
                    sticker_value: item['count'],
                    sticker_tooltip: 'used ' + item['count'] + ' time' + (item['count'] > 1 ? 's' : '')
                };
            }, this));
        },

        getImageData: function (item) {
            return {
                name: item['name'],
                date: item['create_date'],
                version: {
                    thumb: item['thumb_photo'],
                    mobile: item['mobile_photo'],
                    tab: item['tab_photo'],
                    web: item['web_photo'],
                    largeweb: item['largeweb_photo'],
                    original: item['original_photo']
                }
            };
        }
    });

},{"../../components/accordion-list/content":170}],256:[function(require,module,exports){
    var BaseView = require('./base');

    module.exports = BaseView.extend({
        appendThumbnails: function (data) {
            var $content = this.$el.find('.thumbnailWrapper');
            var callback = _.bind(this.tool.callbackImages, this.tool);

            this.tool.addThumbItem(this.$el, this.extractImageData(data), callback);

            this.masonryReload();
        }
    });

},{"./base":255}],257:[function(require,module,exports){
    var BaseView = require('./base');

    module.exports = BaseView.extend({
        appendThumbnails: function (data) {
            var $content = this.$el.find('.thumbnailWrapper');

            _.each(this.extractSvgData(data), function (svgThumb) {
                this.$el.find('#' + svgThumb.uuid).length || svgThumb.appendTo($content);
            }, this);

            this.masonryReload();
        }
    });

},{"./base":255}],258:[function(require,module,exports){
    var BaseView = require('./base');

    module.exports = BaseView.extend({
        appendThumbnails: function (data) {
            var $content = this.$el.find('.thumbnailWrapper');

            _.each(this.extractTextData(data), function (textThumb) {
                this.$el.find('#' + textThumb.uuid).length || textThumb.appendTo($content);
            }, this);

            this.masonryReload();
        }
    });

},{"./base":255}],259:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        var alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=container.escapeExpression;

        return "<div class=\"cant-import\">\n  <p>"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"tool.import.helper.text_6",{"name":"t","hash":{},"data":data}))
            + "</p>\n  <p><br/></p>\n  <a href=\""
            + alias3((helpers.route || (depth0 && depth0.route) || alias2).call(alias1,"library?r=upgrade",{"name":"route","hash":{},"data":data}))
            + "\" target=\"_blank\" class=\"btn btn-yellow go-premium\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"tool.import.helper.go_premium",{"name":"t","hash":{},"data":data}))
            + "</a>\n</div>\n";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=container.escapeExpression, buffer =
            "<p>"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"tool.import.helper.text_1",{"name":"t","hash":{},"data":data}))
            + "</p>\n<p>"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"tool.import.helper.text_2",{"name":"t","hash":{},"data":data}))
            + " <a href=\"#\" class=\"open-images\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"tool.import.helper.text_3",{"name":"t","hash":{},"data":data}))
            + "</a> "
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"tool.import.helper.text_4",{"name":"t","hash":{},"data":data}))
            + "</p>\n<p><br/></p>\n<p>"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"tool.import.helper.text_5",{"name":"t","hash":{},"data":data}))
            + "</p>\n\n";
        stack1 = ((helper = (helper = helpers.can_import || (depth0 != null ? depth0.can_import : depth0)) != null ? helper : alias2),(options={"name":"can_import","hash":{},"fn":container.noop,"inverse":container.program(1, data, 0),"data":data}),(typeof helper === "function" ? helper.call(alias1,options) : helper));
        if (!helpers.can_import) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer;
    },"useData":true});

},{"hbsfy/runtime":373}],260:[function(require,module,exports){
    var BaseView = require('../components/helper/view');
    var contentTemplate = require('./helper.hbs');
    var UserInfoFactory = require('../../../factory/user-info');

    module.exports = BaseView.extend({
        events: _.extend({}, BaseView.prototype.events, {
            'click a.open-images': 'openImagesTabEvent',
            'click a.btn.go-premium': 'upgradeEvent'
        }),

        openImagesTabEvent: function () {
            $('.tool-menu li > a[href="#tabImages"]').trigger('click');
        },

        upgradeEvent: function () {},

        initialize: function (options) {
            BaseView.prototype.initialize.call(this);
            this.initData(options.isPremium);
        },

        initData: function (isPremium) {
            this.data.title = 'tool.import.helper.title';
            this.data.content = contentTemplate({
                'can_import': isPremium
            });

            this.render();
            _.delay(_.bind(this.toggle, this, !isPremium), 600);
        }
    });

},{"../../../factory/user-info":81,"../components/helper/view":174,"./helper.hbs":259}],261:[function(require,module,exports){
    module.exports = {
        render: function (lockedLibrary) {
            var can = this.restrictionsFacade.isFunctionalityAllowed;

            this.lockedLibrary = lockedLibrary;
            this.$el.html(this.template({
                class: this.class,
                buttons: this.buttons.filter(buttonFilter)
            }));

            this.helperView && this.helperView.remove();
            lockedLibrary && this.initHelper();

            function buttonFilter(button) {
                if (button.disabled) return false;

                switch (button.key) {
                    case 'all':
                        return can('text_add') && can('vector_add') && can('function_use_own_images') && can('image_add');
                    case 'images':
                        return can('function_use_own_images') && can('image_add');
                    case 'text':
                        return can('text_add');
                    case 'svg':
                        return can('vector_add');
                }

                return true;
            }
        }
    };

},{}],262:[function(require,module,exports){
    var BaseView = require('../components/accordion-list/director');
    var HelperView = require('./helper.js');
    var UserInfoFactory = require('../../../factory/user-info');
    var AnalyticsDecorate = require('../../../analytics/decorate');
    var RestrictDecorate = require('../../../facade/restrictions/decorate');

    module.exports = AnalyticsDecorate(require('./analytics/view'), RestrictDecorate(require('./restrict/view'), BaseView.extend({
        class: 'import',
        uploadViewKey: 'all',
        views: {},
        Views: {
            all: require('./contents/all'),
            images: require('./contents/images'),
            text: require('./contents/text'),
            svg: require('./contents/svg')
        },
        buttons: [{ key: 'add', tag: 'tool.import.add', icon: 'icon-plus' }, { key: 'all', tag: 'tool.import.all', icon: 'icon-earth' }, { key: 'images', tag: 'tool.import.images', icon: 'icon-file-image-o' }, { key: 'text', tag: 'tool.import.text', icon: 'icon-text-height' }, { key: 'svg', tag: 'tool.import.svg', icon: 'icon-file-code-o' }],

        listContentToggleEvent: function (event) {
            this.isPremium || this.helperView.toggle(true);
            this.isPremium && BaseView.prototype.listContentToggleEvent.call(this, event);
        },

        beforeSubmitEvent: function (event) {
            if (!this.isPremium) {
                this.helperView.toggle(true);
                event.preventDefault();
            }
        },

        initialize: function () {
            _.bindAll(this, 'beforeSubmitEvent');

            UserInfoFactory.get().then(_.bind(function (userInfo) {
                this.isPremium = _(userInfo['roles']).contains('ROLE_PREMIUM');
                BaseView.prototype.initialize.call(this);
            }, this));
        },

        render: function () {
            BaseView.prototype.render.call(this);
            this.initHelper();
        },

        initHelper: function () {
            var $helperView = $('<div>');
            this.$el.children('.tab-content').append($helperView);
            this.helperView = new HelperView({
                isPremium: this.isPremium,
                el: $helperView
            });

            this.helperView.on('toggle', _.bind(function (value) {
                this.$el.find('.wrapper').toggleClass('blur', value);
            }, this));
        }
    })));

},{"../../../analytics/decorate":4,"../../../facade/restrictions/decorate":57,"../../../factory/user-info":81,"../components/accordion-list/director":172,"./analytics/view":253,"./contents/all":254,"./contents/images":256,"./contents/svg":257,"./contents/text":258,"./helper.js":260,"./restrict/view":261}],263:[function(require,module,exports){
    module.exports = {
        eventCategory: 'Editor UI | Tool Menu | library',
        show: { eventAction: 'show' },

        listContentToggleEvent: function (event) {
            var $button = $(event.currentTarget);
            var $container = $button.closest('dt');

            $container.hasClass('active') || this.trackEvent({
                eventAction: 'content_toggle',
                eventLabel: $button.data('key')
            });
        }
    };

},{}],264:[function(require,module,exports){
    var BaseView = require('./base');
    var DesignFacade = require('../../../../facade/design/design');
    var EditorFacade = require('../../../../facade/editor/editor');

    module.exports = BaseView.extend({
        type: 'images',
        filter: { type: 2 },
        ThumbnailView: require('../../components/thumbnail/library/background'),

        initialize: function () {
            _.bindAll(this, 'updateBackgroundSize');

            this.editor = INKIVE.Tool.getInstance().editor;
            this.canvas = this.editor.canvas;

            BaseView.prototype.initialize.call(this);

            EditorFacade.on('page.move_to', this.updateBackgroundSize);
            DesignFacade.on('template.update.size', this.updateBackgroundSize);
        },

        render: function (items) {
            this.$el.html(this.template());
            _.each(items, this.addThumbnail, this);
            items.length || this.$el.find('.library-link').removeClass('hidden');
            this.updateBackgroundSize();
        },

        updateBackgroundSize: function (item) {
            var canvasRatio = this.canvas.contentW / this.canvas.contentH;
            var thumbnailWidth = this.$el.find('ul.thumbnail-wrapper li').width();

            this.$el.find('ul.thumbnail-wrapper li').css('height', thumbnailWidth / canvasRatio);
            this.initScroll();
        }
    });

},{"../../../../facade/design/design":19,"../../../../facade/editor/editor":45,"../../components/thumbnail/library/background":198,"./base":265}],265:[function(require,module,exports){
    var ScrollableMixin = require('../../components/mixins/scrollable');
    var LibraryFactory = require('../../../../factory/library');

    module.exports = Backbone.mixin(Backbone.mixin(Backbone.View.extend({
        template: require('./template.hbs'),

        events: {
            'click .library-link a.empty': 'goToLibraryEvent'
        },

        goToLibraryEvent: _.partial(Backbone.Events.trigger, 'go_to_libray'),

        initialize: function () {
            _.bindAll(this, 'render', 'loadData');
        },

        loadData: function () {
            INKIVE.Modal.loader(this.$el.empty());

            LibraryFactory.get(this.type, this.filter).then(this.render);
        },

        render: function (items) {
            this.$el.html(this.template());
            _.each(items, this.addThumbnail, this);
            items.length || this.$el.find('.library-link').removeClass('hidden');
            this.initScroll();
        },

        addThumbnail: function (item) {
            var $view = $('<li>');
            var thumbnailView = new this['ThumbnailView']({
                el: $view,
                item: item
            });

            this.$el.find('ul.thumbnail-wrapper').append($view);

            return thumbnailView;
        },

        remove: function () {
            this.undelegateEvents();
            this.$el.removeData().unbind();
            Backbone.View.prototype.remove.call(this);
        },

        getScrollHeight: function ($target) {
            var containerHeight = $target.closest('.tab-content').height();
            var buttonHeight = $target.siblings('.btn.btn-accordion').is(':visible') ? $target.siblings('.btn.btn-accordion').height() : $('#ik-menu-back').height();

            return containerHeight - buttonHeight;
        }
    }), Backbone.Events), ScrollableMixin);

},{"../../../../factory/library":67,"../../components/mixins/scrollable":178,"./template.hbs":269}],266:[function(require,module,exports){
    var BaseView = require('./base');

    module.exports = BaseView.extend({
        type: 'colors',
        ThumbnailView: require('../../components/thumbnail/library/color'),

        render: function (items) {
            BaseView.prototype.render.call(this, items);
            INKIVE.Helpers.initTooltips(this.$el);
        }
    });

},{"../../components/thumbnail/library/color":199,"./base":265}],267:[function(require,module,exports){
    var BaseView = require('./base');

    module.exports = BaseView.extend({
        type: 'images',
        filter: { type: 1 },
        ThumbnailView: require('../../components/thumbnail/library/image'),

        initialize: function () {
            BaseView.prototype.initialize.call(this);

            this.masonryRefresh = _.debounce(_.bind(this.masonryReload, this), 1000);
            this.scrollRefresh = _.debounce(_.bind(this.initScroll, this), 2000);
        },

        render: function () {
            BaseView.prototype.render.apply(this, arguments);
            this.$el.find('.thumbnail-wrapper').masonry();
        },

        addThumbnail: function () {
            var thumbnailView = BaseView.prototype.addThumbnail.apply(this, arguments);
            thumbnailView.on('resize', this.masonryRefresh);

            return thumbnailView;
        },

        masonryReload: function () {
            var $thumbnailWrapper = this.$el.find('.thumbnail-wrapper');
            $thumbnailWrapper.masonry('reloadItems');
            $thumbnailWrapper.masonry('layout');
            this.scrollRefresh();
        }
    });

},{"../../components/thumbnail/library/image":200,"./base":265}],268:[function(require,module,exports){
    var BaseView = require('./base');

    module.exports = BaseView.extend({
        type: 'logos',
        ThumbnailView: require('../../components/thumbnail/library/logo')
    });

},{"../../components/thumbnail/library/logo":201,"./base":265}],269:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=container.escapeExpression;

        return "<div class=\"antiscroll-wrap\">\n  <div class=\"antiscroll-inner\">\n    <ul class=\"thumbnail-wrapper\"></ul>\n    <div class=\"library-link hidden\">\n      <p>"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"tool.library.empty.message",{"name":"t","hash":{},"data":data}))
            + "</p>\n      <a href=\""
            + alias3((helpers.route || (depth0 && depth0.route) || alias2).call(alias1,"library",{"name":"route","hash":{},"data":data}))
            + "\" target=\"_blank\" class=\"btn btn-yellow empty\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"tool.library.empty.button",{"name":"t","hash":{},"data":data}))
            + "</a>\n    </div>\n  </div>\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],270:[function(require,module,exports){
    var BaseView = require('./base');

    module.exports = BaseView.extend({
        type: 'texts',
        ThumbnailView: require('../../components/thumbnail/library/text')
    });

},{"../../components/thumbnail/library/text":202,"./base":265}],271:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=container.escapeExpression;

        return "<div class=\"big-icon\"><i class=\"fa fa-unlock\"></i></div>\n<a href=\""
            + alias3((helpers.route || (depth0 && depth0.route) || alias2).call(alias1,"library",{"name":"route","hash":{},"data":data}))
            + "\" target=\"_blank\" class=\"btn btn-yellow locked\">\n    "
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"tool.library.locked.button",{"name":"t","hash":{},"data":data}))
            + "\n</a>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],272:[function(require,module,exports){
    var BaseView = require('../components/helper/view');
    var contentTemplate = require('./helper.hbs');

    module.exports = BaseView.extend({
        events: _.extend({}, BaseView.prototype.events, {
            'click a.locked': 'goToLibraryEvent'
        }),

        goToLibraryEvent: function () {
            $('#tool-panel .tool-menu a[href="#tabTutorial"]').trigger('click');
        },

        initialize: function () {
            BaseView.prototype.initialize.call(this);

            this.data.title = 'tool.library.locked.message';
            this.data.content = contentTemplate();

            this.render();
        }
    });

},{"../components/helper/view":174,"./helper.hbs":271}],273:[function(require,module,exports){
    module.exports = {
        render: function (lockedLibrary) {
            var can = this.restrictionsFacade.isFunctionalityAllowed;

            this.lockedLibrary = lockedLibrary;
            this.$el.html(this.template({
                class: this.class,
                buttons: this.buttons.filter(buttonFilter)
            }));

            this.helperView && this.helperView.remove();
            lockedLibrary && this.initHelper();

            function buttonFilter(button) {
                if (button.disabled) return false;

                switch (button.key) {
                    case 'text':
                        return can('text_add');
                    case 'logos':
                        return can('function_use_own_logos');
                    case 'colors':
                        return can('function_use_own_colors');
                    case 'images':
                        return can('function_use_own_images') && can('image_add');
                    case 'backgrounds':
                        return can('function_use_own_background');
                }

                return true;
            }
        }
    };

},{}],274:[function(require,module,exports){
    var BaseView = require('../components/accordion-list/director');
    var AnalyticsDecorate = require('../../../analytics/decorate');
    var RestrictDecorate = require('../../../facade/restrictions/decorate');
    var UserInfoFactory = require('../../../factory/user-info');
    var HelperView = require('./helper.js');
    var LibraryFactory = require('../../../factory/library');
    var EditorModeManager = require('../../editor-mode-manager');

    module.exports = AnalyticsDecorate(require('./analytics/view'), RestrictDecorate(require('./restrict/view'), BaseView.extend({
        class: 'library',
        views: {},
        Views: {
            text: require('./contents/texts'),
            logos: require('./contents/logos'),
            colors: require('./contents/colors'),
            images: require('./contents/images'),
            backgrounds: require('./contents/backgrounds')
        },
        buttons: [{ key: 'text', tag: 'tool.library.text', icon: 'fa fa-font' }, { key: 'logos', tag: 'tool.library.logos', icon: 'fa fa-certificate' }, { key: 'colors', tag: 'tool.library.colors', icon: 'fa fa-paint-brush' }, { key: 'images', tag: 'tool.library.images', icon: 'fa fa-picture-o' }, { key: 'backgrounds', tag: 'tool.library.backgrounds', icon: 'fa fa-th' }],

        listContentToggleEvent: function (event) {
            this.lockedLibrary && this.helperView.toggle(true);
            this.lockedLibrary || BaseView.prototype.listContentToggleEvent.call(this, event);
        },

        loadListContent: function (key) {
            var view = BaseView.prototype.loadListContent.apply(this, arguments);
            var $button = this.$el.find('dt a[data-key="' + key + '"]');

            view.on('go_to_libray', _.bind(function () {
                this.hideListContent($button, key);
                $button.closest('dt').removeClass('active');
                LibraryFactory.cacheClear(key);
            }, this));

            return view;
        },

        showListContent: function ($button, key) {
            key = key || $button.data('key');
            BaseView.prototype.showListContent.call(this, $button, key);
            this.views[key].loadData();
        },

        show: function () {
            var now = new Date();
            var isDoubleClick = now - this.showingTime < 600;
            var isAlreadyThere = this.$el.find('.tab-content.library').length > 0 && this.$el.find('.tab-content.library .helper').length === 0;

            isAlreadyThere || this.checkForRole();
            isAlreadyThere && isDoubleClick && this.closeAccordion();
            this.showingTime = now;

            this.$el.find('.wrapper [data-key="backgrounds"]').parent().toggle(!EditorModeManager.isMode('logo'));
        },

        checkForRole: function (forceUserInfoReload) {
            this.$el.empty();
            INKIVE.Modal.loader(this.$el);

            UserInfoFactory.get(forceUserInfoReload).then(_.bind(function (userInfo) {
                INKIVE.Modal.loaderClose(this.$el);
                var hasLibrary = _(userInfo['roles']).contains('ROLE_LIBRARY');

                if (!hasLibrary) {
                    forceUserInfoReload && this.render(true);
                    forceUserInfoReload || this.checkForRole(true);
                } else this.render();
            }, this));
        },

        render: function (lockedLibrary) {
            this.lockedLibrary = lockedLibrary;
            this.$el.html(this.template({
                class: this.class,
                buttons: this.buttons
            }));

            this.helperView && this.helperView.remove();
            lockedLibrary && this.initHelper();
        },

        initHelper: function () {
            var $helperView = $('<div>');
            this.$el.children('.tab-content').append($helperView);
            this.helperView = new HelperView({ el: $helperView });

            this.helperView.on('toggle', _.bind(function (value) {
                this.$el.find('.wrapper').toggleClass('blur', value);
            }, this));

            this.helperView.toggle(true);
        }
    })));

},{"../../../analytics/decorate":4,"../../../facade/restrictions/decorate":57,"../../../factory/library":67,"../../../factory/user-info":81,"../../editor-mode-manager":102,"../components/accordion-list/director":172,"./analytics/view":263,"./contents/backgrounds":264,"./contents/colors":266,"./contents/images":267,"./contents/logos":268,"./contents/texts":270,"./helper.js":272,"./restrict/view":273}],275:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        var stack1;

        return "<span>"
            + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? depth0.restrictions : depth0)) != null ? stack1.length : stack1), depth0))
            + "</span>";
    },"3":function(container,depth0,helpers,partials,data) {
        return "  <p class=\"restrictions-list\">No element restrictions have been added yet. Select an element on your template to start.</p>\n";
    },"5":function(container,depth0,helpers,partials,data) {
        var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=container.escapeExpression, alias4="function";

        return "      <li>\n      <!-- TODO : Add element type -->\n        "
            + alias3((helpers.math || (depth0 && depth0.math) || alias2).call(alias1,(data && data.index),"+",1,{"name":"math","hash":{},"data":data}))
            + ") Restriction on "
            + alias3(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias4 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
            + "\n        <button class=\"show-restriction\" data-element=\""
            + alias3(((helper = (helper = helpers.element || (depth0 != null ? depth0.element : depth0)) != null ? helper : alias2),(typeof helper === alias4 ? helper.call(alias1,{"name":"element","hash":{},"data":data}) : helper)))
            + "\">view</button>\n      </li>\n";
    },"7":function(container,depth0,helpers,partials,data) {
        var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

        return "<option value=\""
            + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"id","hash":{},"data":data}) : helper)))
            + "\">"
            + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
            + "</option>";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=helpers.blockHelperMissing, buffer =
            "<div class=\"group no-top-margin\">\n  <div>\n    <h4>\n      Element Restrictions\n      ";
        stack1 = ((helper = (helper = helpers.has_restrictions || (depth0 != null ? depth0.has_restrictions : depth0)) != null ? helper : alias2),(options={"name":"has_restrictions","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.has_restrictions) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        buffer += "\n    </h4>\n  </div>\n\n";
        stack1 = ((helper = (helper = helpers.has_restrictions || (depth0 != null ? depth0.has_restrictions : depth0)) != null ? helper : alias2),(options={"name":"has_restrictions","hash":{},"fn":container.noop,"inverse":container.program(3, data, 0),"data":data}),(typeof helper === alias3 ? helper.call(alias1,options) : helper));
        if (!helpers.has_restrictions) { stack1 = alias4.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "\n  <ul class=\"restrictions-list\">\n"
            + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.restrictions : depth0),{"name":"each","hash":{},"fn":container.program(5, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "  </ul>\n\n  <div class=\"element-selected hidden\">\n    Editing restrictions on the selected element.\n    <div class=\"select-wrapper\">\n      <select>\n        "
            + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.groups : depth0),{"name":"each","hash":{},"fn":container.program(7, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "\n      </select>\n    </div>\n  </div>\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],276:[function(require,module,exports){
    var template = require('./element-restrictions.hbs');
    var EditorFacade = require('../../../facade/editor/editor');
    var RestrictionsFactory = require('../../../factory/restrictions');
    var RestrictionsFacade = require('../../../facade/restrictions/restrictions');

    var RestrictionViews = {
        'text': require('./element/text-type'),
        'image': require('./element/image-type'),
        'vector': require('./element/vector-type'),
        'background': require('./element/background-type')
    };

    module.exports = Backbone.mixin(Backbone.View.extend({
        events: {
            'change .element-selected select': 'changeGroupEvent',
            'click button.show-restriction': 'showRestrictionEvent'
        },

        showRestrictionEvent: function (event) {
            var canvas = INKIVE.Tool.getInstance().editor.canvas;
            var $elem = $('#' + $(event.currentTarget).data('element'));

            canvas.setMode('select');
            canvas.selectOnly([$elem[0]], true);
        },

        changeGroupEvent: function (event) {
            if (this.currentRestrictionsView) {
                var group = this.getGroup($(event.currentTarget).val());
                group && this.currentRestrictionsView.refresh(group);
            }
        },

        getGroup: function (groupId) {
            return _(this.groups).find(function (group) {
                return group.id == groupId;
            });
        },

        initialize: function () {
            _.bindAll(this, 'render', 'selectedEvent');
            EditorFacade.on('select', this.selectedEvent);

            this.refresh();
        },

        refresh: function () {
            var gPromise = RestrictionsFactory.get('groups');
            var tPromise = RestrictionsFactory.get('permission/elementpermissions');

            $.when(gPromise, tPromise).then(this.render);
        },

        selectedEvent: function (elements) {
            var element = _(elements).first();

            if (elements.length < 2) {
                this.currentRestrictionsView && this.currentRestrictionsView.remove();
                var type = element && RestrictionsFacade.getType($('#' + element.id)[0]);

                if (element && RestrictionViews[type]) {
                    var $view = $('<div class="group content"></div>');

                    this.$el.append($view);
                    this.currentRestrictionsView = new RestrictionViews[type]({
                        el: $view,
                        selection: element
                    });

                    this.currentRestrictionsView.on('update', _.bind(this.trigger, this, 'update'));
                    this.$el.find('.restrictions-list').addClass('hidden');
                    this.$el.find('.element-selected').removeClass('hidden');

                    return;
                }
            }

            this.refresh();
        },

        render: function (groups, permissions) {
            this.groups = groups;

            var restrictions = this.getSingleElementPermissions(permissions);
            var defaultGroups = _(groups).filter(function (group) {
                return group.permissions;
            });

            this.$el.html(template({
                groups: defaultGroups,
                has_restrictions: restrictions.length > 0,
                restrictions: restrictions
            }));

            this.trigger('update');
        },

        getSingleElementPermissions: function (permissions) {
            var result = [];
            var partial = _.map(permissions, function (p) {
                return {
                    name: 'element ' + p['element_id'].split('_')[1],
                    element: p['element_id']
                };
            });

            _.each(partial, function (p) {
                var isAlreadyThere = _(result).findWhere({ element: p['element'] });
                var elementExists = $('#' + p['element']).length;

                if (!isAlreadyThere && elementExists) result.push(p);
            });

            return result;
        }
    }), Backbone.Events);

},{"../../../facade/editor/editor":45,"../../../facade/restrictions/restrictions":62,"../../../factory/restrictions":75,"./element-restrictions.hbs":275,"./element/background-type":279,"./element/image-type":284,"./element/text-type":286,"./element/vector-type":288}],277:[function(require,module,exports){
    var template = require('./text-type.hbs');
    var RestrictionsFactory = require('../../../../factory/restrictions');

    module.exports = Backbone.mixin(Backbone.View.extend({
        type: null,
        events: {
            'change .restrictions.group > input': 'toggleSectionEvent',
            'change .restrictions.group .options input': 'toggleRestrictionEvent',
            'change .restrictions.group .options select': 'toggleRestrictionEvent'
        },

        toggleSectionEvent: function (event) {
            var $input = $(event.currentTarget);
            var $group = $input.closest('.restrictions.group');
            var sectionName = $group.data('name');

            RestrictionsFactory.get('permission/elementpermissions').then(_.bind(function (ePermissions) {
                var permission = _(ePermissions).findWhere({
                    group: this.group.id,
                    element_id: this.selection.id
                });

                var restrictions = permission ? JSON.parse(permission.restrictions) : {};

                if ($input.is(':checked')) {
                    $input.siblings('.options').find('input, select').trigger('change');
                } else {
                    restrictions = _(restrictions).omit(sectionName);
                    RestrictionsFactory.setElementRestriction(this.group.id, this.selection.id, JSON.stringify(restrictions));
                }

                this.toggleRestrictionsGroup($group, $input.is(':checked'));
            }, this));
        },

        toggleRestrictionEvent: function (event) {
            this.persistOptionRestriction($(event.currentTarget));
        },

        persistOptionRestriction: function ($option) {
            var sectionName = $option.closest('.restrictions.group').data('name');

            RestrictionsFactory.get('permission/elementpermissions').then(_.bind(function (ePermissions) {
                var permission = _(ePermissions).findWhere({
                    group: this.group.id,
                    element_id: this.selection.id
                });

                var r = permission ? JSON.parse(permission.restrictions) : {};
                r[sectionName] = r[sectionName] || {};
                r[sectionName][$option.attr('name')] = this.getOptionValue($option);

                if (typeof r[sectionName][$option.attr('name')] === 'undefined') r[sectionName] = _(r[sectionName]).omit($option.attr('name'));

                RestrictionsFactory.setElementRestriction(this.group.id, this.selection.id, JSON.stringify(r));
            }, this));
        },

        getOptionValue: function ($option) {
            if ($option.is('input[type="checkbox"]')) return $option.is(':checked');
            if ($option.is('input[type="text"]')) return $option.val();
            if ($option.is('input[type="number"]')) return $option.val() === '' ? null : parseFloat($option.val());
            if ($option.is('select')) return $option.val();
        },

        initialize: function (options) {
            this.selection = options.selection;
            _.bindAll(this, 'refresh');
            this.refresh();
        },

        refresh: function (group) {
            $.when(RestrictionsFactory.get('groups'), RestrictionsFactory.get('permission/elementpermissions'), RestrictionsFactory.get('permission/templatepermissions')).then(_.bind(function (groups, ePermissions, tPermissions) {
                this.groups = groups;
                this.ePermissions = ePermissions;
                this.tPermissions = tPermissions;

                this.render(group);
            }, this));
        },

        renderRestrictions: function (group) {
            if (!group) return;
            this.group = group;

            var ePermissions = _(this.ePermissions).findWhere({
                group: group.id,
                element_id: this.selection.id
            });

            if (ePermissions) {
                var restrictions = JSON.parse(ePermissions.restrictions);

                _.each(this.$el.find('.restrictions.group[data-name]'), _.bind(function (el) {
                    var sectionName = $(el).data('name');

                    this._renderRestrictions(restrictions, sectionName);
                    this.toggleRestrictionsGroup($(el), restrictions[sectionName]);
                }, this));
            } else this.renderDefaultRestrictions();
        },

        renderDefaultRestrictions: function () {
            var tPermissions = _(this.tPermissions).findWhere({ group: this.group.id });
            var basicPermissions = {};
            var regex = new RegExp('^' + this.type + '_.*');

            _(tPermissions || this.group.permissions.template).each(function (value, key) {
                if (key.match(regex)) basicPermissions[key] = value;
            });

            this._renderRestrictions({ basic: basicPermissions }, 'basic');

            _.each(this.$el.find('.restrictions.group[data-name]'), _.bind(function (el) {
                this.toggleRestrictionsGroup($(el), false);
                $(el).children('input[type="checkbox"]').prop('checked', false);
            }, this));
        },

        _renderRestrictions: function (restrictions, sectionName) {
            var r = restrictions[sectionName];
            var $group = this.$el.find('.restrictions.group[data-name="' + sectionName + '"]');
            $group.children('input[type="checkbox"]').prop('checked', r);

            _.each(r, function (value, key) {
                $group.find('input[type="checkbox"][name="' + key + '"]').prop('checked', value);
                $group.find('input[type="number"][name="' + key + '"]').val(value);
                $group.find('input[type="text"][name="' + key + '"]').val(value);
                $group.find('select[name="' + key + '"]').val(value);
            }, this);
        },

        toggleRestrictionsGroup: function ($group, value) {
            if (value && $group.children('.options').length) {
                var height = 0;
                _($group.contents()).each(function (el) {
                    if (el.nodeType === 1) height += $(el).outerHeight(true);
                });

                $group.height(height);
            } else {
                $group.height($group.children('label').height());
            }

            this.trigger('update');
        }
    }), Backbone.Events);

},{"../../../../factory/restrictions":75,"./text-type.hbs":285}],278:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        return "<div class=\"wrapper\">\n\n  <div class=\"restrictions group\" data-name=\"opaque\">\n    <input type=\"checkbox\" id=\"element-restrictions-opaque\" />\n    <label for=\"element-restrictions-opaque\">Opaque background</label>\n  </div>\n\n  <div class=\"restrictions group\" data-name=\"colors\">\n    <input type=\"checkbox\" id=\"element-restrictions-colors\" />\n    <label for=\"element-restrictions-colors\">Colors list</label>\n    <ul class=\"options\"><li></li></ul>\n  </div>\n\n  <div class=\"restrictions group\" data-name=\"images\">\n    <input type=\"checkbox\" id=\"element-restrictions-images\" />\n    <label for=\"element-restrictions-images\">Images list</label>\n    <ul class=\"options\"><li></li></ul>\n  </div>\n\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],279:[function(require,module,exports){
    var BaseView = require('./abstract-type');
    var template = require('./background-type.hbs');
    var ColorThumbnailView = require('../../components/thumbnail/color');
    var ElementListView = require('./element-list/view');

    module.exports = BaseView.extend({
        type: 'background',

        render: function (group) {
            this.$el.html(template());

            this.initImagesList();
            this.initColorsList();

            this.renderRestrictions(group || _(this.groups).find(function (group) {
                    return group.permissions && group.permissions.template;
                }));
        },

        initImagesList: function () {
            this.imagesListView && this.imagesListView.remove();
            this.imagesListView = new ElementListView({
                el: this.$el.find('.restrictions.group[data-name="images"] li'),
                type: 'image', uuid: 'image'
            });

            this.imagesListView.on('change', _.bind(this.elementListChange, this, this.imagesListView));

            this.imagesListView.on('apply', function (url) {
                DesignFacade.set('background', { source: url });
            });
        },

        initColorsList: function () {
            this.colorsListView && this.colorsListView.remove();
            this.colorsListView = new ElementListView({
                el: this.$el.find('.restrictions.group[data-name="colors"] li'),
                type: 'color', uuid: 'color'
            });

            this.colorsListView.on('change', _.bind(this.elementListChange, this, this.colorsListView));

            this.colorsListView.on('apply', function (color) {
                DesignFacade.set('background', { color: color });
            });
        },

        elementListChange: function (view) {
            var $input = view.$el.find('input');
            this.persistOptionRestriction($input);
            this.toggleRestrictionsGroup($input.closest('.restrictions.group'), true);
        },

        getOptionValue: function ($option) {
            if ($option.is('.element-list')) return $option.data('uuid') == 'image' ? this.imagesListView.getData() : this.colorsListView.getData();

            return BaseView.prototype.getOptionValue.apply(this, arguments);
        },

        _renderRestrictions: function (restrictions, sectionName) {
            if (sectionName == 'images' && restrictions[sectionName]) _(restrictions[sectionName]['list']).each(this.imagesListView.addElement);

            if (sectionName == 'colors' && restrictions[sectionName]) _(restrictions[sectionName]['list']).each(this.colorsListView.addElement);

            BaseView.prototype._renderRestrictions.apply(this, arguments);
        }
    });

},{"../../components/thumbnail/color":193,"./abstract-type":277,"./background-type.hbs":278,"./element-list/view":282}],280:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        var alias1=container.lambda, alias2=container.escapeExpression;

        return "    <div class=\"thumbnail color\" data-value=\""
            + alias2(alias1(depth0, depth0))
            + "\" style=\"background-color: "
            + alias2(alias1(depth0, depth0))
            + "\">\n      <span class=\"remove\"><i class=\"fa fa-times\"></i></span>\n    </div>\n";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, alias1=depth0 != null ? depth0 : {};

        return "<div class=\"thumbnails-wrapper\">\n  <input type=\"hidden\" name=\"list\" class=\"element-list\" data-uuid=\""
            + container.escapeExpression(((helper = (helper = helpers.uuid || (depth0 != null ? depth0.uuid : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(alias1,{"name":"uuid","hash":{},"data":data}) : helper)))
            + "\"/>\n\n"
            + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.data : depth0),{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "\n  <div class=\"addmore add\">\n    <i class=\"icon-plus\"></i>\n  </div>\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],281:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        return "<label>Nothing yet. Drag and Drop images on the image box to add new sources</label>";
    },"3":function(container,depth0,helpers,partials,data) {
        return "<label>Add more sources by dragging images on the image box</label>";
    },"5":function(container,depth0,helpers,partials,data) {
        var alias1=container.lambda, alias2=container.escapeExpression;

        return "    <div class=\"thumbnail image\" data-value=\""
            + alias2(alias1(depth0, depth0))
            + "\" style=\"background-image: url("
            + alias2(alias1(depth0, depth0))
            + ")\">\n      <span class=\"remove\"><i class=\"fa fa-times\"></i></span>\n    </div>\n";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, alias1=depth0 != null ? depth0 : {};

        return "<div class=\"thumbnails-wrapper\">\n  <input type=\"hidden\" name=\"list\" class=\"element-list\" data-uuid=\""
            + container.escapeExpression(((helper = (helper = helpers.uuid || (depth0 != null ? depth0.uuid : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(alias1,{"name":"uuid","hash":{},"data":data}) : helper)))
            + "\"/>\n  "
            + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.no_data : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "\n  "
            + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.show_hint : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "\n\n"
            + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.data : depth0),{"name":"each","hash":{},"fn":container.program(5, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],282:[function(require,module,exports){
    var template = {
        color: require('./colors.hbs'),
        image: require('./images.hbs')
    };

    module.exports = _.extend(Backbone.View.extend({
        events: {
            'click .thumbnail': 'applyElementEvent',
            'click .remove': 'removeElementEvent'
        },

        applyElementEvent: function (event) {
            this.trigger('apply', $(event.currentTarget).closest('.thumbnail').data('value'));
        },

        removeElementEvent: function (event) {
            var value = $(event.currentTarget).closest('.thumbnail').data('value');
            this.data = _(this.data).without(value);

            this.render();
            this.trigger('change', this.getData());
            event.stopPropagation();
        },

        addElement: function (value) {
            this.data.push(value);

            this.render();
            this.trigger('change', this.getData());
        },

        initialize: function (options) {
            _.bindAll(this, 'render', 'addElement', 'getData');

            this.uuid = options.uuid;
            this.type = options.type;
            this.data = [];

            this.debouncedRender = _.debounce(this.render, 500);
            this.render();
        },

        render: function () {
            this.$el.html(template[this.type]({
                uuid: this.uuid,
                data: this.data,
                no_data: this.data.length < 1,
                show_hint: this.data.length == 1
            }));

            this.type === 'color' && this.initColorPicker();
        },

        initColorPicker: function () {
            this.$el.find('.addmore').colorpicker({
                defaultColor: '#FFF',
                onSubmit: _.bind(this.addElement, this)
            });
        },

        getData: function () {
            return _(this.data).clone();
        }
    }), Backbone.Events);

},{"./colors.hbs":280,"./images.hbs":281}],283:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

        return "        <li>\n          <input type=\"checkbox\" name=\""
            + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
            + "\" id=\"template-restriction-"
            + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
            + "\" />\n          <label for=\"template-restriction-"
            + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
            + "\">"
            + alias4((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,(depth0 != null ? depth0.tag : depth0),{"name":"t","hash":{},"data":data}))
            + "</label>\n        </li>\n";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1;

        return "<div class=\"wrapper\">\n\n  <div class=\"restrictions group\" data-name=\"source\">\n    <input type=\"checkbox\" id=\"element-restrictions-source\" />\n    <label for=\"element-restrictions-source\">Source list</label>\n    <ul class=\"options\"><li></li></ul>\n  </div>\n\n  <div class=\"restrictions group\" data-name=\"basic\">\n    <input type=\"checkbox\" id=\"element-restrictions-basic\" />\n    <label for=\"element-restrictions-basic\">Basic restrictions</label>\n    <ul class=\"options\">\n"
            + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.basic : depth0),{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "    </ul>\n  </div>\n\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],284:[function(require,module,exports){
    var template = require('./image-type.hbs');
    var BaseView = require('./abstract-type');
    var ElementListView = require('./element-list/view');
    var DesignFacade = require('../../../../facade/design/design');

    module.exports = BaseView.extend({
        type: 'image',

        toggleSectionEvent: function (event) {
            if ($(event.currentTarget).is('#element-restrictions-source:checked') && !this.sourceListView.getData().length) this.sourceListView.addElement(this.selection.source.url);

            BaseView.prototype.toggleSectionEvent.apply(this, arguments);
        },

        render: function (group) {
            var someGroup = _(this.groups).find(function (group) {
                return group.permissions && group.permissions.template;
            });

            var basicPermissions = _.chain(someGroup.permissions.template).map(function (value, index) {
                return {
                    name: index,
                    tag: 'tool.restrictions.template.permission.' + index
                };
            }).filter(function (field) {
                return field.name.match(/^image_/);
            }).value();

            this.$el.html(template({ basic: basicPermissions }));
            this.initSourceList();

            this.renderRestrictions(group || _(this.groups).find(function (group) {
                    return group.permissions && group.permissions.template;
                }));
        },

        getOptionValue: function ($option) {
            if ($option.is('.element-list')) return this.sourceListView.getData();
            return BaseView.prototype.getOptionValue.apply(this, arguments);
        },

        _renderRestrictions: function (restrictions, sectionName) {
            if (sectionName == 'source' && restrictions[sectionName]) _(restrictions[sectionName]['list']).each(this.sourceListView.addElement);

            BaseView.prototype._renderRestrictions.apply(this, arguments);
        },

        initSourceList: function () {
            this.sourceListView && this.sourceListView.remove();
            this.sourceListView = new ElementListView({
                el: this.$el.find('.restrictions.group[data-name="source"] li'),
                type: 'image'
            });

            this.sourceListView.on('change', _.bind(function () {
                var $input = this.sourceListView.$el.find('input');

                this.persistOptionRestriction($input);
                this.toggleRestrictionsGroup($input.closest('.restrictions.group'), true);
            }, this));

            this.sourceListView.on('apply', function (url) {
                DesignFacade.set({ source: { url: url }, keep_box_size: true });
            });
        }
    });

},{"../../../../facade/design/design":19,"./abstract-type":277,"./element-list/view":282,"./image-type.hbs":283}],285:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

        return "        <li>\n          <input type=\"checkbox\" name=\""
            + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
            + "\" id=\"template-restriction-"
            + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
            + "\" />\n          <label for=\"template-restriction-"
            + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
            + "\">"
            + alias4((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,(depth0 != null ? depth0.tag : depth0),{"name":"t","hash":{},"data":data}))
            + "</label>\n        </li>\n";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1;

        return "<div class=\"wrapper\">\n\n  <div class=\"restrictions group\" data-name=\"numeric\">\n    <input type=\"checkbox\" id=\"element-restrictions-numeric\" />\n    <label for=\"element-restrictions-numeric\">Numeric content</label>\n    <ul class=\"options\">\n      <div class=\"clean-margin\">\n        <li class=\"col-half\">\n          <input name=\"min\" type=\"number\" placeholder=\"Minimum\">\n        </li><li class=\"col-half\">\n          <input name=\"max\" type=\"number\" placeholder=\"Maximum\">\n        </li>\n      </div>\n    </ul>\n  </div>\n\n  <div class=\"restrictions group\" data-name=\"dictionary\">\n    <input type=\"checkbox\" id=\"element-restrictions-dictionary\" />\n    <label for=\"element-restrictions-dictionary\">Available content</label>\n    <ul class=\"options\">\n      <li>\n        <input class=\"dictionary\" type=\"text\" name=\"list\" placeholder=\"Add content\">\n      </li>\n    </ul>\n  </div>\n\n  <div class=\"restrictions group\" data-name=\"date\">\n    <input type=\"checkbox\" id=\"element-restrictions-date\" />\n    <label for=\"element-restrictions-date\">Date Format</label>\n    <ul class=\"options\">\n      <li>\n        <input name=\"dateformat\" type=\"text\" placeholder=\"Format\">\n      </li>\n      <li>\n        <input name=\"daterange\" type=\"text\" placeholder=\"Availability - Date Range\">\n      </li>\n    </ul>\n  </div>\n\n  <div class=\"restrictions group\" data-name=\"currencies\">\n    <input type=\"checkbox\" id=\"element-restrictions-currencies\" />\n    <label for=\"element-restrictions-currencies\">Currencies</label>\n\n    <ul class=\"options\">\n      <div class=\"clean-margin\">\n        <li class=\"col-third\">\n          <input name=\"min\" type=\"number\" placeholder=\"Minimum\">\n        </li><li class=\"col-third\">\n          <input name=\"max\" type=\"number\" placeholder=\"Maximum\">\n        </li><li class=\"col-third\">\n          <div class=\"select-wrapper\">\n            <select name=\"currency\" class=\"options\">\n              <option value=\"$\">Dollar $</option>\n              <option value=\"€\">Euro €</option>\n            </select>\n          </div>\n        </li>\n      </div>\n    </ul>\n  </div>\n\n  <div class=\"restrictions group\" data-name=\"mail\">\n    <input type=\"checkbox\" id=\"element-restrictions-mail\" />\n    <label for=\"element-restrictions-mail\">Mail Format</label>\n  </div>\n\n  <div class=\"restrictions group\" data-name=\"insults\">\n    <input type=\"checkbox\" id=\"element-restrictions-insults\" />\n    <label for=\"element-restrictions-insults\">Swearing filter</label>\n  </div>\n\n  <div class=\"restrictions group\" data-name=\"basic\">\n    <input type=\"checkbox\" id=\"element-restrictions-basic\" />\n    <label for=\"element-restrictions-basic\">Basic restrictions</label>\n    <ul class=\"options\">\n"
            + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.basic : depth0),{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "    </ul>\n  </div>\n\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],286:[function(require,module,exports){
    var template = require('./text-type.hbs');
    var BaseView = require('./abstract-type');

    module.exports = BaseView.extend({
        type: 'text',
        storedDateFormat: 'MM/DD/YY',
        events: _.extend({
            'change input[name="list"]': 'resizeListEvent',
            'change input[name="dateformat"]': 'changeFormatEvent',
            'apply.daterangepicker input[name="daterange"]': 'selectDateRangeEvent',
            'cancel.daterangepicker input[name="daterange"]': 'clearDateRangeEvent'
        }, BaseView.prototype.events),

        resizeListEvent: function (event) {
            var $wordList = $(event.currentTarget);
            this.toggleRestrictionsGroup($wordList.closest('.restrictions.group'), true);
        },

        changeFormatEvent: function () {
            this.applyDateFormat();
        },

        selectDateRangeEvent: function () {
            this.applyDateFormat().trigger('change');
        },

        clearDateRangeEvent: function () {
            this.$el.find('input[name="daterange"]').val('').trigger('change');
        },

        applyDateFormat: function () {
            var format = this.$el.find('input[name="dateformat"]').val() || this.storedDateFormat;
            var $option = this.$el.find('input[name="daterange"]');
            var picker = $option.data('daterangepicker');
            var end = picker.endDate.format(format);
            var start = picker.startDate.format(format);

            picker.locale.format = format;
            $option.val(start + ' ~ ' + end);

            return $option;
        },

        render: function (group) {
            var someGroup = _(this.groups).find(function (group) {
                return group.permissions && group.permissions.template;
            });

            var basicPermissions = _.chain(someGroup.permissions.template).map(function (value, index) {
                return {
                    name: index,
                    tag: 'tool.restrictions.template.permission.' + index
                };
            }).filter(function (field) {
                return field.name.match(/^text_/);
            }).value();

            this.$el.html(template({
                basic: basicPermissions
            }));

            this.initDictionary();
            this.initDateFormat();
            this.initDateRange();

            this.renderRestrictions(group || _(this.groups).find(function (group) {
                    return group.permissions && group.permissions.template;
                }));
        },

        initDictionary: function () {
            var $wordList = this.$el.find('input[name="list"]');
            var $group = $wordList.closest('.restrictions.group');

            $wordList.tagsinput();
            $group.children('input').is(':checked') && this.toggleRestrictionsGroup($group, true);
        },

        initDateFormat: function () {
            this.$el.find('input[name="dateformat"]').typeahead({
                highlight: true,
                minLength: 0,
                source: ['LL', 'DD-MM-YYYY', 'DD/MM/YY', 'MM/DD/YYYY', 'YYYY-MM-DD', 'YY-MM-DD']
            });
        },

        initDateRange: function () {
            this.$el.find('input[name="daterange"]').daterangepicker({
                autoUpdateInput: false
            });
        },

        _renderRestrictions: function (restrictions, sectionName) {
            if (sectionName === 'date') return this.renderDateRestrictions(restrictions);

            return BaseView.prototype._renderRestrictions.apply(this, arguments);
        },

        renderDateRestrictions: function (restrictions) {
            var r = restrictions['date'];
            if (!r) return;

            var $group = this.$el.find('.restrictions.group[data-name="date"]');
            var picker = $group.find('input[name="daterange"]').data('daterangepicker');

            $group.children('input[type="checkbox"]').prop('checked', r);
            $group.find('input[name="dateformat"]').val(r['dateformat']);

            if (r['daterange']) {
                picker.locale.format = this.storedDateFormat;
                picker.setStartDate(r['daterange']['start']);
                picker.setEndDate(r['daterange']['end']);
                this.applyDateFormat();
            }
        },

        toggleRestrictionEvent: function (event) {
            var $option = $(event.currentTarget);
            var name = $option.attr('name');

            if ($option.is('[type="number"]') && (name == 'min' || name == 'max')) if (!this.isValidRangeNumber($option.closest('ul.options'))) {
                alert('Not valid range');
                $option.val('');
                return;
            }

            BaseView.prototype.toggleRestrictionEvent.call(this, event);
        },

        getOptionValue: function ($option) {
            if ($option.is('input[name="daterange"]')) return $option.val() ? {
                end: $option.data('daterangepicker').endDate.format(this.storedDateFormat),
                start: $option.data('daterangepicker').startDate.format(this.storedDateFormat)
            } : null;

            return BaseView.prototype.getOptionValue.apply(this, arguments);
        },

        isValidRangeNumber: function ($optionsList) {
            var $min = $optionsList.find('input[name="min"]');
            var $max = $optionsList.find('input[name="max"]');

            return $max.val() === '' || $min.val() === '' || parseFloat($max.val()) > parseFloat($min.val());
        }
    });

},{"./abstract-type":277,"./text-type.hbs":285}],287:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

        return "        <li>\n          <input type=\"checkbox\" name=\""
            + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
            + "\" id=\"template-restriction-"
            + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
            + "\" />\n          <label for=\"template-restriction-"
            + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
            + "\">"
            + alias4((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,(depth0 != null ? depth0.tag : depth0),{"name":"t","hash":{},"data":data}))
            + "</label>\n        </li>\n";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, alias1=depth0 != null ? depth0 : {};

        return "<div class=\"wrapper\">\n\n  <div class=\"restrictions group\" data-name=\"margin\">\n    <input type=\"checkbox\" id=\"element-restrictions-margin\" />\n    <label for=\"element-restrictions-margin\">Margin</label>\n    <ul class=\"options\">\n      <li>\n        <div class=\"slider\"></div>\n        <input name=\"size\" value=\"0\" type=\"number\" min=\"0\" max=\""
            + container.escapeExpression(((helper = (helper = helpers.max_margin || (depth0 != null ? depth0.max_margin : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === "function" ? helper.call(alias1,{"name":"max_margin","hash":{},"data":data}) : helper)))
            + "\">\n      </li>\n    </ul>\n  </div>\n\n  <div class=\"restrictions group\" data-name=\"movement\">\n    <input type=\"checkbox\" id=\"element-restrictions-movement\" />\n    <label for=\"element-restrictions-movement\">Limit movement</label>\n    <ul class=\"options\">\n      <li>\n        <input name=\"horizontal\" type=\"checkbox\" id=\"element-restrictions-horizontal-move\" />\n        <label for=\"element-restrictions-horizontal-move\">Horizontal move</label>\n      </li>\n      <li>\n        <input name=\"vertical\" type=\"checkbox\" id=\"element-restrictions-vertical-move\" />\n        <label for=\"element-restrictions-vertical-move\">Vertical move</label>\n      </li>\n    </ul>\n  </div>\n\n  <div class=\"restrictions group\" data-name=\"lock_text\">\n    <input name=\"enable\" type=\"checkbox\" id=\"element-restrictions-editable-lock-text\" />\n    <label for=\"element-restrictions-editable-lock-text\">Lock Text Content</label>\n  </div>\n\n  <div class=\"restrictions group\" data-name=\"basic\">\n    <input type=\"checkbox\" id=\"element-restrictions-basic\" />\n    <label for=\"element-restrictions-basic\">Basic restrictions</label>\n    <ul class=\"options\">\n"
            + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.basic : depth0),{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "    </ul>\n  </div>\n\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],288:[function(require,module,exports){
    var template = require('./vector-type.hbs');
    var BaseView = require('./abstract-type');

    module.exports = BaseView.extend({
        type: 'vector',
        events: _.extend({
            'slide .slider': 'slideEvent',
            'change input[name="size"]': 'resizeMarginEvent',
            'change input[name="vertical"]': 'verticalMoveEvent',
            'change input[name="horizontal"]': 'horizontalMoveEvent'
        }, BaseView.prototype.events),

        toggleSectionEvent: function (event) {
            var $input = $(event.currentTarget);
            var sectionName = $input.closest('.restrictions.group').data('name');

            if (!$input.is(':checked')) {
                if (sectionName == 'margin') $('#margin-box').remove();else if (sectionName == 'movement') $('#horizontal-line, #vertical-line').remove();
            }

            BaseView.prototype.toggleSectionEvent.apply(this, arguments);
        },

        slideEvent: function (event, ui) {
            var $option = this.$el.find('input[name="size"]');
            $option.val(ui.value);
            this.setMarginUI(ui.value);
            this.persistOptionRestriction($option);
        },

        resizeMarginEvent: function (event) {
            var $option = $(event.currentTarget);
            var val = parseFloat($option.val());
            this.marginSlider.slider('value', val);
            this.setMarginUI(val);
            this.persistOptionRestriction($option);
        },

        setMarginUI: function (margin) {
            var dim = svgedit.utilities.getBBox($('#selectedBox0')[0]);
            var marginBox = document.createElementNS(svgedit.NS.SVG, 'rect');

            $('#margin-box').remove();
            this.canvas.assignAttributes(marginBox, {
                'id': 'margin-box',
                'width': dim.width + margin,
                'height': dim.height + margin,
                'x': dim.x - margin / 2,
                'y': dim.y - margin / 2,
                'stroke-width': margin,
                'fill': 'none',
                'stroke-opacity': .3,
                'stroke': '#ED3636'
            });

            var selector = $('#selectorGroup0')[0];
            selector.insertBefore(marginBox, selector.firstChild);
        },

        horizontalMoveEvent: function (event) {
            this.setMoveUI('horizontal', $(event.currentTarget).is(':checked'));
        },

        verticalMoveEvent: function (event) {
            this.setMoveUI('vertical', $(event.currentTarget).is(':checked'));
        },

        setMoveUI: function (mode, enabled) {
            var dim = svgedit.utilities.getBBox($('#selectedBox0')[0]);
            var line = document.createElementNS(svgedit.NS.SVG, 'line');
            var isVertical = mode === 'vertical';

            $('#' + mode + '-line').remove();
            this.canvas.assignAttributes(line, {
                'id': mode + '-line',
                'x1': isVertical ? dim.x + dim.width / 2 : dim.x,
                'y1': isVertical ? dim.y : dim.y + dim.height / 2,
                'x2': isVertical ? dim.x + dim.width / 2 : dim.x + dim.width,
                'y2': isVertical ? dim.y + dim.height : dim.y + dim.height / 2,
                'stroke-width': 2,
                'stroke-dasharray': 5,
                'stroke': enabled ? '#01ADB6' : '#ED3636'
            });

            var elementBox = document.getElementById('selectorGroup0');
            elementBox.appendChild(line);
        },

        initialize: function () {
            this.canvas = INKIVE.Tool.getInstance().editor.canvas;
            BaseView.prototype.initialize.apply(this, arguments);
        },

        render: function (group) {
            var someGroup = _(this.groups).find(function (group) {
                return group.permissions && group.permissions.template;
            });

            var basicPermissions = _.chain(someGroup.permissions.template).map(function (value, index) {
                return {
                    name: index,
                    tag: 'tool.restrictions.template.permission.' + index
                };
            }).filter(function (field) {
                return field.name.match(/^vector_/);
            }).value();

            var maxMargin = this.canvas.contentW < this.canvas.contentH ? this.canvas.contentW / 8 : this.canvas.contentH / 8;

            this.$el.html(template({
                basic: basicPermissions,
                max_margin: maxMargin
            }));

            this.initSlider(maxMargin);

            this.renderRestrictions(group || _(this.groups).find(function (group) {
                    return group.permissions && group.permissions.template;
                }));
        },

        _renderRestrictions: function (restrictions, sectionName) {
            if (sectionName == 'margin' && restrictions['margin']) {
                this.marginSlider.slider('value', restrictions['margin']['size']);
                this.setMarginUI(restrictions['margin']['size']);
            }

            BaseView.prototype._renderRestrictions.apply(this, arguments);
        },

        initSlider: function (maxMargin) {
            var $slider = this.$el.find('.restrictions[data-name="margin"] .slider');

            this.marginSlider = $slider.slider({
                max: maxMargin,
                min: 0,
                value: 0
            });
        }
    });

},{"./abstract-type":277,"./vector-type.hbs":287}],289:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

        return "<option value=\""
            + alias4(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"id","hash":{},"data":data}) : helper)))
            + "\">"
            + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
            + "</option>";
    },"3":function(container,depth0,helpers,partials,data) {
        var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

        return "    <dt>\n      <a class=\"btn btn-accordion "
            + alias4(((helper = (helper = helpers.key || (depth0 != null ? depth0.key : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"key","hash":{},"data":data}) : helper)))
            + "\" data-key=\""
            + alias4(((helper = (helper = helpers.key || (depth0 != null ? depth0.key : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"key","hash":{},"data":data}) : helper)))
            + "\" data-type=\""
            + alias4(((helper = (helper = helpers.type || (depth0 != null ? depth0.type : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"type","hash":{},"data":data}) : helper)))
            + "\">\n        <i class=\"fa fa-ellipsis-v main main\"></i>\n        <span class=\"name\">"
            + alias4((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,(depth0 != null ? depth0.tag : depth0),{"name":"t","hash":{},"data":data}))
            + "</span>\n      </a>\n\n      <ul class=\"restrictions-list\">\n"
            + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.permissions : depth0),{"name":"each","hash":{},"fn":container.program(4, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "      </ul>\n    </dt>\n";
    },"4":function(container,depth0,helpers,partials,data) {
        var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

        return "          <li>\n            <input type=\"checkbox\" name=\""
            + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
            + "\" id=\"template-restriction-"
            + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
            + "\" />\n            <label for=\"template-restriction-"
            + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
            + "\">"
            + alias4((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,(depth0 != null ? depth0.tag : depth0),{"name":"t","hash":{},"data":data}))
            + "</label>\n          </li>\n";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, alias1=depth0 != null ? depth0 : {};

        return "<div class=\"group\">\n  <h4>Template Restrictions</h4>\n  <div class=\"select-wrapper\">\n    <select>\n      "
            + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.groups : depth0),{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "\n    </select>\n  </div>\n\n  <div class=\"sticky\">\n    <i class=\"fa fa-chain not-applied\"></i>\n    <i class=\"fa fa-chain-broken applied\"></i>\n  </div>\n</div>\n\n<div class=\"wrapper\">\n"
            + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.categories : depth0),{"name":"each","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "</div>";
    },"useData":true});

},{"hbsfy/runtime":373}],290:[function(require,module,exports){
    var template = require('./template-restrictions.hbs');
    var RestrictionsFactory = require('../../../factory/restrictions');

    module.exports = Backbone.mixin(Backbone.View.extend({
        events: {
            'change select': 'changeGroupEvent',
            'click .sticky': 'toggleStickyEvent',
            'click dt > a': 'categoryToggleEvent',
            'change input': 'changePermissionEvent'
        },

        categoryToggleEvent: function (event) {
            var $button = $(event.currentTarget);
            var $container = $button.closest('dt');
            var isActive = $container.hasClass('active');

            isActive && collapseList($container);
            isActive || uncollapseList();
            this.trigger('update');

            function collapseList($container) {
                $container.removeClass('active').removeAttr('style');
            }

            function uncollapseList() {
                var height = 0;

                $container.contents().each(function () {
                    if (this.nodeType === 1) height += $(this).outerHeight(true);
                });

                $container.addClass('active').height(height);
                $container.siblings('.active').each(function () {
                    collapseList($(this));
                });
            }
        },

        toggleStickyEvent: function (event) {
            var $sticky = $(event.currentTarget);
            var groupId = this.$el.find('select').val();
            var value = !$sticky.is('.active');
            var group = this.getGroup(groupId);

            if (!value) {
                RestrictionsFactory.get('permission/templatepermissions').then(_.bind(function (permissions) {
                    permissions = _(permissions).find(function (p) {
                        return p.group == group.id;
                    });
                    var needConfirmation = permissions && !this.isEqualPermissions(group.permissions.template, permissions);

                    if (needConfirmation) {
                        INKIVE.Modal.alertMessage('Sure you want to make this group restrictions like defaults?', {
                            width: 450,
                            callback: [_.bind(function () {
                                RestrictionsFactory.remove('permission/templatepermissions', permissions.id);
                                this.renderRestrictions(group);
                                this.renderSticky(group);
                            }, this), $.noop]
                        });

                        return;
                    }

                    permissions && RestrictionsFactory.remove('permission/templatepermissions', permissions.id);

                    this.renderSticky(group);
                }, this));
            } else RestrictionsFactory.setTemplateRestriction(groupId, 'sticky', value).then(_.partial(this.renderSticky, group));
        },

        changeGroupEvent: function (event) {
            var group = this.getGroup($(event.currentTarget).val());

            group && this.renderRestrictions(group);
            this.renderSticky(group);
        },

        changePermissionEvent: function (event) {
            var groupId = this.$el.find('select').val();
            var $input = $(event.currentTarget);

            RestrictionsFactory.setTemplateRestriction(groupId, $input.attr('name'), $input.is(':checked')).then(_.partial(this.renderSticky, this.getGroup(groupId)));
        },

        initialize: function () {
            _.bindAll(this, 'processGroups', 'renderSticky');
            RestrictionsFactory.get('groups').then(this.processGroups);
        },

        getGroup: function (groupId) {
            return _(this.groups).find(function (group) {
                return group.id == groupId;
            });
        },

        isEqualPermissions: function (per1, per2) {
            return _.chain(per1).omit('id', 'sticky', 'static').all(function (val, key) {
                return val == per2[key];
            }).value();
        },

        processGroups: function (groups) {
            var categories = [];
            this.groups = groups;

            var someGroup = _(this.groups).find(function (group) {
                return group.permissions && group.permissions.template;
            });

            someGroup && _.each(['function', 'element', 'text', 'image', 'vector'], function (key) {
                var regex = new RegExp('^' + key + '_.*');
                var permissions = _.chain(someGroup.permissions.template).map(function (p, index) {
                    return { name: index, tag: 'tool.restrictions.template.permission.' + index };
                }).filter(function (field) {
                    return field.name.match(regex);
                }).value();

                categories.push({
                    key: key,
                    tag: 'tool.restrictions.template.categories.' + key,
                    permissions: permissions
                });
            });

            this.render(categories);
        },

        render: function (categories) {
            var defaultGroups = _(this.groups).filter(function (group) {
                return group.permissions;
            });

            this.$el.html(template({
                groups: defaultGroups,
                categories: categories
            }));

            this.renderRestrictions(defaultGroups[0]);
            this.renderSticky(defaultGroups[0]);
            this.trigger('update');
        },

        renderRestrictions: function (group) {
            RestrictionsFactory.get('permission/templatepermissions').then(_.bind(function (permissions) {
                permissions = _(permissions).find(function (p) {
                        return p.group == group.id;
                    }) || group.permissions.template;

                _.each(permissions, function (value, key) {
                    this.$el.find('input[name="' + key + '"]').prop('checked', value);
                }, this);
            }, this));
        },

        renderSticky: function (group) {
            if (!group) return;

            RestrictionsFactory.get('permission/templatepermissions').then(_.bind(function (permissions) {
                permissions = _(permissions).find(function (p) {
                    return p.group == group.id;
                });

                var isSticky = permissions ? permissions.sticky || !this.isEqualPermissions(group.permissions.template, permissions) : false;

                this.$el.find('.sticky').toggleClass('active', isSticky);
            }, this));
        }
    }), Backbone.Events);

},{"../../../factory/restrictions":75,"./template-restrictions.hbs":289}],291:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        return "<div class=\"antiscroll-wrap\">\n  <div class=\"antiscroll-inner\">\n    <div class=\"accordion tab-content restrictions active sub-category\">\n      <div class=\"notifications\"></div>\n      <div class=\"element-restrictions\"></div>\n      <div class=\"template-restrictions\"></div>\n    </div>\n  </div>\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],292:[function(require,module,exports){
    var template = require('./template.hbs');
    var ScrollableMixin = require('../components/mixins/scrollable');
    var EditorFacade = require('../../../facade/editor/editor');
    var ElementRestrictions = require('./element-restrictions');
    var TemplateRestrictions = require('./template-restrictions');

    module.exports = Backbone.mixin(Backbone.View.extend({
        initialize: function () {
            _.bindAll(this, 'selectedEvent', 'onInnerViewUpdate');

            this.scrollRefresh = _.debounce(_.bind(this.initScroll, this), 1000);
        },

        show: function () {
            var isAlreadyThere = this.$el.find('.tab-content.text').length;
            isAlreadyThere || this.render();
        },

        render: function () {
            this.$el.html(template());

            INKIVE.Modal.loader(this.$el.find('.tab-content'));
            this.initElementRestrictions();
            this.initTemplateRestrictions();

            EditorFacade.on('select', this.selectedEvent);
        },

        initTemplateRestrictions: function () {
            this.templateRestrictionsView = new TemplateRestrictions({
                el: this.$el.find('.template-restrictions')
            });

            this.templateRestrictionsView.on('update', this.onInnerViewUpdate);
        },

        initElementRestrictions: function () {
            this.elementRestrictionsView = new ElementRestrictions({
                el: this.$el.find('.element-restrictions')
            });

            this.elementRestrictionsView.on('update', this.onInnerViewUpdate);
        },

        selectedEvent: function (elements) {
            this.$el.find('.template-restrictions').toggleClass('hidden', elements.length === 1);
        },

        onInnerViewUpdate: function () {
            INKIVE.Modal.loaderClose(this.$el.find('.tab-content'));
            this.scrollRefresh();
        }
    }), ScrollableMixin);

},{"../../../facade/editor/editor":45,"../components/mixins/scrollable":178,"./element-restrictions":276,"./template-restrictions":290,"./template.hbs":291}],293:[function(require,module,exports){
    module.exports = {
        eventCategory: 'Editor UI | Tool Menu | settings',

        show: { eventAction: 'show' },

        lockEvent: function () {
            this.trackEvent({
                eventAction: 'lock',
                eventLabel: !this.globalLock
            });
        },

        autoSaveEvent: function () {
            this.trackEvent({
                eventAction: 'auto_save',
                eventLabel: !INKIVE.C.IS_AUTO_SAVE
            });
        }
    };

},{}],294:[function(require,module,exports){
    var AnalyticsDecorate = require('../../../analytics/decorate');

    module.exports = AnalyticsDecorate(require('./analytics/view'), Backbone.View.extend({
        events: {
            'click a.btn.autosave': 'autoSaveEvent',
            'click a.btn.lock': 'lockEvent'
        },

        autoSaveEvent: function () {
            INKIVE.C.IS_AUTO_SAVE = !INKIVE.C.IS_AUTO_SAVE;
            localStorage.setItem('autosave', INKIVE.C.IS_AUTO_SAVE);
            INKIVE.Tool.autoSave();
            this.toggle();
        },

        lockEvent: function () {
            var globalLock = this.globalLock = !this.globalLock;
            localStorage.setItem('lock_elements', globalLock);
            $('#svgcontent .element').each(function () {
                $(this).toggleClass('locked', globalLock);
            });

            var selectorManager = svgedit.select.getSelectorManager();
            selectorManager.releaseAllSelectors();
            this.toggle();
        },

        initialize: function () {
            _.bindAll(this, 'toggle');

            INKIVE.C.IS_AUTO_SAVE = localStorage.getItem('autosave') !== 'false';
            this.globalLock = localStorage.getItem('lock_elements') === 'true';
        },

        toggle: function () {
            var $button = this.$el.find('a.btn.autosave');

            $button.find('i.check').toggleClass('hidden', !INKIVE.C.IS_AUTO_SAVE);
            $button.find('i.uncheck').toggleClass('hidden', INKIVE.C.IS_AUTO_SAVE);

            $button = this.$el.find('a.btn.lock');
            $button.find('i.check').toggleClass('hidden', !this.globalLock);
            $button.find('i.uncheck').toggleClass('hidden', this.globalLock);
        },

        show: function () {
            this.toggle();
        }
    }));

},{"../../../analytics/decorate":4,"./analytics/view":293}],295:[function(require,module,exports){
    var FormatFactory = require('../../../../factory/formats');

    module.exports = {
        eventCategory: 'Editor UI | Tool Menu | templates',

        thumbnailClickEvent: function (event) {
            var $button = $(event.currentTarget);

            FormatFactory.getFormat($button.data('key')).then(_.bind(function (format) {
                this.trackEvent({
                    eventAction: 'show_format',
                    eventLabel: format['string_id'] + ' ' + format['id']
                });
            }, this));
        }
    };

},{"../../../../factory/formats":65}],296:[function(require,module,exports){
    module.exports = {
        eventCategory: 'Editor UI | Tool Menu | templates',

        show: { eventAction: 'show' },

        listContentToggleEvent: function (event) {
            var $button = $(event.currentTarget);
            var $container = $button.closest('dt');

            $container.hasClass('active') || this.trackEvent({
                eventAction: 'content_toggle',
                eventLabel: $button.data('key')
            });
        }
    };

},{}],297:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        return "<div class=\"antiscroll-wrap\">\n  <div class=\"antiscroll-inner\">\n    <ul class=\"thumbnail-wrapper\"></ul>\n  </div>\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],298:[function(require,module,exports){
    var BaseView = require('../components/accordion-list/content');
    var FormatFactory = require('../../../factory/formats');
    var TemplateThumbnailView = require('../components/thumbnail/designed');
    var AnalyticsDecorate = require('../../../analytics/decorate');

    module.exports = AnalyticsDecorate(require('./analytics/sub-categories'), BaseView.extend({
        views: {},
        template: require('./content.hbs'),
        TemplatesView: require('./templates'),
        events: {
            'click .thumbnail-wrapper .thumbnail': 'thumbnailClickEvent'
        },

        thumbnailClickEvent: function (event) {
            var $thumbnail = $(event.currentTarget);

            FormatFactory.getFormat($thumbnail.data('key')).then(_.bind(function (format) {
                this.openNewView($thumbnail.data('key'), this.TemplatesView, { format: format });
            }, this));
        },

        initialize: function (options) {
            _.bindAll(this, 'render', 'initScroll', 'thumbnailClickEvent');
            this.tool = INKIVE.Tool.getInstance();
            FormatFactory.getGroup(options.key).then(this.render);
        },

        render: function (group) {
            this.$el.html(this.template());
            this.appendThumbnails(group['data']);

            _.delay(this.initScroll, 1000);
        },

        appendThumbnails: function (data) {
            var padding = 20;
            var width = this.$el.width() - padding;
            var $wrapper = this.$el.find('.thumbnail-wrapper');

            _.each(data, function (format) {
                var $thumbnailView = $('<li>').addClass('thumbnail image loading dark').data('key', format['id']).appendTo($wrapper);

                new TemplateThumbnailView({
                    el: $thumbnailView,
                    width: width,
                    format: format
                });
            });
        }
    }));

},{"../../../analytics/decorate":4,"../../../factory/formats":65,"../components/accordion-list/content":170,"../components/thumbnail/designed":196,"./analytics/sub-categories":295,"./content.hbs":297,"./templates":300}],299:[function(require,module,exports){
    var BaseView = require('../components/accordion-list/content');
    var TemplateThumbnailView = require('../components/thumbnail/designed');

    module.exports = BaseView.extend({
        apiCall: 'search/layouts',
        template: require('./content.hbs'),
        columnWidth: INKIVE.C.IS_MOBILE ? 210 : 275,

        initialize: function (options) {
            this.format = options.format;
            this.formats = options.formats;
            BaseView.prototype.initialize.call(this);
        },

        getParams: function () {
            var params = {
                from: this.from,
                limit: this.limit,
                where: {
                    format: this.format ? this.format['id'] : _.pluck(this.formats, 'id'),
                    active: INKIVE.C.USER.IS_SUPER ? 0 : 1
                }
            };

            this.from += this.limit;

            return params;
        },

        render: function () {
            this.$el.html(this.template());
            this.format && this.$el.data('key', this.format['string_id']);
        },

        appendThumbnails: function (data) {
            var $scrollDetect = this.$el.find('.thumbnail-wrapper .scrollDetect');

            _.each(data, function (design) {
                var $thumbnailView = $('<li>').addClass('thumbnail image loading').data('key', design['id']).insertBefore($scrollDetect);

                new TemplateThumbnailView({
                    el: $thumbnailView,
                    width: this.columnWidth,
                    design: design,
                    isCustomFormat: this.isCustomFormat
                });
            }, this);
        }
    });

},{"../components/accordion-list/content":170,"../components/thumbnail/designed":196,"./content.hbs":297}],300:[function(require,module,exports){
    var BaseView = require('./templates-base');
    var FormatFactory = require('../../../factory/formats');
    var GridThumbnailView = require('../components/thumbnail/grid');

    module.exports = BaseView.extend({
        initialize: function (options) {
            this.tool = INKIVE.Tool.getInstance();
            this.canvas = this.tool.editor.canvas;

            this.getFormat(options).then(_.bind(function (format) {
                options.format = format;
                BaseView.prototype.initialize.call(this, options);
            }, this));
        },

        getFormat: function (options) {
            var deferred = $.Deferred();
            var getClosestFormat = _.bind(getCF, this);

            options.format && deferred.resolve(options.format);
            if (!options.format) {
                this.isCustomFormat = true;
                FormatFactory.getFormats().then(function (formats) {
                    deferred.resolve(getClosestFormat(formats));
                });
            }

            return deferred.promise();

            function getCF(formats) {
                var format;
                var sizeDifference = Infinity;
                var ratioDifference = Infinity;
                var width = this.canvas.contentW;
                var height = this.canvas.contentH;
                var ratio = width / height;

                _.each(formats, function (f) {
                    var pixelFormat = convertToPixels(f);
                    var sd,
                        rd = Math.abs(ratio - pixelFormat.ratio);
                    if (rd < ratioDifference) {
                        sd = Math.abs(width - pixelFormat.width) + Math.abs(height - pixelFormat.height);
                        if (sd < sizeDifference) {
                            format = f;
                            sizeDifference = sd;
                            ratioDifference = rd;
                        }
                    }
                });

                return format;

                function convertToPixels(format) {
                    var w = INKIVE.Helpers.convertUnitsToPixels(format['width'], format['unit']);
                    var h = INKIVE.Helpers.convertUnitsToPixels(format['height'], format['unit']);

                    return _.extend(format, { width: w, height: h, ratio: w / h });
                }
            }
        },

        initDataLoading: function () {
            this.loadDataType = 'default';
            BaseView.prototype.initDataLoading.call(this);
        },

        loadData: function (repeat, end) {
            var onMoreData = _.partial(this.onMoreData, this.filterActionId);
            var isDefaultCall = this.loadDataType === 'default';

            this.end = end;
            this.repeat = repeat;

            INKIVE.Modal.loader(this.$el.find('.antiscroll-inner'));

            isDefaultCall && INKIVE.Helpers.api(this.apiCall, 'GET', this.getParams(), onMoreData);

            isDefaultCall || INKIVE.Helpers.sendCmd(INKIVE.C.BASE_URL + 'grid/fetch', this.getParams(), onMoreData);
        },

        getParams: function () {
            if (this.loadDataType !== 'default') {
                return _.extend({
                    number_of_photos: ++this.numberOfPhotos
                }, this.size);
            }

            return BaseView.prototype.getParams.call(this);
        },

        onMoreData: function (faId, result) {
            if (faId !== this.filterActionId) return;

            var isDefaultCall = this.loadDataType === 'default';
            result = isDefaultCall ? result : JSON.parse(result);
            var hasResults = isDefaultCall ? result.data.length > 0 : result['STATUS'] === 'SUCCESS';

            if (hasResults) {
                isDefaultCall && this.appendThumbnails(result.data);
                isDefaultCall || this.appendGridThumbnails(result['MESSAGE']);
                this.repeat();
            } else if (this.loadDataType === 'default') {
                this.numberOfPhotos = 0;
                this.loadDataType = 'grid';
                this.from = 0;
                this.setGridTemplateFormat();
                this.repeat();
            } else {
                this.end();
                INKIVE.Modal.loaderClose(this.$el.find('.antiscroll-inner'));
            }

            this.scrollRefresh();
        },

        setGridTemplateFormat: function () {
            var convertToPixels = INKIVE.Helpers.convertUnitsToPixels;
            var $firstThumbnail = this.$el.find('.thumbnail-wrapper .thumbnail ').first();
            var thumbWidth = $firstThumbnail.width() || this.columnWidth;
            var canvas = this.tool.editor.canvas;

            this.callFormat = this.isCustomFormat ? {
                width: canvas.contentW,
                height: canvas.contentH
            } : {
                width: convertToPixels(this.format['width'], this.format['unit']),
                height: convertToPixels(this.format['height'], this.format['unit'])
            };

            this.size = {
                width: thumbWidth,
                height: thumbWidth * (this.callFormat.height / this.callFormat.width)
            };
        },

        appendGridThumbnails: function (data) {
            var $scrollDetect = this.$el.find('.thumbnail-wrapper .scrollDetect');
            var top = $scrollDetect.height();

            _.each(data, function (item) {
                var $thumbnailView = $('<li>').addClass('thumbnail grid').insertBefore($scrollDetect);

                new GridThumbnailView({
                    el: $thumbnailView,
                    size: this.size,
                    format: this.callFormat,
                    data: item,
                    numberOfPhotos: this.numberOfPhotos
                });
            }, this);
        }
    });

},{"../../../factory/formats":65,"../components/thumbnail/grid":197,"./templates-base":299}],301:[function(require,module,exports){
    var BaseView = require('../components/accordion-list/categories-director');
    var FormatFactory = require('../../../factory/formats');
    var SubCategoriesView = require('./sub-categories');

    module.exports = BaseView.extend({
        class: 'sub-category template',
        CategoriesView: SubCategoriesView,

        initialize: function () {
            BaseView.prototype.initialize.call(this);
            this.tool = INKIVE.Tool.getInstance();
        },

        loadListContent: function (key) {
            BaseView.prototype.loadListContent.call(this, key);
            this.format && _.delay(_.bind(function () {
                _.each(this.$el.find('.thumbnail'), function (thumb) {
                    $(thumb).data('key') == this.format['id'] && $(thumb).trigger('click');
                }, this);
                this.format = null;
            }, this), 600);
        },

        loadButtons: function () {
            var deferred = $.Deferred();

            FormatFactory.getGroups().then(function (data) {
                deferred.resolve(_.map(data, function (category) {
                    return { key: category.key, tag: category.name, icon: 'fa fa-ellipsis-v' };
                }));
            });

            return deferred.promise();
        },

        closeAccordion: function () {
            var $buttons = this.$el.find('dt');
            _.each(this.views, function (view, key) {
                $buttons.find('a[data-key="' + key + '"] .category').remove();
            });

            BaseView.prototype.closeAccordion.call(this);
        },

        _render: function (buttons) {
            INKIVE.Modal.loaderClose(this.$el);

            this.$el.html(this.template({
                class: this.class,
                buttons: buttons,
                add_button: this.addButtonText
            }));
        },

        getCategoryName: function (data) {
            return data.format['name'];
        }
    });

},{"../../../factory/formats":65,"../components/accordion-list/categories-director":168,"./sub-categories":298}],302:[function(require,module,exports){
    var BaseView = require('./view-base');
    var DirectorView = require('../components/accordion-list/director');
    var FormatFactory = require('../../../factory/formats');
    var DesignFacade = require('../../../facade/design/design');
    var EditorFacade = require('../../../facade/editor/editor');
    var SubCategoriesView = require('./sub-categories');
    var AnalyticsDecorate = require('../../../analytics/decorate');

    module.exports = AnalyticsDecorate(require('./analytics/view'), BaseView.extend({
        class: 'sub-category template',
        CategoriesView: SubCategoriesView,
        views: {},
        Views: { custom: require('./templates') },

        loadListContent: function (key) {
            var isCustomCategory = key == 'custom';

            isCustomCategory || BaseView.prototype.loadListContent.call(this, key);
            isCustomCategory && DirectorView.prototype.loadListContent.call(this, key);
        },

        initialize: function () {
            _.bindAll(this, 'refresh', 'goToFormat', 'goToCustom');
            BaseView.prototype.initialize.call(this);

            this.debouncedRefresh = _.debounce(this.refresh, 600);

            EditorFacade.on('page.move_to', this.debouncedRefresh);
            DesignFacade.on('template.update.size', this.debouncedRefresh);
        },

        refresh: function () {
            var isAlreadyThere = this.$el.find('.tab-content.' + this.class).length;
            if (!isAlreadyThere) return;

            FormatFactory.getCurrentFormat().then(_.bind(function (format) {
                var displayedFormat = this.$el.find('dt.active .image-list:not(.out)').data('key');
                if (format && displayedFormat === format['string_id']) return;

                _.each(this.views, function (view) {
                    while (!view.closeView());
                    view.remove();
                });

                this.views = {};
                this.render();
            }, this));
        },

        render: function () {
            INKIVE.Modal.loader(this.$el);
            FormatFactory.getCurrentFormat().then(_.bind(function (format) {
                var isBeingDisplay = this.$el.is('.tab.active') || this.$el.closest('.tab-content').is('.active');

                this.format = format;
                BaseView.prototype.render.call(this);
                this.updateCustomFormatCategory();

                if (isBeingDisplay) {
                    this.format && _.defer(this.goToFormat);
                    this.format || _.defer(this.goToCustom);
                }
            }, this));
        },

        goToFormat: function () {
            var format = this.format;

            FormatFactory.getGroups().then(_.bind(function (groups) {
                var group = _.find(groups, function (group) {
                    return _.findWhere(group['data'], { id: format['id'] });
                });

                this.$el.find('dt > a.btn[data-key="' + group['key'] + '"]').trigger('click');
            }, this));
        },

        goToCustom: function () {
            this.$el.find('dt > a.btn[data-key="custom"]').trigger('click');
        },

        loadButtons: function () {
            var deferred = $.Deferred();

            FormatFactory.getGroups().then(function (data) {
                var buttons = _.map(data, function (category) {
                    return { key: category.key, tag: category.name, icon: 'fa fa-ellipsis-v' };
                });

                var name = 'Custom';
                buttons.push({ key: 'custom', tag: name, icon: 'fa fa-ellipsis-v' });

                deferred.resolve(buttons);
            });

            return deferred.promise();
        },

        updateCustomFormatCategory: function () {
            this.format && this.$el.find('dt > a.btn[data-key="custom"]').hide();
            this.format || this.$el.find('dt > a.btn[data-key="custom"]').show();
        }
    }));

},{"../../../analytics/decorate":4,"../../../facade/design/design":19,"../../../facade/editor/editor":45,"../../../factory/formats":65,"../components/accordion-list/director":172,"./analytics/view":296,"./sub-categories":298,"./templates":300,"./view-base":301}],303:[function(require,module,exports){
    module.exports = {
        eventCategory: 'Editor UI | Tool Menu | text banners',

        loadData: { eventAction: 'load_more' }
    };

},{}],304:[function(require,module,exports){
    module.exports = {
        eventCategory: 'Editor UI | Tool Menu | text',

        show: { eventAction: 'show' }
    };

},{}],305:[function(require,module,exports){
    var BaseView = require('../components/accordion-list/content');
    var AnalyticsDecorate = require('../../../analytics/decorate');
    var TextBannerThumbnailView = require('../components/thumbnail/text-banner');

    module.exports = AnalyticsDecorate(require('./analytics/banners'), BaseView.extend({
        apiCall: 'search/stickers',
        callbackName: 'callbackStickers',

        initialize: function () {
            INKIVE.C.IS_MOBILE && this.show();
            this.debouncedMasonryReload = _.debounce(_.bind(this.masonryReload, this), 800);
        },

        show: function () {
            this.isAlreadyThere || BaseView.prototype.initialize.call(this);
            this.isAlreadyThere = true;
        },

        render: function () {
            BaseView.prototype.render.call(this);
            this.$el.find('.thumbnailWrapper').masonry();
        },

        getParams: function () {
            var params = {
                from: this.from,
                limit: this.limit,
                where: {
                    active: INKIVE.C.USER.IS_SUPER ? 0 : 1,
                    isText: 1
                }
            };

            this.from += this.limit;

            return params;
        },

        getScrollHeight: function ($target) {
            var $tabContent = $target.closest('.tab-content');
            var containerHeight = $tabContent.height();
            var textHeight = $tabContent.children('.text').outerHeight(true);
            var marginHeight = $tabContent.children('.margin').outerHeight(true);

            return containerHeight - textHeight - marginHeight;
        },

        appendThumbnails: function (data) {
            var $wrapper = this.$el.find('.thumbnailWrapper');
            var $scrollDetect = $wrapper.find('.scrollDetect');

            _.each(data, function (svg) {
                if (!svg['url']) return;

                var $thumbnailView = $('<div>').addClass('thumbnail svg').data('key', svg['id']).insertBefore($scrollDetect);

                var textBannerThumbnailView = new TextBannerThumbnailView({
                    el: $thumbnailView,
                    svg: svg
                });

                $wrapper.masonry('appended', $thumbnailView);
                textBannerThumbnailView.on('resize', this.debouncedMasonryReload);
            }, this);
        }
    }));

},{"../../../analytics/decorate":4,"../components/accordion-list/content":170,"../components/thumbnail/text-banner":213,"./analytics/banners":303}],306:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        return "  <div class=\"margin\"><span class=\"shadow\"></span></div>\n  <div class=\"banners\"></div>\n";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, options, buffer =
            "<div class=\"tab-content text accordion active\">\n  <div class=\"text\">\n    <div class=\"thumbnail-wrapper\"></div>\n  </div>\n\n";
        stack1 = ((helper = (helper = helpers.contains_text_banners || (depth0 != null ? depth0.contains_text_banners : depth0)) != null ? helper : helpers.helperMissing),(options={"name":"contains_text_banners","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data}),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : {},options) : helper));
        if (!helpers.contains_text_banners) { stack1 = helpers.blockHelperMissing.call(depth0,stack1,options)}
        if (stack1 != null) { buffer += stack1; }
        return buffer + "</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],307:[function(require,module,exports){
    var template = require('./template.hbs');
    var BannersView = require('./banners');
    var TextThumbnailView = require('../components/thumbnail/text');
    var humps = require('../../../utils/humps');
    var AnalyticsDecorate = require('../../../analytics/decorate');

    module.exports = AnalyticsDecorate(require('./analytics/view'), Backbone.View.extend({
        initialize: function () {
            INKIVE.C.IS_MOBILE && INKIVE.TranslateHelper.load().then(_.bind(this.show, this));
        },

        show: function () {
            var isAlreadyThere = this.$el.find('.tab-content.text').length;
            isAlreadyThere || this.render();
        },

        render: function () {
            var containsTextBanners = !INKIVE.C.IS_MOBILE;
            var html = template({
                contains_text_banners: containsTextBanners
            });
            this.$el.html(html);

            this.renderDefaultText();
            _.delay(_.bind(this.initDefaultText, this), 1000);
            containsTextBanners && this.initBannersView();
        },

        renderDefaultText: function () {
            var $wrapper = this.$el.find('.text .thumbnail-wrapper');
            this.defaultTextViews = _.map(INKIVE.C.TextDefault, function (data, index) {
                var $thumbnailView = $('<div>').addClass('thumbnail').appendTo($wrapper);
                var storedData = localStorage.getItem('default_text_' + index);

                return new TextThumbnailView({
                    el: $thumbnailView,
                    data: _.extend({}, humps.decamelizeKeys(data), JSON.parse(storedData))
                });
            }, this);

            // var lineHeight = this.$el.find('.line-container > .item').height();
            // console.log('tttt', this.$el.find('.line-container > .item'))
            // console.log('lineHeight',lineHeight)
            // var test = 'height:' + lineHeight + 'px';
            // console.log('test',test)
            // this.$el.find('.tab-content.text > .text .thumbnail').height(lineHeight);
        },

        initDefaultText: function () {
            var defaultTextsViews = this.defaultTextViews;
            var lastText = _.last(this.defaultTextViews);
            var message = INKIVE.TranslateHelper.translate('tool.text.click');
            var isFirstTime = !localStorage.getItem('text_hint');

            localStorage.setItem('text_hint', true);
            initEventListeners.call(this);
            isFirstTime || typeAll();
            isFirstTime && lastText.type(message).then(function () {
                lastText.erase().then(typeAll);
            });

            function typeAll() {
                _.each(defaultTextsViews, function (textView) {
                    textView.type().then(function () {
                        textView.$el.find('a.toggle-options').addClass('show');
                        textView.endTyping();
                    });
                });
            }

            function initEventListeners() {
                _.each(defaultTextsViews, function (textView) {
                    var textChangeEvent = _.bind(this.textChangeEvent, this, textView);
                    textView.on('change', textChangeEvent);
                }, this);
            }
        },

        textChangeEvent: function (textView) {
            var data = textView.getTextData('_');
            var id = _.findIndex(this.defaultTextViews, textView);

            localStorage.setItem('default_text_' + id, JSON.stringify(data));
        },

        initBannersView: function () {
            var $view = $('<div></div>').addClass('image-list');

            this.$el.find('.tab-content > .banners').append($view);
            this.bannersView = new BannersView({ el: $view });
            this.bannersView.show();
        }
    }));

},{"../../../analytics/decorate":4,"../../../utils/humps":323,"../components/thumbnail/text":214,"./analytics/view":304,"./banners":305,"./template.hbs":306}],308:[function(require,module,exports){
    module.exports = {
        eventCategory: 'Editor UI | Top Menu',
        eventAction: 'share',

        shareProjectByEmbedEvent: { eventLabel: 'project_embed' },
        shareProjectByEmailEvent: { eventLabel: 'project_email' },

        shareDesignEvent: function (event) {
            var type = $(event.currentTarget).attr('class');
            this.trackEvent({ eventLabel: 'design_' + type });
        },

        shareProjectEvent: function (event) {
            var type = $(event.currentTarget).attr('class');
            this.trackEvent({ eventLabel: 'project_' + type });
        },

        changeTabEvent: function (event) {
            var $next = $(event.currentTarget);
            var target = $next.data('target');
            this.trackEvent({ eventLabel: 'show_' + target + '_tab' });
        }
    };

},{}],309:[function(require,module,exports){
    module.exports = {
        eventCategory: 'Editor UI | Top Menu',

        saveEvent: { eventAction: 'save' },
        shareEvent: { eventAction: 'share', eventLabel: 'show' },
        downloadEvent: { eventAction: 'download', eventLabel: 'show' },
        printEvent: { eventAction: 'print' },
        closeEvent: { eventAction: 'close' },

        redoEvent: function (event) {
            var info = this.editor.canvas.undoMgr.getStackInfo();
            this.trackEvent({ eventAction: 'redo', eventLabel: info.type });
        },

        undoEvent: function (event) {
            var info = this.editor.canvas.undoMgr.getStackInfo(-1);
            this.trackEvent({ eventAction: 'undo', eventLabel: info.type });
        }
    };

},{}],310:[function(require,module,exports){
    var canvas, url;
    var albumName = 'Desygner';
    var template = require('./modal.hbs');

    module.exports = function (link) {
        FB.login(function (res) {
            res.authResponse || onError();
            res.authResponse && FB.api('/me/accounts', function (response) {
                var options = _.map(_.filter(response.data, isPageAdmin), function (page) {
                    var name = INKIVE.TranslateHelper.translate('modal.share_design.facebook_options.page', { page_name: page.name });

                    return { value: page.id, name: name };
                });

                options.unshift({ name: INKIVE.TranslateHelper.translate('modal.share_design.facebook_options.timeline') });

                url = link;
                canvas = INKIVE.Tool.getInstance().editor.canvas;

                var html = template({
                    default_text: 'modal.share_design.default_facebook',
                    options: options.length > 1 && options
                });

                var modal = INKIVE.Modal.modalWindow(html, {
                    width: 500,
                    headerIcon: 'fa fa-facebook',
                    headerTitle: 'modal.title.share_facebook',
                    buttons: [{
                        title: INKIVE.TranslateHelper.translate('modal.buttons.share'),
                        onClick: function () {
                            onShare(response.data, $(modal.getWrapper).find('[name="share-text"]').val(), $(modal.getWrapper).find('select[name="share-option"]').val());

                            modal.close();
                        }
                    }]
                });
            });
        }, { scope: 'publish_actions, user_photos, manage_pages, publish_pages' });

        function isPageAdmin(page) {
            return _.contains(page.perms, 'CREATE_CONTENT');
        }
    };

    function onShare(pages, message, pageId) {
        INKIVE.Modal.togglePageLoader(true);

        pageId && publishOnPage(message, _.findWhere(pages, { id: pageId }));
        pageId || FB.api('/me/albums', function (res) {
            if (res && !res.error) {
                _.any(res.data, function (album) {
                    if (album.name === albumName) {
                        publishOnOwnAlbum(message, album.id);
                        return true;
                    }
                }) || createDesygnerAlbum();
            } else onError();
        });
    }

    function createDesygnerAlbum() {
        var albumData = {
            name: albumName,
            message: INKIVE.TranslateHelper.translate('top_submenu.share.album_title')
        };

        FB.api('/me/albums', 'post', albumData, function (res) {
            publishOnOwnAlbum(res.id);
        });
    }

    function publishOnPage(message, page) {
        var photoData = { message: message, url: url, access_token: page.access_token };

        FB.api('/' + page.id + '/photos', 'post', photoData, function (res) {
            if (!res || res.error) onError();else {
                canvas.call('advice.show', 'share-success');
                INKIVE.Modal.togglePageLoader(false);
            }
        });
    }

    function publishOnOwnAlbum(message, albumId) {
        var photoData = { message: message, url: url };

        FB.api('/' + albumId + '/photos', 'post', photoData, function (res) {
            if (!res || res.error) onError();else {
                canvas.call('advice.show', 'share-success');
                INKIVE.Modal.togglePageLoader(false);
            }
        });
    }

    function onError() {
        canvas.call('advice.show', 'share-error');
        INKIVE.Modal.togglePageLoader(false);
    }

},{"./modal.hbs":312}],311:[function(require,module,exports){
    module.exports = function (link) {
        window.open('https://plus.google.com/share?url=' + '?url=' + encodeURI(link), '_blank', 'top=0,right=0,width=750,height=320');
    };

},{}],312:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"1":function(container,depth0,helpers,partials,data) {
        var stack1;

        return "    <select name=\"share-option\">\n      "
            + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.options : depth0),{"name":"each","hash":{},"fn":container.program(2, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "\n    </select>\n";
    },"2":function(container,depth0,helpers,partials,data) {
        var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

        return "<option value=\""
            + alias4(((helper = (helper = helpers.value || (depth0 != null ? depth0.value : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"value","hash":{},"data":data}) : helper)))
            + "\">"
            + alias4(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data}) : helper)))
            + "</option>";
    },"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=container.escapeExpression;

        return "<div class=\"tool-content\">\n  <section>\n    <label for=\"share-text\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.share_design.message_label",{"name":"t","hash":{},"data":data}))
            + "</label>\n    <textarea name=\"share-text\" class=\"form-control\" placeholder=\""
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"modal.share_design.message_placeholder",{"name":"t","hash":{},"data":data}))
            + "\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,(depth0 != null ? depth0.default_text : depth0),{"name":"t","hash":{},"data":data}))
            + "</textarea>\n"
            + ((stack1 = helpers["if"].call(alias1,(depth0 != null ? depth0.options : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data})) != null ? stack1 : "")
            + "  </section>\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],313:[function(require,module,exports){
    module.exports = function (link) {
        window.open('//www.pinterest.com/pin/create/button/' + '?url=' + encodeURI(INKIVE.C.BASE_URL) + '&media=' + encodeURI(link) + '&description=' + Base64.decode(INKIVE.C.BOOK.name), '_blank', 'top=0,right=0,width=750,height=320');
    };

},{}],314:[function(require,module,exports){
// hbsfy compiled Handlebars template
    var HandlebarsCompiler = require('hbsfy/runtime');
    module.exports = HandlebarsCompiler.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
        var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=container.escapeExpression, alias4="function";

        return "<div class=\"tabs ui-widget\">\n    <ul class=\"ui-tabs-nav\">\n        <li class=\"ui-state-default ui-tabs-active ui-state-active\" style=\"width: 45%;\" data-target=\"shr-design\">\n            <a href=\"#\"><i class=\"icon-filter\"></i><span>This Design</span></a>\n        </li>\n\n        <li class=\"ui-state-default\" style=\"width: 45%;\" data-target=\"shr-project\">\n            <a href=\"#\"><i class=\"icon-photo_library\"></i><span>The Project</span></a>\n        </li>\n    </ul>\n\n  <div class=\"ui-tabs-panel shr-project hidden\">\n    <h3>"
            + ((stack1 = (helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"top_submenu.share.share_project",(depth0 != null ? depth0.project_name : depth0),{"name":"t","hash":{},"data":data})) != null ? stack1 : "")
            + "</h3>\n\n    <section>\n      <div class=\"buttons row\">\n        <a class=\"facebook\"><i class=\"fa fa-facebook\"></i></a>\n        <a class=\"linkedin\"><i class=\"icon-lin\"></i></a>\n        <a class=\"twitter\"><i class=\"icon-twr\"></i></a>\n        <a class=\"google\"><i class=\"icon-gp\"></i></a>\n        <a class=\"email\"><i class=\"fa fa-envelope\"></i></a>\n        <a class=\"embed\"><i class=\"icon-code\"></i></a>\n      </div>\n\n      <div class=\"link row\">\n        <span class=\"link-label\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"top_submenu.share.project_link",{"name":"t","hash":{},"data":data}))
            + "</span>\n        <input type=\"text\" class=\"project-link\" value=\""
            + alias3(((helper = (helper = helpers.view_link || (depth0 != null ? depth0.view_link : depth0)) != null ? helper : alias2),(typeof helper === alias4 ? helper.call(alias1,{"name":"view_link","hash":{},"data":data}) : helper)))
            + "\" />\n      </div>\n    </section>\n  </div>\n\n  <div class=\"ui-tabs-panel shr-design\">\n    <h3>"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"top_submenu.share.share_design",{"name":"t","hash":{},"data":data}))
            + "</h3>\n\n    <div class=\"image-container\"><img/></div>\n\n    <section>\n      <div class=\"buttons row\">\n        <a class=\"facebook\"><i class=\"fa fa-facebook\"></i></a>\n        <a class=\"twitter\"><i class=\"icon-twr\"></i></a>\n        <a class=\"pinterest\"><i class=\"fa fa-pinterest\"></i></a>\n        <a class=\"google\"><i class=\"icon-gp\"></i></a>\n      </div>\n\n      <div class=\"link row\">\n        <span class=\"link-label\">"
            + alias3((helpers.t || (depth0 && depth0.t) || alias2).call(alias1,"top_submenu.share.design_link",{"name":"t","hash":{},"data":data}))
            + "</span>\n        <input type=\"text\" class=\"design-link\" value=\""
            + alias3(((helper = (helper = helpers.image_link || (depth0 != null ? depth0.image_link : depth0)) != null ? helper : alias2),(typeof helper === alias4 ? helper.call(alias1,{"name":"image_link","hash":{},"data":data}) : helper)))
            + "\" />\n      </div>\n    </section>\n  </div>\n</div>\n";
    },"useData":true});

},{"hbsfy/runtime":373}],315:[function(require,module,exports){
    var message;
    var template = require('./modal.hbs');

    module.exports = function (link) {
        var html = template({ default_text: 'modal.share_design.default_twitter' });
        var modal = INKIVE.Modal.modalWindow(html, {
            width: 500,
            headerIcon: 'fa fa-twitter',
            headerTitle: 'modal.title.share_twitter',
            buttons: [{
                title: INKIVE.TranslateHelper.translate('modal.buttons.share'),
                onClick: function () {
                    message = $(modal.getWrapper).find('[name="share-text"]').val();
                    modal.close();
                    onShare();
                }
            }]
        });
    };

    function onShare() {
        window.open(INKIVE.C.BASE_URL + 'share/uploadtosocialnetwork' + '?project_id=' + INKIVE.C.BOOK.id + '&design_number=' + INKIVE.Tool._current_page_id + '&text=' + encodeURIComponent(message) + '&social_network=twitter', '_blank', 'top=0,right=0,width=750,height=320');
    }

},{"./modal.hbs":312}],316:[function(require,module,exports){
    var template = require('./template.hbs');
    var md5 = require('../../../../utils/md5');
    var SettingsFactory = require('../../../../factory/settings');
    var EditorModeManager = require('../../../editor-mode-manager');
    var AnalyticsDecorate = require('../../../../analytics/decorate');
    var PageThumbnailFactory = require('../../../../factory/page-thumbnail');

    var designShareHandlers = {
        twitter: require('./twitter'),
        facebook: require('./facebook'),
        pinterest: require('./pinterest'),
        google: require('./google-plus')
    };

    module.exports = AnalyticsDecorate(require('../../analytics/share'), Backbone.View.extend({
        events: {
            'click input[type=text]': 'selectEvent',
            'click ul.ui-tabs-nav li': 'changeTabEvent',
            'click .shr-design .buttons > a': 'shareDesignEvent',
            'click .shr-project .buttons > a.embed': 'shareProjectByEmbedEvent',
            'click .shr-project .buttons > a.email': 'shareProjectByEmailEvent',
            'click .shr-project .buttons > a:not(.email):not(.embed)': 'shareProjectEvent'
        },

        selectEvent: function (event) {
            $(event.currentTarget).select();
        },

        changeTabEvent: function (event) {
            var $next = $(event.currentTarget);
            var $current = $next.siblings('li');
            var target = $next.data('target');

            $current.removeClass('ui-tabs-active ui-state-active');
            $next.addClass('ui-tabs-active ui-state-active');

            this.$el.find('.ui-tabs-panel.' + target).removeClass('hidden').siblings('.ui-tabs-panel').addClass('hidden');
        },

        shareDesignEvent: function (event) {
            var type = $(event.currentTarget).attr('class');
            designShareHandlers[type](this.link);

            this.trackShare({ content_format: "design", network: type });
        },

        shareProjectEvent: function (event) {
            var $button = $(event.currentTarget);
            var url = INKIVE.Helpers.getShareNetworkUrl($button.attr('class'));
            var type = $(event.currentTarget).attr('class');

            this.makePublic(function () {
                var newWindow = window.open(url, 'Share', 'height=500,width=500,location=0');
                if (window.focus) newWindow.focus();
            });

            this.trackShare({ content_format: "project", network: type, link: url });
        },

        trackShare: function (params) {
            params = $.extend({
                project_id: INKIVE.C.BOOK.id,
                design_number: INKIVE.Tool._current_page_id
            }, params);

            $.api(INKIVE.C.BASE_URL + 'inkive/trackShare', 'POST', params, function (r) {
                INKIVE.C.IS_DEV && console.log(params, r);
            });
        },

        shareProjectByEmbedEvent: function (event) {
            var modalData = new INKIVE.ModalShareEmbed({});
            var modal = INKIVE.Modal.modalWindow(modalData.getFormHtml(), {
                width: 600,
                headerIcon: 'icon-code',
                headerTitle: 'modal.title.embed',
                buttons: [{
                    title: INKIVE.TranslateHelper.translate('common.close'),
                    onClick: function () {
                        this.makePublic(function () {
                            modalData.saveForm(function () {
                                modal.close();
                            });
                        });
                    }
                }]
            });
        },

        shareProjectByEmailEvent: function (event) {
            var that = this;
            var modalData = new INKIVE.ModalShareEmail();
            var modal = INKIVE.Modal.modalWindow(modalData.getFormHtml(), {
                width: 500,
                headerIcon: 'icon-mail-forward',
                headerTitle: 'modal.title.share_email',
                buttons: [{
                    title: INKIVE.TranslateHelper.translate('modal.buttons.send'),
                    onClick: function () {
                        that.makePublic(function () {
                            modalData.saveForm(function () {
                                modal.close();
                            });
                        });
                    }
                }]
            });
        },

        initialize: function () {
            _.bindAll(this, 'makePublic');
            this.tool = INKIVE.Tool.getInstance();
        },

        makePublic: function (callback) {
            var isPublic = INKIVE.C.BOOK['security'] == 90;

            if (isPublic) callback();else {
                onDone = _.after(2, onDone);
                _.delay(onDone, 3000);
                INKIVE.Modal.togglePageLoader(true, 'modal.wait_public');
                SettingsFactory.set({ security: 90 }).then(onDone);
            }

            function onDone() {
                callback();
                INKIVE.Modal.togglePageLoader(false);
            }
        },

        show: function () {
            var isAlreadyThere = !this.$el.is(':empty');
            isAlreadyThere || this.render();
            this.thumbnailRefresh();

            this.$el.find('ul.ui-tabs-nav [data-target="shr-project"]').toggle(!EditorModeManager.isMode('logo'));
        },

        render: function () {
            this.linkRefresh();
            this.$el.html(template({
                'project_name': Base64.decode(INKIVE.C.BOOK.name),
                'view_link': INKIVE.C.VIEWER_URL,
                'image_link': this.link
            }));
        },

        linkRefresh: function () {
            this.link = INKIVE.C.BASE_URL + 'design/displaypage/' + INKIVE.C.BOOK.id + '/' + INKIVE.Tool._current_page_id + '/' + md5(INKIVE.Tool._current_page_id) + '/1754';
        },

        thumbnailRefresh: function () {
            var ratio = this.tool.editor.canvas.contentW / this.tool.editor.canvas.contentH;
            var $image = this.$el.find('.image-container img');

            this.linkRefresh();
            $image.height($image.width() * (1 / ratio)).attr('src', '');
            INKIVE.Modal.loader($image.parent());

            var image = new Image();
            image.src = PageThumbnailFactory.get();
            image.onload = function () {
                $image.attr('src', this.src);
                INKIVE.Modal.loaderClose($image.parent());
            };
        }
    }));

},{"../../../../analytics/decorate":4,"../../../../factory/page-thumbnail":74,"../../../../factory/settings":79,"../../../../utils/md5":325,"../../../editor-mode-manager":102,"../../analytics/share":308,"./facebook":310,"./google-plus":311,"./pinterest":313,"./template.hbs":314,"./twitter":315}],317:[function(require,module,exports){
    var ShareView = require('./contents/share/view');
    var EditorFacade = require('../../facade/editor/editor');
    var AnalyticsDecorate = require('../../analytics/decorate');

    module.exports = AnalyticsDecorate(require('./analytics/view'), Backbone.View.extend({
        events: {
            'click a.btn.save': 'saveEvent',
            'click a.btn.shr': 'shareEvent',
            'click a.btn.download': 'downloadEvent',
            'click a.btn.print': 'printEvent',
            'click a.btn.close': 'closeEvent',
            'click a[data-action="on_undo"]': 'undoEvent',
            'click a[data-action="on_redo"]': 'redoEvent'
        },

        downloadEvent: function (event) {},

        undoEvent: function (event) {
            EditorFacade.handle('history', 'undo');
        },
        redoEvent: function (event) {
            EditorFacade.handle('history', 'redo');
        },
        saveEvent: function (event) {
            EditorFacade.handle('page', 'save');
        },
        closeEvent: function (event) {
            EditorFacade.handle('close');
        },
        shareEvent: function (event) {
            this.shareView.show();
        },

        printEvent: function (event) {
            var newWindow,
                blockAttempts = 20;
            var svgCont = this.editor.getSvgString();
            var saveBeforePrint = !INKIVE.Helpers.areEqual(svgCont, INKIVE.EditorFacade.handle('cache', 'get'));

            saveBeforePrint || print();
            saveBeforePrint && EditorFacade.handle('page', 'save').then(print);

            function print() {
                newWindow = window.open(INKIVE.C.BASE_URL + 'design/print?id=' + INKIVE.C.BOOK.id + '&page_number=' + INKIVE.Tool._current_page_id);

                INKIVE.Modal.togglePageLoader(true);
                _.delay(checkBlocked, 1000);
            }

            function checkBlocked() {
                if (isWindowBlocked()) {
                    blockAttempts--;
                    blockAttempts > 0 && _.delay(checkBlocked, 1000);
                    blockAttempts > 0 || isBlocked();
                } else waitUntilDone();
            }

            function isBlocked() {
                INKIVE.Modal.togglePageLoader(false);
                INKIVE.Modal.alertMessage(INKIVE.TemplatesHelper('alert_default', {
                    message: 'modal.alert.popup_blocker'
                }));
            }

            function waitUntilDone() {
                INKIVE.Modal.togglePageLoader(false);
                INKIVE.Modal.togglePageLoader(true, 'modal.wait_printing');
                localStorage.setItem('printing', true);

                $(window).one('storage', function (event) {
                    event.originalEvent.key === 'printing' && INKIVE.Modal.togglePageLoader(false);
                });
            }

            function isWindowBlocked() {
                try {
                    if (typeof newWindow == 'undefined') return true;
                    if (newWindow && newWindow.closed) return false;
                    if (newWindow && newWindow.tryLoad) return false;

                    return true;
                } catch (err) {}

                return false;
            }
        },

        initialize: function () {
            this.tool = INKIVE.Tool.getInstance();
            this.editor = this.tool.editor;

            this.initShareView();
        },

        initShareView: function () {
            this.shareView = new ShareView({
                el: this.$el.find('.ui-dropdown-content[data-id="share"]')
            });
        }
    }));

},{"../../analytics/decorate":4,"../../facade/editor/editor":45,"./analytics/view":309,"./contents/share/view":316}],318:[function(require,module,exports){
    var AppDecorate = require('../app/decorate');
    var eventName = INKIVE.C.IS_MOBILE ? 'Tap' : 'Click';
    var DesignFacade = require('../facade/design/design');
    var EditorFacade = require('../facade/editor/editor');
    var tinycolor = require('../../../bower_components/tinycolor/tinycolor');

    function Advice() {
        this.shown = [];
    }

    Advice.prototype = _.extend({
        messages: [{ id: 'share-error', type: 'error' }, { id: 'upload-error', type: 'error' }, { id: 'pick-template', type: 'info' }, { id: 'template-back', type: 'info' }, { id: 'upload-cancel', type: 'info' }, { id: 'share-success', type: 'success' }, { id: 'thumb-not-load', type: 'warning' }, { id: 'project-name', type: 'warning' }, { id: 'nothing-to-save', type: 'success' }, { id: 'crop', type: 'warning', once: true }, { id: 'convert-to-layout-box', type: 'success' }, { id: 'text-partial-edit', type: 'warning', once: true }, { id: 'source-restriction-applied', type: 'warning' }, { id: 'dropbox-view', type: 'warning', once: true }, { id: 'long-time-no-save', type: 'warning' }, { id: 'clipper-rotation-limit', type: 'info' }, { id: 'spacing-and-underline', type: 'warning' }, { id: 'uploading-images-save', type: 'warning' }, { id: 'undo-unlocked-layout-image', type: 'info' }, { id: 'already-saved', type: 'success' }, {
            id: 'long-text', type: 'info',
            onShow: function () {
                this.blinkingHint($('a.btn.btn-onmenu[data-action="on_textTyping"]'));
            }
        }, {
            id: 'locked-layout-image', type: 'warning',
            onShow: function () {
                this.blinkingHint($('a.btn.btn-onmenu[data-action="on_unlockImage"]'));
            }
        }, {
            id: 'locked-element', type: 'error',
            onShow: function () {
                this.blinkingHint($('a.btn.btn-onmenu[data-action="on_unlockElement"]'));
            }
        }, {
            id: 'template-placeholders', type: 'info',
            onShow: function () {
                this.blinkingHint($('.tool-menu li a[href="#tabImages"]').parent());
            }
        }, {
            id: 'text-edit', type: 'info',
            onShow: function () {
                this.blinkingHint($('a.btn.btn-onmenu[data-action="on_textBeginEdit"]'));
            }
        }, {
            id: 'saved', type: 'success',
            content: function (translate) {
                var now = new Date();
                var H = now.getHours();
                var i = now.getMinutes();

                return translate('advice.saved.content', {
                    H: H < 10 ? '0' + H : H,
                    i: i < 10 ? '0' + i : i
                });
            }
        }, {
            id: 'template-backgound', type: 'info',
            onShow: function () {
                this.blinkingHint($('.tool-menu li a[href="#tabExtra"]').parent());
            },
            content: function (translate) {
                return translate('advice.template_backgound.content', {
                    event_name: INKIVE.C.IS_MOBILE ? 'tapping' : 'clicking'
                });
            }
        }],

        blinkingHint: function ($element) {
            var hintTime = 5000;

            $element.addClass('blink');
            $element.one('click', removeBlinkClass);
            _.delay(removeBlinkClass, hintTime);

            function removeBlinkClass() {
                $element.removeClass('blink');
            }
        },

        initialize: function (svgCanvas) {
            if (this.initialized) return;

            this.initialized = true;
            this.initEventListeners(svgCanvas);

            toastr.options = {
                debug: false,
                timeOut: 5000,
                showEasing: 'easeOutBack',
                hideEasing: 'easeInBack',
                showMethod: 'slideDown',
                hideMethod: 'slideUp',
                closeButton: false,
                newestOnTop: true,
                showDuration: 300,
                hideDuration: 300,
                extendedTimeOut: 1000,
                preventDuplicates: true,
                positionClass: INKIVE.C.IS_MOBILE ? window.innerHeight > window.innerWidth ? 'mobile portrait toast-top-right' : 'mobile landscape toast-bottom-left' : 'desktop toast-top-left'
            };
        },

        initEventListeners: function (svgCanvas) {
            svgCanvas.bind('advice.show', _.bind(function (win, id) {
                this.show(id);
            }, this));

            EditorFacade.on('page.move_to', _.bind(checkForBackground, this));
            DesignFacade.on('template.update.designed', _.bind(checkForBackground, this));

            function checkForBackground() {
                var background = DesignFacade.get('background');
                var hasStrongColorBackground = background.color && !tinycolor.equals(background.color, '#FFF') && !tinycolor.equals(background.color, '#000');

                (background.source || hasStrongColorBackground) && this.show('template-backgound');
            }
        },

        show: function (id) {
            var message = _.find(this.messages, { id: id });

            if (message) {
                var alreadyShown = _.contains(this.shown, id);
                (!alreadyShown || !message.once) && this.showMessage(message);
                alreadyShown || this.shown.push(id);
            }
            message || console.warn('Message ' + id + ' is not defined');
        },

        showMessage: function (message) {
            var moreInfo;
            var func = toastr[message.type];
            message = this.translateFullMessage(message);

            if (_.isFunction(func)) {
                if (message.more) {
                    toastr.options.onclick = this.showMoreInfo(message);
                    moreInfo = INKIVE.TranslateHelper.translate('advice.more_info', {
                        event_name: eventName
                    });
                } else {
                    toastr.options.onclick = null;
                    moreInfo = '';
                }

                if (message.content) {
                    func(message.content + moreInfo);
                    message.onShow && message.onShow.call(this);
                }
                toastr.options.onclick = null;
            }
        },

        translateFullMessage: function (message) {
            var translate = INKIVE.TranslateHelper.translate;
            var translatedMessage = _.clone(message);
            var translationKeys = getTranslationKeys();

            _.each(translationKeys, function (key, index) {
                translatedMessage[index] && useOunTranslateFunction(index);
                translatedMessage[index] || useStaticTranslation(index, key);
            });

            return translatedMessage;

            function getTranslationKeys() {
                var translateKey = 'advice.' + message.id.split('-').join('_');

                return {
                    title: translateKey + '.title',
                    more: translateKey + '.more',
                    content: translateKey + '.content'
                };
            }

            function useOunTranslateFunction(index) {
                translatedMessage[index] = translatedMessage[index](translate);
            }

            function useStaticTranslation(index, key) {
                var trans = translate(key, { event_name: eventName });
                if (trans !== key) translatedMessage[index] = trans;
            }
        },

        showMoreInfo: function (message) {
            var content = '<p class="advice">' + message.more + '</p>';
            var modal = INKIVE.Modal.modalWindow(content, {
                headerIcon: 'icon-info',
                headerTitle: message.title,
                buttons: [{
                    title: 'Got it!',
                    onClick: function () {
                        modal.close();
                    }
                }]
            });
        }
    }, Backbone.Events);

    module.exports = AppDecorate(require('./app/advice'), new Advice());

},{"../../../bower_components/tinycolor/tinycolor":2,"../app/decorate":7,"../facade/design/design":19,"../facade/editor/editor":45,"./app/advice":319}],319:[function(require,module,exports){
    module.exports = {
        showMessageCheckOnce: function () {
            return !window.Android && this.appBridge.version.isGreaterThan('1.2');
        },

        showMessage: function (message) {
            message = this.translateFullMessage(message);
            this.trigger('show', message);
        },

        messages: [{ id: 'text-edit', type: 'info' }, { id: 'share-error', type: 'error' }, { id: 'upload-error', type: 'error' }, { id: 'template-back', type: 'info' }, { id: 'upload-cancel', type: 'info' }, { id: 'locked-element', type: 'error' }, { id: 'share-success', type: 'success' }, { id: 'convert-to-layout-box', type: 'success' }, { id: 'thumb-not-load', type: 'warning' }, { id: 'already-saved', type: 'success' }, { id: 'nothing-to-save', type: 'success' }, { id: 'crop', type: 'warning', once: true }, { id: 'long-time-no-save', type: 'warning' }, { id: 'locked-layout-image', type: 'warning' }, { id: 'clipper-rotation-limit', type: 'info' }, { id: 'uploading-images-save', type: 'warning' }, { id: 'spacing-and-underline', type: 'warning' }, { id: 'undo-unlocked-layout-image', type: 'info' }, {
            id: 'saved', type: 'success',
            content: function (translate) {
                var now = new Date();
                var H = now.getHours();
                var i = now.getMinutes();

                return translate('advice.saved.content', {
                    H: H < 10 ? '0' + H : H,
                    i: i < 10 ? '0' + i : i
                });
            }
        }, {
            id: 'template-backgound', type: 'info',
            content: function (translate) {
                return translate('advice.template_backgound.content', {
                    event_name: INKIVE.C.IS_MOBILE ? 'tapping' : 'clicking'
                });
            }
        }]
    };

},{}],320:[function(require,module,exports){
    Backbone.mixin = function (view, mixin) {
        _.defaults(view.prototype, mixin);
        _.defaults(view.prototype.events, mixin.events);

        return view;
    };

},{}],321:[function(require,module,exports){
    module.exports = {
        set: function (name, value, days) {
            if (days) {
                var date = new Date();
                date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
                var expires = '; expires=' + date.toGMTString();
            } else var expires = '';

            document.cookie = name + '=' + value + expires + '; path=/';
        },

        get: function (name) {
            var nameEQ = name + '=';
            var ca = document.cookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        },

        delete: function (name) {
            this.set(name, '', -1);
        }
    };

},{}],322:[function(require,module,exports){
    var ellipsis = '...';
    var ellipsisSize = ellipsis.length;

    module.exports = function ($container) {
        $container = $container || $('body');

        $container.find('[data-charlimit]').each(function () {
            var $el = $(this);
            var trimmableContent = false;
            var charlimit = $el.data('charlimit');

            trimmableContent |= processTag($el, charlimit);
            trimmableContent |= processText($el, charlimit);

            trimmableContent || console.warn('Can\'t trim', this);
        });
    };

    function processTag($el, charlimit) {
        var content = getTrimmableTagContent();
        content && content.length > charlimit && trimTagContent() && updateTitle($el, content);

        return content != '';

        function getTrimmableTagContent() {
            var content = $el.attr('tag');
            return content && content.trim();
        }

        function trimTagContent() {
            var newText = content.substring(0, charlimit - ellipsisSize) + ellipsis;
            $el.attr('tag', newText);

            return true;
        }
    }

    function processText($el, charlimit) {
        var content = getTrimmableTextContent();
        content && content.length > charlimit && trimTextContent() && updateTitle($el, content);

        return content != '';

        function getTrimmableTextContent() {
            var content = $el.contents().last().text();
            return content && content.trim();
        }

        function trimTextContent() {
            var newText = content.substring(0, charlimit - ellipsisSize) + ellipsis;
            $el.contents().last().replaceWith(newText);

            return true;
        }
    }

    function updateTitle($el, title) {
        $el.attr('title') || $el.attr('title', title);
    }

},{}],323:[function(require,module,exports){
// =========
// = humps =
// =========
// Underscore-to-camelCase converter (and vice versa)
// for strings and object keys

// humps is copyright © 2012+ Dom Christie
// Released under the MIT license.

    ;(function (global) {

        var _processKeys = function (convert, obj, options) {
            if (!_isObject(obj) || _isDate(obj) || _isRegExp(obj) || _isBoolean(obj)) {
                return obj;
            }

            var output,
                i = 0,
                l = 0;

            if (_isArray(obj)) {
                output = [];
                for (l = obj.length; i < l; i++) {
                    output.push(_processKeys(convert, obj[i], options));
                }
            } else {
                output = {};
                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        output[convert(key, options)] = _processKeys(convert, obj[key], options);
                    }
                }
            }
            return output;
        };

        // String conversion methods

        var separateWords = function (string, options) {
            options = options || {};
            var separator = options.separator || '_';
            var split = options.split || /(?=[A-Z])/;

            return string.split(split).join(separator);
        };

        var camelize = function (string) {
            if (_isNumerical(string)) {
                return string;
            }
            string = string.replace(/[\-_\s]+(.)?/g, function (match, chr) {
                return chr ? chr.toUpperCase() : '';
            });
            // Ensure 1st char is always lowercase
            return string.substr(0, 1).toLowerCase() + string.substr(1);
        };

        var pascalize = function (string) {
            var camelized = camelize(string);
            // Ensure 1st char is always uppercase
            return camelized.substr(0, 1).toUpperCase() + camelized.substr(1);
        };

        var decamelize = function (string, options) {
            return separateWords(string, options).toLowerCase();
        };

        // Utilities
        // Taken from Underscore.js

        var toString = Object.prototype.toString;

        var _isObject = function (obj) {
            return obj === Object(obj);
        };
        var _isArray = function (obj) {
            return toString.call(obj) == '[object Array]';
        };
        var _isDate = function (obj) {
            return toString.call(obj) == '[object Date]';
        };
        var _isRegExp = function (obj) {
            return toString.call(obj) == '[object RegExp]';
        };
        var _isBoolean = function (obj) {
            return toString.call(obj) == '[object Boolean]';
        };

        // Performant way to determine if obj coerces to a number
        var _isNumerical = function (obj) {
            obj = obj - 0;
            return obj === obj;
        };

        var humps = {
            camelize: camelize,
            decamelize: decamelize,
            pascalize: pascalize,
            depascalize: decamelize,
            camelizeKeys: function (object) {
                return _processKeys(camelize, object);
            },
            decamelizeKeys: function (object, options) {
                return _processKeys(decamelize, object, options);
            },
            pascalizeKeys: function (object) {
                return _processKeys(pascalize, object);
            },
            depascalizeKeys: function () {
                return this.decamelizeKeys.apply(this, arguments);
            }
        };

        if (typeof define === 'function' && define.amd) {
            define(humps);
        } else if (typeof module !== 'undefined' && module.exports) {
            module.exports = humps;
        } else {
            global.humps = humps;
        }
    })(this);

},{}],324:[function(require,module,exports){
    var ImagesFactory = require('../factory/images');
    var EditorFacade = require('../facade/editor/editor');
    var DesignFacade = require('../facade/design/design');

    module.exports = {
        preLoadImagesSanitize: function (str) {
            var imageExp = /<image([^>]*)xlink:href="([^"]*)"([^>]*)>([^<]*)<\/image>/g;
            var emptyImgExp = /<image([^>]*)xlink:href="([^"]*)"([^>]*)\/>/g;

            str = str.replace(imageExp, function (match, attr1, url, attr2, content) {
                if (attr1.indexOf('data-url=') > -1 || attr2.indexOf('data-url=') > -1) return match;

                return '<image' + attr1 + 'data-url="' + url + '"' + attr2 + '>' + content + '</image>';
            });

            return str.replace(emptyImgExp, function (match, attr1, url, attr2) {
                if (attr1.indexOf('data-url=') > -1 || attr2.indexOf('data-url=') > -1) return match;

                return '<image' + attr1 + 'data-url="' + url + '"' + attr2 + '/>';
            });
        },

        postLoadImagesSanitize: function (content) {
            var tool = INKIVE.Tool.getInstance();
            var canvas = tool.editor.canvas;

            $(content).find('image').each(function () {
                var $image = $(this);
                var element = this;
                var savedImageVersion = $image.data('url');
                if (!savedImageVersion) return;

                var img = new Image();
                var size = canvas.getBBox(element);
                if (!size || !size.width && !size.height) size = {
                    width: element.getAttribute('width'),
                    height: element.getAttribute('height')
                };

                var inOrderLoad = _.uniq([ImagesFactory.getRightSizeUrl(savedImageVersion, size), savedImageVersion, ImagesFactory.getOriginalUrl(savedImageVersion)]);

                $image.removeAttr('data-url');
                loadNext();

                img.onload = function () {
                    DesignFacade.set(element.getAttribute('id'), { source: { url: img.src, smart_load: false } });
                };

                img.onerror = function () {
                    inOrderLoad.length && loadNext();
                };

                function loadNext() {
                    img.src = inOrderLoad.shift();
                }
            });

            return content;
        }
    };

},{"../facade/design/design":19,"../facade/editor/editor":45,"../factory/images":66}],325:[function(require,module,exports){
    module.exports = function () {
        function e(e, t) {
            var o = e[0],
                u = e[1],
                a = e[2],
                f = e[3];o = n(o, u, a, f, t[0], 7, -680876936);f = n(f, o, u, a, t[1], 12, -389564586);a = n(a, f, o, u, t[2], 17, 606105819);u = n(u, a, f, o, t[3], 22, -1044525330);o = n(o, u, a, f, t[4], 7, -176418897);f = n(f, o, u, a, t[5], 12, 1200080426);a = n(a, f, o, u, t[6], 17, -1473231341);u = n(u, a, f, o, t[7], 22, -45705983);o = n(o, u, a, f, t[8], 7, 1770035416);f = n(f, o, u, a, t[9], 12, -1958414417);a = n(a, f, o, u, t[10], 17, -42063);u = n(u, a, f, o, t[11], 22, -1990404162);o = n(o, u, a, f, t[12], 7, 1804603682);f = n(f, o, u, a, t[13], 12, -40341101);a = n(a, f, o, u, t[14], 17, -1502002290);u = n(u, a, f, o, t[15], 22, 1236535329);o = r(o, u, a, f, t[1], 5, -165796510);f = r(f, o, u, a, t[6], 9, -1069501632);a = r(a, f, o, u, t[11], 14, 643717713);u = r(u, a, f, o, t[0], 20, -373897302);o = r(o, u, a, f, t[5], 5, -701558691);f = r(f, o, u, a, t[10], 9, 38016083);a = r(a, f, o, u, t[15], 14, -660478335);u = r(u, a, f, o, t[4], 20, -405537848);o = r(o, u, a, f, t[9], 5, 568446438);f = r(f, o, u, a, t[14], 9, -1019803690);a = r(a, f, o, u, t[3], 14, -187363961);u = r(u, a, f, o, t[8], 20, 1163531501);o = r(o, u, a, f, t[13], 5, -1444681467);f = r(f, o, u, a, t[2], 9, -51403784);a = r(a, f, o, u, t[7], 14, 1735328473);u = r(u, a, f, o, t[12], 20, -1926607734);o = i(o, u, a, f, t[5], 4, -378558);f = i(f, o, u, a, t[8], 11, -2022574463);a = i(a, f, o, u, t[11], 16, 1839030562);u = i(u, a, f, o, t[14], 23, -35309556);o = i(o, u, a, f, t[1], 4, -1530992060);f = i(f, o, u, a, t[4], 11, 1272893353);a = i(a, f, o, u, t[7], 16, -155497632);u = i(u, a, f, o, t[10], 23, -1094730640);o = i(o, u, a, f, t[13], 4, 681279174);f = i(f, o, u, a, t[0], 11, -358537222);a = i(a, f, o, u, t[3], 16, -722521979);u = i(u, a, f, o, t[6], 23, 76029189);o = i(o, u, a, f, t[9], 4, -640364487);f = i(f, o, u, a, t[12], 11, -421815835);a = i(a, f, o, u, t[15], 16, 530742520);u = i(u, a, f, o, t[2], 23, -995338651);o = s(o, u, a, f, t[0], 6, -198630844);f = s(f, o, u, a, t[7], 10, 1126891415);a = s(a, f, o, u, t[14], 15, -1416354905);u = s(u, a, f, o, t[5], 21, -57434055);o = s(o, u, a, f, t[12], 6, 1700485571);f = s(f, o, u, a, t[3], 10, -1894986606);a = s(a, f, o, u, t[10], 15, -1051523);u = s(u, a, f, o, t[1], 21, -2054922799);o = s(o, u, a, f, t[8], 6, 1873313359);f = s(f, o, u, a, t[15], 10, -30611744);a = s(a, f, o, u, t[6], 15, -1560198380);u = s(u, a, f, o, t[13], 21, 1309151649);o = s(o, u, a, f, t[4], 6, -145523070);f = s(f, o, u, a, t[11], 10, -1120210379);a = s(a, f, o, u, t[2], 15, 718787259);u = s(u, a, f, o, t[9], 21, -343485551);e[0] = m(o, e[0]);e[1] = m(u, e[1]);e[2] = m(a, e[2]);e[3] = m(f, e[3]);
        }
        function t(e, t, n, r, i, s) {
            t = m(m(t, e), m(r, s));return m(t << i | t >>> 32 - i, n);
        }function n(e, n, r, i, s, o, u) {
            return t(n & r | ~n & i, e, n, s, o, u);
        }
        function r(e, n, r, i, s, o, u) {
            return t(n & i | r & ~i, e, n, s, o, u);
        }function i(e, n, r, i, s, o, u) {
            return t(n ^ r ^ i, e, n, s, o, u);
        }
        function s(e, n, r, i, s, o, u) {
            return t(r ^ (n | ~i), e, n, s, o, u);
        }function o(t) {
            var n = t.length,
                r = [1732584193, -271733879, -1732584194, 271733878],
                i;
            for (i = 64; i <= t.length; i += 64) {
                e(r, u(t.substring(i - 64, i)));
            }t = t.substring(i - 64);var s = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            for (i = 0; i < t.length; i++) s[i >> 2] |= t.charCodeAt(i) << (i % 4 << 3);s[i >> 2] |= 128 << (i % 4 << 3);if (i > 55) {
                e(r, s);for (i = 0; i < 16; i++) s[i] = 0;
            }s[14] = n * 8;e(r, s);return r;
        }
        function u(e) {
            var t = [],
                n;for (n = 0; n < 64; n += 4) {
                t[n >> 2] = e.charCodeAt(n) + (e.charCodeAt(n + 1) << 8) + (e.charCodeAt(n + 2) << 16) + (e.charCodeAt(n + 3) << 24);
            }return t;
        }
        function c(e) {
            var t = "",
                n = 0;for (; n < 4; n++) t += a[e >> n * 8 + 4 & 15] + a[e >> n * 8 & 15];return t;
        }
        function h(e) {
            for (var t = 0; t < e.length; t++) e[t] = c(e[t]);return e.join("");
        }
        function d(e) {
            return h(o(unescape(encodeURIComponent(e))));
        }
        function m(e, t) {
            return e + t & 4294967295;
        }var a = "0123456789abcdef".split("");return d;
    }();

},{}],326:[function(require,module,exports){
    module.exports = function (translate) {
        INKIVE.C.DEFAULT_FINEUPLOADER.messages.typeError = '{file} has an invalid extension. Valid extension(s): {extensions}.';

        INKIVE.C.TextDefault = [{
            text: translate('text.option_title'),
            fontFamily: 'Lato',
            fontSize: '45',
            size: 0.18
        }, {
            text: translate('text.option_subtitle'),
            fontFamily: 'Lato',
            fontSize: '30',
            size: 0.1
        }, {
            text: translate('text.option_body'),
            fontFamily: 'Lato',
            fontSize: '20',
            size: 0.04
        }];

        INKIVE.C.HTML = {
            breadcrumbWrapper: '<ul class="breadcrumb"><li></li></ul>',

            breadcrumbElement: function (href, className, name) {
                return '<a data-toggle="tab" href="#' + href + '" class="' + className + '">' + name + ' </a>&gt ';
            },

            progressBar: function (id) {
                if (!id) console.error('INKIVE.C.HTML.progressBar: id is not defined');

                return $.parseHTML('<div class="progress-wrapper" id="' + id + '">' + '<div class="progress"><div class="progress-bar" role="progressbar" style="width: 0%;">0%</div></div>' + '<a class="btn progress-cancel"><i class="icon-remove"></i></a></div>');
            }
        };
    };

},{}],327:[function(require,module,exports){
    var options,
        users = {};

    module.exports = function (parameters) {
        options = _.extend({
            '$searchInput': $('<input>'),

            api: $.noop,
            baseUrl: '',
            friendsListParameters: {},
            facebookToken: FB.getAccessToken(),
            noProfilePicture: '',

            enter: $.noop,
            filter: $.noop,
            appendUser: $.noop,
            updateFriendScroll: $.noop
        }, parameters);

        var hasLoadedUsers = !_.isEmpty(users);
        hasLoadedUsers && loadLocalFriends();
        hasLoadedUsers || loadRemoteFriends();
    };

    function loadLocalFriends() {
        _.each(users, options.appendUser);
        _.defer(allLoad);
    }

    function loadRemoteFriends() {
        var friendsSources = [{ load: loadServerFriends }, { load: loadFacebookFriends }];
        var loadEnd = _.after(friendsSources.length, allLoad);
        _.invoke(friendsSources, 'load');

        function loadServerFriends() {
            $.post(options.baseUrl + 'friends/list', options.friendsListParameters, onServerFriends);

            function onServerFriends(result) {
                var data = $.parseJSON(result);
                data.result && _.each(_.filter(data.result, isNewResult), addUser);

                loadEnd();
            }
        }

        function loadFacebookFriends() {
            var query = '/me/friends?fields=id,name,installed,picture.redirect(false).type(square)';
            query += '&access_token=' + options.facebookToken;

            FB.api(query, function (response) {
                response && !response.error && _.each(response.data, function (itemData) {
                    var data = {
                        username: itemData.name,
                        social_user_id: itemData.id,
                        profile_picture: itemData.picture.data.url
                    };

                    isNewResult(data) && addUser(data, 'Facebook');
                });

                loadEnd();
            });
        }
    }

    function allLoad() {
        options.updateFriendScroll();
        initSearch();
    }

    function isNewResult(itemData) {
        return !users[getItemId(itemData)];
    }

    function getItemId(itemData) {
        return itemData.social_user_id > 0 ? itemData.social_user_id : itemData.user_id;
    }

    function addUser(itemData, source) {
        var id = getItemId(itemData);
        var profilePic = itemData.profile_picture ? itemData.profile_picture.replace('344x344', '42x42') : options.noProfilePicture;

        users[id] = {
            user_id: id,
            user_name: itemData.username,
            profile_pic: profilePic
        };

        if (typeof source === 'string') users[id].source = source;
        options.appendUser(users[id]);
    }

    function initSearch() {
        var debouncedSearch = _.debounce(search, 800);
        var apiSearch = _.partial(options.api, 'search/user', 'GET');

        options.$searchInput.tagsinput({
            itemValue: 'id',
            itemText: 'name'
        });

        options.$searchInput.tagsinput('input').keyup(function (event) {
            var query = options.$searchInput.tagsinput('input').val().trim();
            var keycode = event.keyCode ? event.keyCode : event.which;

            if (keycode == 13) {
                options.enter();
            } else {
                debouncedSearch();
                filter(true);
            }
        });

        function search() {
            var query = options.$searchInput.tagsinput('input').val().trim();

            query.length > 2 && apiSearch({ q: query }, function (result) {
                var newResults = _.filter(result, isNewResult);
                _.each(newResults, addUser);
                filter(false, query);
            });
        }

        function filter(isStillSearching, query) {
            query = typeof query === 'undefined' ? options.$searchInput.tagsinput('input').val().trim() : query;

            options.filter(query, isStillSearching);
        }
    }

},{}],328:[function(require,module,exports){
    var cookieStorage = require('../js/editor/utils/cookie-storage');
    var loadDeferred;

    function TranslateHelper(namespace, translationsPath, build) {
        this.namespace = namespace;
        this.build = build ? '?' + build : '';
        this.translationsPath = translationsPath;
        this.setLocale(cookieStorage.get('locale') || 'en');

        this.initHandlebarsHelper();
    }

    TranslateHelper.prototype.load = function (locale) {
        if (loadDeferred) return loadDeferred.promise();

        loadDeferred = $.Deferred();
        locale && this.setLocale(locale);

        $.get(this.translationsPath + this.namespace + '.' + this.locale + '.json' + this.build).done(_.bind(function (data) {
            this.data = data;
            loadDeferred.resolve();
        }, this)).fail(function () {
            loadDeferred.reject();
        });

        return loadDeferred.promise();
    };

    TranslateHelper.prototype.setLocale = function (locale) {
        this.locale = locale;
        cookieStorage.set('locale', locale);
    };

    TranslateHelper.prototype.translate = function (key, data) {
        if (!key) return;

        var index;
        var path = key.split('.');
        var currentPath = this.data;

        while (path.length && currentPath) {
            index = path.shift();
            currentPath = currentPath[index];
        }

        if (currentPath) return data || currentPath.indexOf('{{#') > -1 ? translateTemplate(currentPath, data) : currentPath;

        return key;

        function translateTemplate(source, data) {
            var Handlebars = require('handlebars');
            var hbsfy = require('hbsfy/runtime');
            Handlebars.helpers = hbsfy.helpers;

            var template = Handlebars.compile(source);
            data = _.isArray(data) ? getDataFromArray(data, source) : data;

            return template(data);
        }

        function getDataFromArray(data, source) {
            var dataObject = {};
            var handlebarVariableRegex = /{{{?[\s]*([^#|}|\/|\s]+)[\s]*}?}}/g;
            var variableNames = getMatches(source, handlebarVariableRegex);

            while (variableNames.length && data.length) dataObject[variableNames.pop()] = data.pop();

            return dataObject;

            function getMatches(string, regex) {
                var match;
                var index = 1;
                var matches = [];

                while (match = regex.exec(string)) matches.push(match[index]);

                return matches;
            }
        }
    };

    TranslateHelper.prototype.initHandlebarsHelper = function () {
        var translateHelper = this;
        var Handlebars = require('hbsfy/runtime');

        Handlebars.registerHelper('t', function (key) {
            var data = _.rest(_.initial(arguments));
            return translateHelper.translate(key, data.length && data);
        });
    };

    module.exports = TranslateHelper;

},{"../js/editor/utils/cookie-storage":321,"handlebars":360,"hbsfy/runtime":373}],329:[function(require,module,exports){
    (function (process,__filename){
        /** vim: et:ts=4:sw=4:sts=4
         * @license amdefine 1.0.0 Copyright (c) 2011-2015, The Dojo Foundation All Rights Reserved.
         * Available via the MIT or new BSD license.
         * see: http://github.com/jrburke/amdefine for details
         */

        /*jslint node: true */
        /*global module, process */
        'use strict';

        /**
         * Creates a define for node.
         * @param {Object} module the "module" object that is defined by Node for the
         * current module.
         * @param {Function} [requireFn]. Node's require function for the current module.
         * It only needs to be passed in Node versions before 0.5, when module.require
         * did not exist.
         * @returns {Function} a define function that is usable for the current node
         * module.
         */
        function amdefine(module, requireFn) {
            'use strict';
            var defineCache = {},
                loaderCache = {},
                alreadyCalled = false,
                path = require('path'),
                makeRequire, stringRequire;

            /**
             * Trims the . and .. from an array of path segments.
             * It will keep a leading path segment if a .. will become
             * the first path segment, to help with module name lookups,
             * which act like paths, but can be remapped. But the end result,
             * all paths that use this function should look normalized.
             * NOTE: this method MODIFIES the input array.
             * @param {Array} ary the array of path segments.
             */
            function trimDots(ary) {
                var i, part;
                for (i = 0; ary[i]; i+= 1) {
                    part = ary[i];
                    if (part === '.') {
                        ary.splice(i, 1);
                        i -= 1;
                    } else if (part === '..') {
                        if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            ary.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
            }

            function normalize(name, baseName) {
                var baseParts;

                //Adjust any relative paths.
                if (name && name.charAt(0) === '.') {
                    //If have a base name, try to normalize against it,
                    //otherwise, assume it is a top-level require that will
                    //be relative to baseUrl in the end.
                    if (baseName) {
                        baseParts = baseName.split('/');
                        baseParts = baseParts.slice(0, baseParts.length - 1);
                        baseParts = baseParts.concat(name.split('/'));
                        trimDots(baseParts);
                        name = baseParts.join('/');
                    }
                }

                return name;
            }

            /**
             * Create the normalize() function passed to a loader plugin's
             * normalize method.
             */
            function makeNormalize(relName) {
                return function (name) {
                    return normalize(name, relName);
                };
            }

            function makeLoad(id) {
                function load(value) {
                    loaderCache[id] = value;
                }

                load.fromText = function (id, text) {
                    //This one is difficult because the text can/probably uses
                    //define, and any relative paths and requires should be relative
                    //to that id was it would be found on disk. But this would require
                    //bootstrapping a module/require fairly deeply from node core.
                    //Not sure how best to go about that yet.
                    throw new Error('amdefine does not implement load.fromText');
                };

                return load;
            }

            makeRequire = function (systemRequire, exports, module, relId) {
                function amdRequire(deps, callback) {
                    if (typeof deps === 'string') {
                        //Synchronous, single module require('')
                        return stringRequire(systemRequire, exports, module, deps, relId);
                    } else {
                        //Array of dependencies with a callback.

                        //Convert the dependencies to modules.
                        deps = deps.map(function (depName) {
                            return stringRequire(systemRequire, exports, module, depName, relId);
                        });

                        //Wait for next tick to call back the require call.
                        if (callback) {
                            process.nextTick(function () {
                                callback.apply(null, deps);
                            });
                        }
                    }
                }

                amdRequire.toUrl = function (filePath) {
                    if (filePath.indexOf('.') === 0) {
                        return normalize(filePath, path.dirname(module.filename));
                    } else {
                        return filePath;
                    }
                };

                return amdRequire;
            };

            //Favor explicit value, passed in if the module wants to support Node 0.4.
            requireFn = requireFn || function req() {
                    return module.require.apply(module, arguments);
                };

            function runFactory(id, deps, factory) {
                var r, e, m, result;

                if (id) {
                    e = loaderCache[id] = {};
                    m = {
                        id: id,
                        uri: __filename,
                        exports: e
                    };
                    r = makeRequire(requireFn, e, m, id);
                } else {
                    //Only support one define call per file
                    if (alreadyCalled) {
                        throw new Error('amdefine with no module ID cannot be called more than once per file.');
                    }
                    alreadyCalled = true;

                    //Use the real variables from node
                    //Use module.exports for exports, since
                    //the exports in here is amdefine exports.
                    e = module.exports;
                    m = module;
                    r = makeRequire(requireFn, e, m, module.id);
                }

                //If there are dependencies, they are strings, so need
                //to convert them to dependency values.
                if (deps) {
                    deps = deps.map(function (depName) {
                        return r(depName);
                    });
                }

                //Call the factory with the right dependencies.
                if (typeof factory === 'function') {
                    result = factory.apply(m.exports, deps);
                } else {
                    result = factory;
                }

                if (result !== undefined) {
                    m.exports = result;
                    if (id) {
                        loaderCache[id] = m.exports;
                    }
                }
            }

            stringRequire = function (systemRequire, exports, module, id, relId) {
                //Split the ID by a ! so that
                var index = id.indexOf('!'),
                    originalId = id,
                    prefix, plugin;

                if (index === -1) {
                    id = normalize(id, relId);

                    //Straight module lookup. If it is one of the special dependencies,
                    //deal with it, otherwise, delegate to node.
                    if (id === 'require') {
                        return makeRequire(systemRequire, exports, module, relId);
                    } else if (id === 'exports') {
                        return exports;
                    } else if (id === 'module') {
                        return module;
                    } else if (loaderCache.hasOwnProperty(id)) {
                        return loaderCache[id];
                    } else if (defineCache[id]) {
                        runFactory.apply(null, defineCache[id]);
                        return loaderCache[id];
                    } else {
                        if(systemRequire) {
                            return systemRequire(originalId);
                        } else {
                            throw new Error('No module with ID: ' + id);
                        }
                    }
                } else {
                    //There is a plugin in play.
                    prefix = id.substring(0, index);
                    id = id.substring(index + 1, id.length);

                    plugin = stringRequire(systemRequire, exports, module, prefix, relId);

                    if (plugin.normalize) {
                        id = plugin.normalize(id, makeNormalize(relId));
                    } else {
                        //Normalize the ID normally.
                        id = normalize(id, relId);
                    }

                    if (loaderCache[id]) {
                        return loaderCache[id];
                    } else {
                        plugin.load(id, makeRequire(systemRequire, exports, module, relId), makeLoad(id), {});

                        return loaderCache[id];
                    }
                }
            };

            //Create a define function specific to the module asking for amdefine.
            function define(id, deps, factory) {
                if (Array.isArray(id)) {
                    factory = deps;
                    deps = id;
                    id = undefined;
                } else if (typeof id !== 'string') {
                    factory = id;
                    id = deps = undefined;
                }

                if (deps && !Array.isArray(deps)) {
                    factory = deps;
                    deps = undefined;
                }

                if (!deps) {
                    deps = ['require', 'exports', 'module'];
                }

                //Set up properties for this module. If an ID, then use
                //internal cache. If no ID, then use the external variables
                //for this node module.
                if (id) {
                    //Put the module in deep freeze until there is a
                    //require call for it.
                    defineCache[id] = [id, deps, factory];
                } else {
                    runFactory(id, deps, factory);
                }
            }

            //define.require, which has access to all the values in the
            //cache. Useful for AMD modules that all have IDs in the file,
            //but need to finally export a value to node based on one of those
            //IDs.
            define.require = function (id) {
                if (loaderCache[id]) {
                    return loaderCache[id];
                }

                if (defineCache[id]) {
                    runFactory.apply(null, defineCache[id]);
                    return loaderCache[id];
                }
            };

            define.amd = {};

            return define;
        }

        module.exports = amdefine;

    }).call(this,require('_process'),"/node_modules/amdefine/amdefine.js")

},{"_process":375,"path":374}],330:[function(require,module,exports){

},{}],331:[function(require,module,exports){
    'use strict';

    exports.__esModule = true;
// istanbul ignore next

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _handlebarsRuntime = require('./handlebars.runtime');

    var _handlebarsRuntime2 = _interopRequireDefault(_handlebarsRuntime);

// Compiler imports

    var _handlebarsCompilerAst = require('./handlebars/compiler/ast');

    var _handlebarsCompilerAst2 = _interopRequireDefault(_handlebarsCompilerAst);

    var _handlebarsCompilerBase = require('./handlebars/compiler/base');

    var _handlebarsCompilerCompiler = require('./handlebars/compiler/compiler');

    var _handlebarsCompilerJavascriptCompiler = require('./handlebars/compiler/javascript-compiler');

    var _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault(_handlebarsCompilerJavascriptCompiler);

    var _handlebarsCompilerVisitor = require('./handlebars/compiler/visitor');

    var _handlebarsCompilerVisitor2 = _interopRequireDefault(_handlebarsCompilerVisitor);

    var _handlebarsNoConflict = require('./handlebars/no-conflict');

    var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

    var _create = _handlebarsRuntime2['default'].create;
    function create() {
        var hb = _create();

        hb.compile = function (input, options) {
            return _handlebarsCompilerCompiler.compile(input, options, hb);
        };
        hb.precompile = function (input, options) {
            return _handlebarsCompilerCompiler.precompile(input, options, hb);
        };

        hb.AST = _handlebarsCompilerAst2['default'];
        hb.Compiler = _handlebarsCompilerCompiler.Compiler;
        hb.JavaScriptCompiler = _handlebarsCompilerJavascriptCompiler2['default'];
        hb.Parser = _handlebarsCompilerBase.parser;
        hb.parse = _handlebarsCompilerBase.parse;

        return hb;
    }

    var inst = create();
    inst.create = create;

    _handlebarsNoConflict2['default'](inst);

    inst.Visitor = _handlebarsCompilerVisitor2['default'];

    inst['default'] = inst;

    exports['default'] = inst;
    module.exports = exports['default'];


},{"./handlebars.runtime":332,"./handlebars/compiler/ast":334,"./handlebars/compiler/base":335,"./handlebars/compiler/compiler":337,"./handlebars/compiler/javascript-compiler":339,"./handlebars/compiler/visitor":342,"./handlebars/no-conflict":356}],332:[function(require,module,exports){
    'use strict';

    exports.__esModule = true;
// istanbul ignore next

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

// istanbul ignore next

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    var _handlebarsBase = require('./handlebars/base');

    var base = _interopRequireWildcard(_handlebarsBase);

// Each of these augment the Handlebars object. No need to setup here.
// (This is done to easily share code between commonjs and browse envs)

    var _handlebarsSafeString = require('./handlebars/safe-string');

    var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);

    var _handlebarsException = require('./handlebars/exception');

    var _handlebarsException2 = _interopRequireDefault(_handlebarsException);

    var _handlebarsUtils = require('./handlebars/utils');

    var Utils = _interopRequireWildcard(_handlebarsUtils);

    var _handlebarsRuntime = require('./handlebars/runtime');

    var runtime = _interopRequireWildcard(_handlebarsRuntime);

    var _handlebarsNoConflict = require('./handlebars/no-conflict');

    var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

// For compatibility and usage outside of module systems, make the Handlebars object a namespace
    function create() {
        var hb = new base.HandlebarsEnvironment();

        Utils.extend(hb, base);
        hb.SafeString = _handlebarsSafeString2['default'];
        hb.Exception = _handlebarsException2['default'];
        hb.Utils = Utils;
        hb.escapeExpression = Utils.escapeExpression;

        hb.VM = runtime;
        hb.template = function (spec) {
            return runtime.template(spec, hb);
        };

        return hb;
    }

    var inst = create();
    inst.create = create;

    _handlebarsNoConflict2['default'](inst);

    inst['default'] = inst;

    exports['default'] = inst;
    module.exports = exports['default'];


},{"./handlebars/base":333,"./handlebars/exception":346,"./handlebars/no-conflict":356,"./handlebars/runtime":357,"./handlebars/safe-string":358,"./handlebars/utils":359}],333:[function(require,module,exports){
    'use strict';

    exports.__esModule = true;
    exports.HandlebarsEnvironment = HandlebarsEnvironment;
// istanbul ignore next

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _utils = require('./utils');

    var _exception = require('./exception');

    var _exception2 = _interopRequireDefault(_exception);

    var _helpers = require('./helpers');

    var _decorators = require('./decorators');

    var _logger = require('./logger');

    var _logger2 = _interopRequireDefault(_logger);

    var VERSION = '4.0.5';
    exports.VERSION = VERSION;
    var COMPILER_REVISION = 7;

    exports.COMPILER_REVISION = COMPILER_REVISION;
    var REVISION_CHANGES = {
        1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
        2: '== 1.0.0-rc.3',
        3: '== 1.0.0-rc.4',
        4: '== 1.x.x',
        5: '== 2.0.0-alpha.x',
        6: '>= 2.0.0-beta.1',
        7: '>= 4.0.0'
    };

    exports.REVISION_CHANGES = REVISION_CHANGES;
    var objectType = '[object Object]';

    function HandlebarsEnvironment(helpers, partials, decorators) {
        this.helpers = helpers || {};
        this.partials = partials || {};
        this.decorators = decorators || {};

        _helpers.registerDefaultHelpers(this);
        _decorators.registerDefaultDecorators(this);
    }

    HandlebarsEnvironment.prototype = {
        constructor: HandlebarsEnvironment,

        logger: _logger2['default'],
        log: _logger2['default'].log,

        registerHelper: function registerHelper(name, fn) {
            if (_utils.toString.call(name) === objectType) {
                if (fn) {
                    throw new _exception2['default']('Arg not supported with multiple helpers');
                }
                _utils.extend(this.helpers, name);
            } else {
                this.helpers[name] = fn;
            }
        },
        unregisterHelper: function unregisterHelper(name) {
            delete this.helpers[name];
        },

        registerPartial: function registerPartial(name, partial) {
            if (_utils.toString.call(name) === objectType) {
                _utils.extend(this.partials, name);
            } else {
                if (typeof partial === 'undefined') {
                    throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
                }
                this.partials[name] = partial;
            }
        },
        unregisterPartial: function unregisterPartial(name) {
            delete this.partials[name];
        },

        registerDecorator: function registerDecorator(name, fn) {
            if (_utils.toString.call(name) === objectType) {
                if (fn) {
                    throw new _exception2['default']('Arg not supported with multiple decorators');
                }
                _utils.extend(this.decorators, name);
            } else {
                this.decorators[name] = fn;
            }
        },
        unregisterDecorator: function unregisterDecorator(name) {
            delete this.decorators[name];
        }
    };

    var log = _logger2['default'].log;

    exports.log = log;
    exports.createFrame = _utils.createFrame;
    exports.logger = _logger2['default'];


},{"./decorators":344,"./exception":346,"./helpers":347,"./logger":355,"./utils":359}],334:[function(require,module,exports){
    'use strict';

    exports.__esModule = true;
    var AST = {
        // Public API used to evaluate derived attributes regarding AST nodes
        helpers: {
            // a mustache is definitely a helper if:
            // * it is an eligible helper, and
            // * it has at least one parameter or hash segment
            helperExpression: function helperExpression(node) {
                return node.type === 'SubExpression' || (node.type === 'MustacheStatement' || node.type === 'BlockStatement') && !!(node.params && node.params.length || node.hash);
            },

            scopedId: function scopedId(path) {
                return (/^\.|this\b/.test(path.original)
                );
            },

            // an ID is simple if it only has one part, and that part is not
            // `..` or `this`.
            simpleId: function simpleId(path) {
                return path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth;
            }
        }
    };

// Must be exported as an object rather than the root of the module as the jison lexer
// must modify the object to operate properly.
    exports['default'] = AST;
    module.exports = exports['default'];


},{}],335:[function(require,module,exports){
    'use strict';

    exports.__esModule = true;
    exports.parse = parse;
// istanbul ignore next

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

// istanbul ignore next

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _parser = require('./parser');

    var _parser2 = _interopRequireDefault(_parser);

    var _whitespaceControl = require('./whitespace-control');

    var _whitespaceControl2 = _interopRequireDefault(_whitespaceControl);

    var _helpers = require('./helpers');

    var Helpers = _interopRequireWildcard(_helpers);

    var _utils = require('../utils');

    exports.parser = _parser2['default'];

    var yy = {};
    _utils.extend(yy, Helpers);

    function parse(input, options) {
        // Just return if an already-compiled AST was passed in.
        if (input.type === 'Program') {
            return input;
        }

        _parser2['default'].yy = yy;

        // Altering the shared object here, but this is ok as parser is a sync operation
        yy.locInfo = function (locInfo) {
            return new yy.SourceLocation(options && options.srcName, locInfo);
        };

        var strip = new _whitespaceControl2['default'](options);
        return strip.accept(_parser2['default'].parse(input));
    }


},{"../utils":359,"./helpers":338,"./parser":340,"./whitespace-control":343}],336:[function(require,module,exports){
    /* global define */
    'use strict';

    exports.__esModule = true;

    var _utils = require('../utils');

    var SourceNode = undefined;

    try {
        /* istanbul ignore next */
        if (typeof define !== 'function' || !define.amd) {
            // We don't support this in AMD environments. For these environments, we asusme that
            // they are running on the browser and thus have no need for the source-map library.
            var SourceMap = require('source-map');
            SourceNode = SourceMap.SourceNode;
        }
    } catch (err) {}
    /* NOP */

    /* istanbul ignore if: tested but not covered in istanbul due to dist build  */
    if (!SourceNode) {
        SourceNode = function (line, column, srcFile, chunks) {
            this.src = '';
            if (chunks) {
                this.add(chunks);
            }
        };
        /* istanbul ignore next */
        SourceNode.prototype = {
            add: function add(chunks) {
                if (_utils.isArray(chunks)) {
                    chunks = chunks.join('');
                }
                this.src += chunks;
            },
            prepend: function prepend(chunks) {
                if (_utils.isArray(chunks)) {
                    chunks = chunks.join('');
                }
                this.src = chunks + this.src;
            },
            toStringWithSourceMap: function toStringWithSourceMap() {
                return { code: this.toString() };
            },
            toString: function toString() {
                return this.src;
            }
        };
    }

    function castChunk(chunk, codeGen, loc) {
        if (_utils.isArray(chunk)) {
            var ret = [];

            for (var i = 0, len = chunk.length; i < len; i++) {
                ret.push(codeGen.wrap(chunk[i], loc));
            }
            return ret;
        } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {
            // Handle primitives that the SourceNode will throw up on
            return chunk + '';
        }
        return chunk;
    }

    function CodeGen(srcFile) {
        this.srcFile = srcFile;
        this.source = [];
    }

    CodeGen.prototype = {
        isEmpty: function isEmpty() {
            return !this.source.length;
        },
        prepend: function prepend(source, loc) {
            this.source.unshift(this.wrap(source, loc));
        },
        push: function push(source, loc) {
            this.source.push(this.wrap(source, loc));
        },

        merge: function merge() {
            var source = this.empty();
            this.each(function (line) {
                source.add(['  ', line, '\n']);
            });
            return source;
        },

        each: function each(iter) {
            for (var i = 0, len = this.source.length; i < len; i++) {
                iter(this.source[i]);
            }
        },

        empty: function empty() {
            var loc = this.currentLocation || { start: {} };
            return new SourceNode(loc.start.line, loc.start.column, this.srcFile);
        },
        wrap: function wrap(chunk) {
            var loc = arguments.length <= 1 || arguments[1] === undefined ? this.currentLocation || { start: {} } : arguments[1];

            if (chunk instanceof SourceNode) {
                return chunk;
            }

            chunk = castChunk(chunk, this, loc);

            return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);
        },

        functionCall: function functionCall(fn, type, params) {
            params = this.generateList(params);
            return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);
        },

        quotedString: function quotedString(str) {
            return '"' + (str + '').replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\u2028/g, '\\u2028') // Per Ecma-262 7.3 + 7.8.4
                    .replace(/\u2029/g, '\\u2029') + '"';
        },

        objectLiteral: function objectLiteral(obj) {
            var pairs = [];

            for (var key in obj) {
                if (obj.hasOwnProperty(key)) {
                    var value = castChunk(obj[key], this);
                    if (value !== 'undefined') {
                        pairs.push([this.quotedString(key), ':', value]);
                    }
                }
            }

            var ret = this.generateList(pairs);
            ret.prepend('{');
            ret.add('}');
            return ret;
        },

        generateList: function generateList(entries) {
            var ret = this.empty();

            for (var i = 0, len = entries.length; i < len; i++) {
                if (i) {
                    ret.add(',');
                }

                ret.add(castChunk(entries[i], this));
            }

            return ret;
        },

        generateArray: function generateArray(entries) {
            var ret = this.generateList(entries);
            ret.prepend('[');
            ret.add(']');

            return ret;
        }
    };

    exports['default'] = CodeGen;
    module.exports = exports['default'];


},{"../utils":359,"source-map":361}],337:[function(require,module,exports){
    /* eslint-disable new-cap */

    'use strict';

    exports.__esModule = true;
    exports.Compiler = Compiler;
    exports.precompile = precompile;
    exports.compile = compile;
// istanbul ignore next

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _exception = require('../exception');

    var _exception2 = _interopRequireDefault(_exception);

    var _utils = require('../utils');

    var _ast = require('./ast');

    var _ast2 = _interopRequireDefault(_ast);

    var slice = [].slice;

    function Compiler() {}

// the foundHelper register will disambiguate helper lookup from finding a
// function in a context. This is necessary for mustache compatibility, which
// requires that context functions in blocks are evaluated by blockHelperMissing,
// and then proceed as if the resulting value was provided to blockHelperMissing.

    Compiler.prototype = {
        compiler: Compiler,

        equals: function equals(other) {
            var len = this.opcodes.length;
            if (other.opcodes.length !== len) {
                return false;
            }

            for (var i = 0; i < len; i++) {
                var opcode = this.opcodes[i],
                    otherOpcode = other.opcodes[i];
                if (opcode.opcode !== otherOpcode.opcode || !argEquals(opcode.args, otherOpcode.args)) {
                    return false;
                }
            }

            // We know that length is the same between the two arrays because they are directly tied
            // to the opcode behavior above.
            len = this.children.length;
            for (var i = 0; i < len; i++) {
                if (!this.children[i].equals(other.children[i])) {
                    return false;
                }
            }

            return true;
        },

        guid: 0,

        compile: function compile(program, options) {
            this.sourceNode = [];
            this.opcodes = [];
            this.children = [];
            this.options = options;
            this.stringParams = options.stringParams;
            this.trackIds = options.trackIds;

            options.blockParams = options.blockParams || [];

            // These changes will propagate to the other compiler components
            var knownHelpers = options.knownHelpers;
            options.knownHelpers = {
                'helperMissing': true,
                'blockHelperMissing': true,
                'each': true,
                'if': true,
                'unless': true,
                'with': true,
                'log': true,
                'lookup': true
            };
            if (knownHelpers) {
                for (var _name in knownHelpers) {
                    /* istanbul ignore else */
                    if (_name in knownHelpers) {
                        options.knownHelpers[_name] = knownHelpers[_name];
                    }
                }
            }

            return this.accept(program);
        },

        compileProgram: function compileProgram(program) {
            var childCompiler = new this.compiler(),
                // eslint-disable-line new-cap
                result = childCompiler.compile(program, this.options),
                guid = this.guid++;

            this.usePartial = this.usePartial || result.usePartial;

            this.children[guid] = result;
            this.useDepths = this.useDepths || result.useDepths;

            return guid;
        },

        accept: function accept(node) {
            /* istanbul ignore next: Sanity code */
            if (!this[node.type]) {
                throw new _exception2['default']('Unknown type: ' + node.type, node);
            }

            this.sourceNode.unshift(node);
            var ret = this[node.type](node);
            this.sourceNode.shift();
            return ret;
        },

        Program: function Program(program) {
            this.options.blockParams.unshift(program.blockParams);

            var body = program.body,
                bodyLength = body.length;
            for (var i = 0; i < bodyLength; i++) {
                this.accept(body[i]);
            }

            this.options.blockParams.shift();

            this.isSimple = bodyLength === 1;
            this.blockParams = program.blockParams ? program.blockParams.length : 0;

            return this;
        },

        BlockStatement: function BlockStatement(block) {
            transformLiteralToPath(block);

            var program = block.program,
                inverse = block.inverse;

            program = program && this.compileProgram(program);
            inverse = inverse && this.compileProgram(inverse);

            var type = this.classifySexpr(block);

            if (type === 'helper') {
                this.helperSexpr(block, program, inverse);
            } else if (type === 'simple') {
                this.simpleSexpr(block);

                // now that the simple mustache is resolved, we need to
                // evaluate it by executing `blockHelperMissing`
                this.opcode('pushProgram', program);
                this.opcode('pushProgram', inverse);
                this.opcode('emptyHash');
                this.opcode('blockValue', block.path.original);
            } else {
                this.ambiguousSexpr(block, program, inverse);

                // now that the simple mustache is resolved, we need to
                // evaluate it by executing `blockHelperMissing`
                this.opcode('pushProgram', program);
                this.opcode('pushProgram', inverse);
                this.opcode('emptyHash');
                this.opcode('ambiguousBlockValue');
            }

            this.opcode('append');
        },

        DecoratorBlock: function DecoratorBlock(decorator) {
            var program = decorator.program && this.compileProgram(decorator.program);
            var params = this.setupFullMustacheParams(decorator, program, undefined),
                path = decorator.path;

            this.useDecorators = true;
            this.opcode('registerDecorator', params.length, path.original);
        },

        PartialStatement: function PartialStatement(partial) {
            this.usePartial = true;

            var program = partial.program;
            if (program) {
                program = this.compileProgram(partial.program);
            }

            var params = partial.params;
            if (params.length > 1) {
                throw new _exception2['default']('Unsupported number of partial arguments: ' + params.length, partial);
            } else if (!params.length) {
                if (this.options.explicitPartialContext) {
                    this.opcode('pushLiteral', 'undefined');
                } else {
                    params.push({ type: 'PathExpression', parts: [], depth: 0 });
                }
            }

            var partialName = partial.name.original,
                isDynamic = partial.name.type === 'SubExpression';
            if (isDynamic) {
                this.accept(partial.name);
            }

            this.setupFullMustacheParams(partial, program, undefined, true);

            var indent = partial.indent || '';
            if (this.options.preventIndent && indent) {
                this.opcode('appendContent', indent);
                indent = '';
            }

            this.opcode('invokePartial', isDynamic, partialName, indent);
            this.opcode('append');
        },
        PartialBlockStatement: function PartialBlockStatement(partialBlock) {
            this.PartialStatement(partialBlock);
        },

        MustacheStatement: function MustacheStatement(mustache) {
            this.SubExpression(mustache);

            if (mustache.escaped && !this.options.noEscape) {
                this.opcode('appendEscaped');
            } else {
                this.opcode('append');
            }
        },
        Decorator: function Decorator(decorator) {
            this.DecoratorBlock(decorator);
        },

        ContentStatement: function ContentStatement(content) {
            if (content.value) {
                this.opcode('appendContent', content.value);
            }
        },

        CommentStatement: function CommentStatement() {},

        SubExpression: function SubExpression(sexpr) {
            transformLiteralToPath(sexpr);
            var type = this.classifySexpr(sexpr);

            if (type === 'simple') {
                this.simpleSexpr(sexpr);
            } else if (type === 'helper') {
                this.helperSexpr(sexpr);
            } else {
                this.ambiguousSexpr(sexpr);
            }
        },
        ambiguousSexpr: function ambiguousSexpr(sexpr, program, inverse) {
            var path = sexpr.path,
                name = path.parts[0],
                isBlock = program != null || inverse != null;

            this.opcode('getContext', path.depth);

            this.opcode('pushProgram', program);
            this.opcode('pushProgram', inverse);

            path.strict = true;
            this.accept(path);

            this.opcode('invokeAmbiguous', name, isBlock);
        },

        simpleSexpr: function simpleSexpr(sexpr) {
            var path = sexpr.path;
            path.strict = true;
            this.accept(path);
            this.opcode('resolvePossibleLambda');
        },

        helperSexpr: function helperSexpr(sexpr, program, inverse) {
            var params = this.setupFullMustacheParams(sexpr, program, inverse),
                path = sexpr.path,
                name = path.parts[0];

            if (this.options.knownHelpers[name]) {
                this.opcode('invokeKnownHelper', params.length, name);
            } else if (this.options.knownHelpersOnly) {
                throw new _exception2['default']('You specified knownHelpersOnly, but used the unknown helper ' + name, sexpr);
            } else {
                path.strict = true;
                path.falsy = true;

                this.accept(path);
                this.opcode('invokeHelper', params.length, path.original, _ast2['default'].helpers.simpleId(path));
            }
        },

        PathExpression: function PathExpression(path) {
            this.addDepth(path.depth);
            this.opcode('getContext', path.depth);

            var name = path.parts[0],
                scoped = _ast2['default'].helpers.scopedId(path),
                blockParamId = !path.depth && !scoped && this.blockParamIndex(name);

            if (blockParamId) {
                this.opcode('lookupBlockParam', blockParamId, path.parts);
            } else if (!name) {
                // Context reference, i.e. `{{foo .}}` or `{{foo ..}}`
                this.opcode('pushContext');
            } else if (path.data) {
                this.options.data = true;
                this.opcode('lookupData', path.depth, path.parts, path.strict);
            } else {
                this.opcode('lookupOnContext', path.parts, path.falsy, path.strict, scoped);
            }
        },

        StringLiteral: function StringLiteral(string) {
            this.opcode('pushString', string.value);
        },

        NumberLiteral: function NumberLiteral(number) {
            this.opcode('pushLiteral', number.value);
        },

        BooleanLiteral: function BooleanLiteral(bool) {
            this.opcode('pushLiteral', bool.value);
        },

        UndefinedLiteral: function UndefinedLiteral() {
            this.opcode('pushLiteral', 'undefined');
        },

        NullLiteral: function NullLiteral() {
            this.opcode('pushLiteral', 'null');
        },

        Hash: function Hash(hash) {
            var pairs = hash.pairs,
                i = 0,
                l = pairs.length;

            this.opcode('pushHash');

            for (; i < l; i++) {
                this.pushParam(pairs[i].value);
            }
            while (i--) {
                this.opcode('assignToHash', pairs[i].key);
            }
            this.opcode('popHash');
        },

        // HELPERS
        opcode: function opcode(name) {
            this.opcodes.push({ opcode: name, args: slice.call(arguments, 1), loc: this.sourceNode[0].loc });
        },

        addDepth: function addDepth(depth) {
            if (!depth) {
                return;
            }

            this.useDepths = true;
        },

        classifySexpr: function classifySexpr(sexpr) {
            var isSimple = _ast2['default'].helpers.simpleId(sexpr.path);

            var isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);

            // a mustache is an eligible helper if:
            // * its id is simple (a single part, not `this` or `..`)
            var isHelper = !isBlockParam && _ast2['default'].helpers.helperExpression(sexpr);

            // if a mustache is an eligible helper but not a definite
            // helper, it is ambiguous, and will be resolved in a later
            // pass or at runtime.
            var isEligible = !isBlockParam && (isHelper || isSimple);

            // if ambiguous, we can possibly resolve the ambiguity now
            // An eligible helper is one that does not have a complex path, i.e. `this.foo`, `../foo` etc.
            if (isEligible && !isHelper) {
                var _name2 = sexpr.path.parts[0],
                    options = this.options;

                if (options.knownHelpers[_name2]) {
                    isHelper = true;
                } else if (options.knownHelpersOnly) {
                    isEligible = false;
                }
            }

            if (isHelper) {
                return 'helper';
            } else if (isEligible) {
                return 'ambiguous';
            } else {
                return 'simple';
            }
        },

        pushParams: function pushParams(params) {
            for (var i = 0, l = params.length; i < l; i++) {
                this.pushParam(params[i]);
            }
        },

        pushParam: function pushParam(val) {
            var value = val.value != null ? val.value : val.original || '';

            if (this.stringParams) {
                if (value.replace) {
                    value = value.replace(/^(\.?\.\/)*/g, '').replace(/\//g, '.');
                }

                if (val.depth) {
                    this.addDepth(val.depth);
                }
                this.opcode('getContext', val.depth || 0);
                this.opcode('pushStringParam', value, val.type);

                if (val.type === 'SubExpression') {
                    // SubExpressions get evaluated and passed in
                    // in string params mode.
                    this.accept(val);
                }
            } else {
                if (this.trackIds) {
                    var blockParamIndex = undefined;
                    if (val.parts && !_ast2['default'].helpers.scopedId(val) && !val.depth) {
                        blockParamIndex = this.blockParamIndex(val.parts[0]);
                    }
                    if (blockParamIndex) {
                        var blockParamChild = val.parts.slice(1).join('.');
                        this.opcode('pushId', 'BlockParam', blockParamIndex, blockParamChild);
                    } else {
                        value = val.original || value;
                        if (value.replace) {
                            value = value.replace(/^this(?:\.|$)/, '').replace(/^\.\//, '').replace(/^\.$/, '');
                        }

                        this.opcode('pushId', val.type, value);
                    }
                }
                this.accept(val);
            }
        },

        setupFullMustacheParams: function setupFullMustacheParams(sexpr, program, inverse, omitEmpty) {
            var params = sexpr.params;
            this.pushParams(params);

            this.opcode('pushProgram', program);
            this.opcode('pushProgram', inverse);

            if (sexpr.hash) {
                this.accept(sexpr.hash);
            } else {
                this.opcode('emptyHash', omitEmpty);
            }

            return params;
        },

        blockParamIndex: function blockParamIndex(name) {
            for (var depth = 0, len = this.options.blockParams.length; depth < len; depth++) {
                var blockParams = this.options.blockParams[depth],
                    param = blockParams && _utils.indexOf(blockParams, name);
                if (blockParams && param >= 0) {
                    return [depth, param];
                }
            }
        }
    };

    function precompile(input, options, env) {
        if (input == null || typeof input !== 'string' && input.type !== 'Program') {
            throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.precompile. You passed ' + input);
        }

        options = options || {};
        if (!('data' in options)) {
            options.data = true;
        }
        if (options.compat) {
            options.useDepths = true;
        }

        var ast = env.parse(input, options),
            environment = new env.Compiler().compile(ast, options);
        return new env.JavaScriptCompiler().compile(environment, options);
    }

    function compile(input, options, env) {
        if (options === undefined) options = {};

        if (input == null || typeof input !== 'string' && input.type !== 'Program') {
            throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.compile. You passed ' + input);
        }

        if (!('data' in options)) {
            options.data = true;
        }
        if (options.compat) {
            options.useDepths = true;
        }

        var compiled = undefined;

        function compileInput() {
            var ast = env.parse(input, options),
                environment = new env.Compiler().compile(ast, options),
                templateSpec = new env.JavaScriptCompiler().compile(environment, options, undefined, true);
            return env.template(templateSpec);
        }

        // Template is only compiled on first use and cached after that point.
        function ret(context, execOptions) {
            if (!compiled) {
                compiled = compileInput();
            }
            return compiled.call(this, context, execOptions);
        }
        ret._setup = function (setupOptions) {
            if (!compiled) {
                compiled = compileInput();
            }
            return compiled._setup(setupOptions);
        };
        ret._child = function (i, data, blockParams, depths) {
            if (!compiled) {
                compiled = compileInput();
            }
            return compiled._child(i, data, blockParams, depths);
        };
        return ret;
    }

    function argEquals(a, b) {
        if (a === b) {
            return true;
        }

        if (_utils.isArray(a) && _utils.isArray(b) && a.length === b.length) {
            for (var i = 0; i < a.length; i++) {
                if (!argEquals(a[i], b[i])) {
                    return false;
                }
            }
            return true;
        }
    }

    function transformLiteralToPath(sexpr) {
        if (!sexpr.path.parts) {
            var literal = sexpr.path;
            // Casting to string here to make false and 0 literal values play nicely with the rest
            // of the system.
            sexpr.path = {
                type: 'PathExpression',
                data: false,
                depth: 0,
                parts: [literal.original + ''],
                original: literal.original + '',
                loc: literal.loc
            };
        }
    }


},{"../exception":346,"../utils":359,"./ast":334}],338:[function(require,module,exports){
    'use strict';

    exports.__esModule = true;
    exports.SourceLocation = SourceLocation;
    exports.id = id;
    exports.stripFlags = stripFlags;
    exports.stripComment = stripComment;
    exports.preparePath = preparePath;
    exports.prepareMustache = prepareMustache;
    exports.prepareRawBlock = prepareRawBlock;
    exports.prepareBlock = prepareBlock;
    exports.prepareProgram = prepareProgram;
    exports.preparePartialBlock = preparePartialBlock;
// istanbul ignore next

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _exception = require('../exception');

    var _exception2 = _interopRequireDefault(_exception);

    function validateClose(open, close) {
        close = close.path ? close.path.original : close;

        if (open.path.original !== close) {
            var errorNode = { loc: open.path.loc };

            throw new _exception2['default'](open.path.original + " doesn't match " + close, errorNode);
        }
    }

    function SourceLocation(source, locInfo) {
        this.source = source;
        this.start = {
            line: locInfo.first_line,
            column: locInfo.first_column
        };
        this.end = {
            line: locInfo.last_line,
            column: locInfo.last_column
        };
    }

    function id(token) {
        if (/^\[.*\]$/.test(token)) {
            return token.substr(1, token.length - 2);
        } else {
            return token;
        }
    }

    function stripFlags(open, close) {
        return {
            open: open.charAt(2) === '~',
            close: close.charAt(close.length - 3) === '~'
        };
    }

    function stripComment(comment) {
        return comment.replace(/^\{\{~?\!-?-?/, '').replace(/-?-?~?\}\}$/, '');
    }

    function preparePath(data, parts, loc) {
        loc = this.locInfo(loc);

        var original = data ? '@' : '',
            dig = [],
            depth = 0,
            depthString = '';

        for (var i = 0, l = parts.length; i < l; i++) {
            var part = parts[i].part,

                // If we have [] syntax then we do not treat path references as operators,
                // i.e. foo.[this] resolves to approximately context.foo['this']
                isLiteral = parts[i].original !== part;
            original += (parts[i].separator || '') + part;

            if (!isLiteral && (part === '..' || part === '.' || part === 'this')) {
                if (dig.length > 0) {
                    throw new _exception2['default']('Invalid path: ' + original, { loc: loc });
                } else if (part === '..') {
                    depth++;
                    depthString += '../';
                }
            } else {
                dig.push(part);
            }
        }

        return {
            type: 'PathExpression',
            data: data,
            depth: depth,
            parts: dig,
            original: original,
            loc: loc
        };
    }

    function prepareMustache(path, params, hash, open, strip, locInfo) {
        // Must use charAt to support IE pre-10
        var escapeFlag = open.charAt(3) || open.charAt(2),
            escaped = escapeFlag !== '{' && escapeFlag !== '&';

        var decorator = /\*/.test(open);
        return {
            type: decorator ? 'Decorator' : 'MustacheStatement',
            path: path,
            params: params,
            hash: hash,
            escaped: escaped,
            strip: strip,
            loc: this.locInfo(locInfo)
        };
    }

    function prepareRawBlock(openRawBlock, contents, close, locInfo) {
        validateClose(openRawBlock, close);

        locInfo = this.locInfo(locInfo);
        var program = {
            type: 'Program',
            body: contents,
            strip: {},
            loc: locInfo
        };

        return {
            type: 'BlockStatement',
            path: openRawBlock.path,
            params: openRawBlock.params,
            hash: openRawBlock.hash,
            program: program,
            openStrip: {},
            inverseStrip: {},
            closeStrip: {},
            loc: locInfo
        };
    }

    function prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {
        if (close && close.path) {
            validateClose(openBlock, close);
        }

        var decorator = /\*/.test(openBlock.open);

        program.blockParams = openBlock.blockParams;

        var inverse = undefined,
            inverseStrip = undefined;

        if (inverseAndProgram) {
            if (decorator) {
                throw new _exception2['default']('Unexpected inverse block on decorator', inverseAndProgram);
            }

            if (inverseAndProgram.chain) {
                inverseAndProgram.program.body[0].closeStrip = close.strip;
            }

            inverseStrip = inverseAndProgram.strip;
            inverse = inverseAndProgram.program;
        }

        if (inverted) {
            inverted = inverse;
            inverse = program;
            program = inverted;
        }

        return {
            type: decorator ? 'DecoratorBlock' : 'BlockStatement',
            path: openBlock.path,
            params: openBlock.params,
            hash: openBlock.hash,
            program: program,
            inverse: inverse,
            openStrip: openBlock.strip,
            inverseStrip: inverseStrip,
            closeStrip: close && close.strip,
            loc: this.locInfo(locInfo)
        };
    }

    function prepareProgram(statements, loc) {
        if (!loc && statements.length) {
            var firstLoc = statements[0].loc,
                lastLoc = statements[statements.length - 1].loc;

            /* istanbul ignore else */
            if (firstLoc && lastLoc) {
                loc = {
                    source: firstLoc.source,
                    start: {
                        line: firstLoc.start.line,
                        column: firstLoc.start.column
                    },
                    end: {
                        line: lastLoc.end.line,
                        column: lastLoc.end.column
                    }
                };
            }
        }

        return {
            type: 'Program',
            body: statements,
            strip: {},
            loc: loc
        };
    }

    function preparePartialBlock(open, program, close, locInfo) {
        validateClose(open, close);

        return {
            type: 'PartialBlockStatement',
            name: open.path,
            params: open.params,
            hash: open.hash,
            program: program,
            openStrip: open.strip,
            closeStrip: close && close.strip,
            loc: this.locInfo(locInfo)
        };
    }


},{"../exception":346}],339:[function(require,module,exports){
    'use strict';

    exports.__esModule = true;
// istanbul ignore next

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _base = require('../base');

    var _exception = require('../exception');

    var _exception2 = _interopRequireDefault(_exception);

    var _utils = require('../utils');

    var _codeGen = require('./code-gen');

    var _codeGen2 = _interopRequireDefault(_codeGen);

    function Literal(value) {
        this.value = value;
    }

    function JavaScriptCompiler() {}

    JavaScriptCompiler.prototype = {
        // PUBLIC API: You can override these methods in a subclass to provide
        // alternative compiled forms for name lookup and buffering semantics
        nameLookup: function nameLookup(parent, name /* , type*/) {
            if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
                return [parent, '.', name];
            } else {
                return [parent, '[', JSON.stringify(name), ']'];
            }
        },
        depthedLookup: function depthedLookup(name) {
            return [this.aliasable('container.lookup'), '(depths, "', name, '")'];
        },

        compilerInfo: function compilerInfo() {
            var revision = _base.COMPILER_REVISION,
                versions = _base.REVISION_CHANGES[revision];
            return [revision, versions];
        },

        appendToBuffer: function appendToBuffer(source, location, explicit) {
            // Force a source as this simplifies the merge logic.
            if (!_utils.isArray(source)) {
                source = [source];
            }
            source = this.source.wrap(source, location);

            if (this.environment.isSimple) {
                return ['return ', source, ';'];
            } else if (explicit) {
                // This is a case where the buffer operation occurs as a child of another
                // construct, generally braces. We have to explicitly output these buffer
                // operations to ensure that the emitted code goes in the correct location.
                return ['buffer += ', source, ';'];
            } else {
                source.appendToBuffer = true;
                return source;
            }
        },

        initializeBuffer: function initializeBuffer() {
            return this.quotedString('');
        },
        // END PUBLIC API

        compile: function compile(environment, options, context, asObject) {
            this.environment = environment;
            this.options = options;
            this.stringParams = this.options.stringParams;
            this.trackIds = this.options.trackIds;
            this.precompile = !asObject;

            this.name = this.environment.name;
            this.isChild = !!context;
            this.context = context || {
                    decorators: [],
                    programs: [],
                    environments: []
                };

            this.preamble();

            this.stackSlot = 0;
            this.stackVars = [];
            this.aliases = {};
            this.registers = { list: [] };
            this.hashes = [];
            this.compileStack = [];
            this.inlineStack = [];
            this.blockParams = [];

            this.compileChildren(environment, options);

            this.useDepths = this.useDepths || environment.useDepths || environment.useDecorators || this.options.compat;
            this.useBlockParams = this.useBlockParams || environment.useBlockParams;

            var opcodes = environment.opcodes,
                opcode = undefined,
                firstLoc = undefined,
                i = undefined,
                l = undefined;

            for (i = 0, l = opcodes.length; i < l; i++) {
                opcode = opcodes[i];

                this.source.currentLocation = opcode.loc;
                firstLoc = firstLoc || opcode.loc;
                this[opcode.opcode].apply(this, opcode.args);
            }

            // Flush any trailing content that might be pending.
            this.source.currentLocation = firstLoc;
            this.pushSource('');

            /* istanbul ignore next */
            if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {
                throw new _exception2['default']('Compile completed with content left on stack');
            }

            if (!this.decorators.isEmpty()) {
                this.useDecorators = true;

                this.decorators.prepend('var decorators = container.decorators;\n');
                this.decorators.push('return fn;');

                if (asObject) {
                    this.decorators = Function.apply(this, ['fn', 'props', 'container', 'depth0', 'data', 'blockParams', 'depths', this.decorators.merge()]);
                } else {
                    this.decorators.prepend('function(fn, props, container, depth0, data, blockParams, depths) {\n');
                    this.decorators.push('}\n');
                    this.decorators = this.decorators.merge();
                }
            } else {
                this.decorators = undefined;
            }

            var fn = this.createFunctionContext(asObject);
            if (!this.isChild) {
                var ret = {
                    compiler: this.compilerInfo(),
                    main: fn
                };

                if (this.decorators) {
                    ret.main_d = this.decorators; // eslint-disable-line camelcase
                    ret.useDecorators = true;
                }

                var _context = this.context;
                var programs = _context.programs;
                var decorators = _context.decorators;

                for (i = 0, l = programs.length; i < l; i++) {
                    if (programs[i]) {
                        ret[i] = programs[i];
                        if (decorators[i]) {
                            ret[i + '_d'] = decorators[i];
                            ret.useDecorators = true;
                        }
                    }
                }

                if (this.environment.usePartial) {
                    ret.usePartial = true;
                }
                if (this.options.data) {
                    ret.useData = true;
                }
                if (this.useDepths) {
                    ret.useDepths = true;
                }
                if (this.useBlockParams) {
                    ret.useBlockParams = true;
                }
                if (this.options.compat) {
                    ret.compat = true;
                }

                if (!asObject) {
                    ret.compiler = JSON.stringify(ret.compiler);

                    this.source.currentLocation = { start: { line: 1, column: 0 } };
                    ret = this.objectLiteral(ret);

                    if (options.srcName) {
                        ret = ret.toStringWithSourceMap({ file: options.destName });
                        ret.map = ret.map && ret.map.toString();
                    } else {
                        ret = ret.toString();
                    }
                } else {
                    ret.compilerOptions = this.options;
                }

                return ret;
            } else {
                return fn;
            }
        },

        preamble: function preamble() {
            // track the last context pushed into place to allow skipping the
            // getContext opcode when it would be a noop
            this.lastContext = 0;
            this.source = new _codeGen2['default'](this.options.srcName);
            this.decorators = new _codeGen2['default'](this.options.srcName);
        },

        createFunctionContext: function createFunctionContext(asObject) {
            var varDeclarations = '';

            var locals = this.stackVars.concat(this.registers.list);
            if (locals.length > 0) {
                varDeclarations += ', ' + locals.join(', ');
            }

            // Generate minimizer alias mappings
            //
            // When using true SourceNodes, this will update all references to the given alias
            // as the source nodes are reused in situ. For the non-source node compilation mode,
            // aliases will not be used, but this case is already being run on the client and
            // we aren't concern about minimizing the template size.
            var aliasCount = 0;
            for (var alias in this.aliases) {
                // eslint-disable-line guard-for-in
                var node = this.aliases[alias];

                if (this.aliases.hasOwnProperty(alias) && node.children && node.referenceCount > 1) {
                    varDeclarations += ', alias' + ++aliasCount + '=' + alias;
                    node.children[0] = 'alias' + aliasCount;
                }
            }

            var params = ['container', 'depth0', 'helpers', 'partials', 'data'];

            if (this.useBlockParams || this.useDepths) {
                params.push('blockParams');
            }
            if (this.useDepths) {
                params.push('depths');
            }

            // Perform a second pass over the output to merge content when possible
            var source = this.mergeSource(varDeclarations);

            if (asObject) {
                params.push(source);

                return Function.apply(this, params);
            } else {
                return this.source.wrap(['function(', params.join(','), ') {\n  ', source, '}']);
            }
        },
        mergeSource: function mergeSource(varDeclarations) {
            var isSimple = this.environment.isSimple,
                appendOnly = !this.forceBuffer,
                appendFirst = undefined,
                sourceSeen = undefined,
                bufferStart = undefined,
                bufferEnd = undefined;
            this.source.each(function (line) {
                if (line.appendToBuffer) {
                    if (bufferStart) {
                        line.prepend('  + ');
                    } else {
                        bufferStart = line;
                    }
                    bufferEnd = line;
                } else {
                    if (bufferStart) {
                        if (!sourceSeen) {
                            appendFirst = true;
                        } else {
                            bufferStart.prepend('buffer += ');
                        }
                        bufferEnd.add(';');
                        bufferStart = bufferEnd = undefined;
                    }

                    sourceSeen = true;
                    if (!isSimple) {
                        appendOnly = false;
                    }
                }
            });

            if (appendOnly) {
                if (bufferStart) {
                    bufferStart.prepend('return ');
                    bufferEnd.add(';');
                } else if (!sourceSeen) {
                    this.source.push('return "";');
                }
            } else {
                varDeclarations += ', buffer = ' + (appendFirst ? '' : this.initializeBuffer());

                if (bufferStart) {
                    bufferStart.prepend('return buffer + ');
                    bufferEnd.add(';');
                } else {
                    this.source.push('return buffer;');
                }
            }

            if (varDeclarations) {
                this.source.prepend('var ' + varDeclarations.substring(2) + (appendFirst ? '' : ';\n'));
            }

            return this.source.merge();
        },

        // [blockValue]
        //
        // On stack, before: hash, inverse, program, value
        // On stack, after: return value of blockHelperMissing
        //
        // The purpose of this opcode is to take a block of the form
        // `{{#this.foo}}...{{/this.foo}}`, resolve the value of `foo`, and
        // replace it on the stack with the result of properly
        // invoking blockHelperMissing.
        blockValue: function blockValue(name) {
            var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
                params = [this.contextName(0)];
            this.setupHelperArgs(name, 0, params);

            var blockName = this.popStack();
            params.splice(1, 0, blockName);

            this.push(this.source.functionCall(blockHelperMissing, 'call', params));
        },

        // [ambiguousBlockValue]
        //
        // On stack, before: hash, inverse, program, value
        // Compiler value, before: lastHelper=value of last found helper, if any
        // On stack, after, if no lastHelper: same as [blockValue]
        // On stack, after, if lastHelper: value
        ambiguousBlockValue: function ambiguousBlockValue() {
            // We're being a bit cheeky and reusing the options value from the prior exec
            var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
                params = [this.contextName(0)];
            this.setupHelperArgs('', 0, params, true);

            this.flushInline();

            var current = this.topStack();
            params.splice(1, 0, current);

            this.pushSource(['if (!', this.lastHelper, ') { ', current, ' = ', this.source.functionCall(blockHelperMissing, 'call', params), '}']);
        },

        // [appendContent]
        //
        // On stack, before: ...
        // On stack, after: ...
        //
        // Appends the string value of `content` to the current buffer
        appendContent: function appendContent(content) {
            if (this.pendingContent) {
                content = this.pendingContent + content;
            } else {
                this.pendingLocation = this.source.currentLocation;
            }

            this.pendingContent = content;
        },

        // [append]
        //
        // On stack, before: value, ...
        // On stack, after: ...
        //
        // Coerces `value` to a String and appends it to the current buffer.
        //
        // If `value` is truthy, or 0, it is coerced into a string and appended
        // Otherwise, the empty string is appended
        append: function append() {
            if (this.isInline()) {
                this.replaceStack(function (current) {
                    return [' != null ? ', current, ' : ""'];
                });

                this.pushSource(this.appendToBuffer(this.popStack()));
            } else {
                var local = this.popStack();
                this.pushSource(['if (', local, ' != null) { ', this.appendToBuffer(local, undefined, true), ' }']);
                if (this.environment.isSimple) {
                    this.pushSource(['else { ', this.appendToBuffer("''", undefined, true), ' }']);
                }
            }
        },

        // [appendEscaped]
        //
        // On stack, before: value, ...
        // On stack, after: ...
        //
        // Escape `value` and append it to the buffer
        appendEscaped: function appendEscaped() {
            this.pushSource(this.appendToBuffer([this.aliasable('container.escapeExpression'), '(', this.popStack(), ')']));
        },

        // [getContext]
        //
        // On stack, before: ...
        // On stack, after: ...
        // Compiler value, after: lastContext=depth
        //
        // Set the value of the `lastContext` compiler value to the depth
        getContext: function getContext(depth) {
            this.lastContext = depth;
        },

        // [pushContext]
        //
        // On stack, before: ...
        // On stack, after: currentContext, ...
        //
        // Pushes the value of the current context onto the stack.
        pushContext: function pushContext() {
            this.pushStackLiteral(this.contextName(this.lastContext));
        },

        // [lookupOnContext]
        //
        // On stack, before: ...
        // On stack, after: currentContext[name], ...
        //
        // Looks up the value of `name` on the current context and pushes
        // it onto the stack.
        lookupOnContext: function lookupOnContext(parts, falsy, strict, scoped) {
            var i = 0;

            if (!scoped && this.options.compat && !this.lastContext) {
                // The depthed query is expected to handle the undefined logic for the root level that
                // is implemented below, so we evaluate that directly in compat mode
                this.push(this.depthedLookup(parts[i++]));
            } else {
                this.pushContext();
            }

            this.resolvePath('context', parts, i, falsy, strict);
        },

        // [lookupBlockParam]
        //
        // On stack, before: ...
        // On stack, after: blockParam[name], ...
        //
        // Looks up the value of `parts` on the given block param and pushes
        // it onto the stack.
        lookupBlockParam: function lookupBlockParam(blockParamId, parts) {
            this.useBlockParams = true;

            this.push(['blockParams[', blockParamId[0], '][', blockParamId[1], ']']);
            this.resolvePath('context', parts, 1);
        },

        // [lookupData]
        //
        // On stack, before: ...
        // On stack, after: data, ...
        //
        // Push the data lookup operator
        lookupData: function lookupData(depth, parts, strict) {
            if (!depth) {
                this.pushStackLiteral('data');
            } else {
                this.pushStackLiteral('container.data(data, ' + depth + ')');
            }

            this.resolvePath('data', parts, 0, true, strict);
        },

        resolvePath: function resolvePath(type, parts, i, falsy, strict) {
            // istanbul ignore next

            var _this = this;

            if (this.options.strict || this.options.assumeObjects) {
                this.push(strictLookup(this.options.strict && strict, this, parts, type));
                return;
            }

            var len = parts.length;
            for (; i < len; i++) {
                /* eslint-disable no-loop-func */
                this.replaceStack(function (current) {
                    var lookup = _this.nameLookup(current, parts[i], type);
                    // We want to ensure that zero and false are handled properly if the context (falsy flag)
                    // needs to have the special handling for these values.
                    if (!falsy) {
                        return [' != null ? ', lookup, ' : ', current];
                    } else {
                        // Otherwise we can use generic falsy handling
                        return [' && ', lookup];
                    }
                });
                /* eslint-enable no-loop-func */
            }
        },

        // [resolvePossibleLambda]
        //
        // On stack, before: value, ...
        // On stack, after: resolved value, ...
        //
        // If the `value` is a lambda, replace it on the stack by
        // the return value of the lambda
        resolvePossibleLambda: function resolvePossibleLambda() {
            this.push([this.aliasable('container.lambda'), '(', this.popStack(), ', ', this.contextName(0), ')']);
        },

        // [pushStringParam]
        //
        // On stack, before: ...
        // On stack, after: string, currentContext, ...
        //
        // This opcode is designed for use in string mode, which
        // provides the string value of a parameter along with its
        // depth rather than resolving it immediately.
        pushStringParam: function pushStringParam(string, type) {
            this.pushContext();
            this.pushString(type);

            // If it's a subexpression, the string result
            // will be pushed after this opcode.
            if (type !== 'SubExpression') {
                if (typeof string === 'string') {
                    this.pushString(string);
                } else {
                    this.pushStackLiteral(string);
                }
            }
        },

        emptyHash: function emptyHash(omitEmpty) {
            if (this.trackIds) {
                this.push('{}'); // hashIds
            }
            if (this.stringParams) {
                this.push('{}'); // hashContexts
                this.push('{}'); // hashTypes
            }
            this.pushStackLiteral(omitEmpty ? 'undefined' : '{}');
        },
        pushHash: function pushHash() {
            if (this.hash) {
                this.hashes.push(this.hash);
            }
            this.hash = { values: [], types: [], contexts: [], ids: [] };
        },
        popHash: function popHash() {
            var hash = this.hash;
            this.hash = this.hashes.pop();

            if (this.trackIds) {
                this.push(this.objectLiteral(hash.ids));
            }
            if (this.stringParams) {
                this.push(this.objectLiteral(hash.contexts));
                this.push(this.objectLiteral(hash.types));
            }

            this.push(this.objectLiteral(hash.values));
        },

        // [pushString]
        //
        // On stack, before: ...
        // On stack, after: quotedString(string), ...
        //
        // Push a quoted version of `string` onto the stack
        pushString: function pushString(string) {
            this.pushStackLiteral(this.quotedString(string));
        },

        // [pushLiteral]
        //
        // On stack, before: ...
        // On stack, after: value, ...
        //
        // Pushes a value onto the stack. This operation prevents
        // the compiler from creating a temporary variable to hold
        // it.
        pushLiteral: function pushLiteral(value) {
            this.pushStackLiteral(value);
        },

        // [pushProgram]
        //
        // On stack, before: ...
        // On stack, after: program(guid), ...
        //
        // Push a program expression onto the stack. This takes
        // a compile-time guid and converts it into a runtime-accessible
        // expression.
        pushProgram: function pushProgram(guid) {
            if (guid != null) {
                this.pushStackLiteral(this.programExpression(guid));
            } else {
                this.pushStackLiteral(null);
            }
        },

        // [registerDecorator]
        //
        // On stack, before: hash, program, params..., ...
        // On stack, after: ...
        //
        // Pops off the decorator's parameters, invokes the decorator,
        // and inserts the decorator into the decorators list.
        registerDecorator: function registerDecorator(paramSize, name) {
            var foundDecorator = this.nameLookup('decorators', name, 'decorator'),
                options = this.setupHelperArgs(name, paramSize);

            this.decorators.push(['fn = ', this.decorators.functionCall(foundDecorator, '', ['fn', 'props', 'container', options]), ' || fn;']);
        },

        // [invokeHelper]
        //
        // On stack, before: hash, inverse, program, params..., ...
        // On stack, after: result of helper invocation
        //
        // Pops off the helper's parameters, invokes the helper,
        // and pushes the helper's return value onto the stack.
        //
        // If the helper is not found, `helperMissing` is called.
        invokeHelper: function invokeHelper(paramSize, name, isSimple) {
            var nonHelper = this.popStack(),
                helper = this.setupHelper(paramSize, name),
                simple = isSimple ? [helper.name, ' || '] : '';

            var lookup = ['('].concat(simple, nonHelper);
            if (!this.options.strict) {
                lookup.push(' || ', this.aliasable('helpers.helperMissing'));
            }
            lookup.push(')');

            this.push(this.source.functionCall(lookup, 'call', helper.callParams));
        },

        // [invokeKnownHelper]
        //
        // On stack, before: hash, inverse, program, params..., ...
        // On stack, after: result of helper invocation
        //
        // This operation is used when the helper is known to exist,
        // so a `helperMissing` fallback is not required.
        invokeKnownHelper: function invokeKnownHelper(paramSize, name) {
            var helper = this.setupHelper(paramSize, name);
            this.push(this.source.functionCall(helper.name, 'call', helper.callParams));
        },

        // [invokeAmbiguous]
        //
        // On stack, before: hash, inverse, program, params..., ...
        // On stack, after: result of disambiguation
        //
        // This operation is used when an expression like `{{foo}}`
        // is provided, but we don't know at compile-time whether it
        // is a helper or a path.
        //
        // This operation emits more code than the other options,
        // and can be avoided by passing the `knownHelpers` and
        // `knownHelpersOnly` flags at compile-time.
        invokeAmbiguous: function invokeAmbiguous(name, helperCall) {
            this.useRegister('helper');

            var nonHelper = this.popStack();

            this.emptyHash();
            var helper = this.setupHelper(0, name, helperCall);

            var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');

            var lookup = ['(', '(helper = ', helperName, ' || ', nonHelper, ')'];
            if (!this.options.strict) {
                lookup[0] = '(helper = ';
                lookup.push(' != null ? helper : ', this.aliasable('helpers.helperMissing'));
            }

            this.push(['(', lookup, helper.paramsInit ? ['),(', helper.paramsInit] : [], '),', '(typeof helper === ', this.aliasable('"function"'), ' ? ', this.source.functionCall('helper', 'call', helper.callParams), ' : helper))']);
        },

        // [invokePartial]
        //
        // On stack, before: context, ...
        // On stack after: result of partial invocation
        //
        // This operation pops off a context, invokes a partial with that context,
        // and pushes the result of the invocation back.
        invokePartial: function invokePartial(isDynamic, name, indent) {
            var params = [],
                options = this.setupParams(name, 1, params);

            if (isDynamic) {
                name = this.popStack();
                delete options.name;
            }

            if (indent) {
                options.indent = JSON.stringify(indent);
            }
            options.helpers = 'helpers';
            options.partials = 'partials';
            options.decorators = 'container.decorators';

            if (!isDynamic) {
                params.unshift(this.nameLookup('partials', name, 'partial'));
            } else {
                params.unshift(name);
            }

            if (this.options.compat) {
                options.depths = 'depths';
            }
            options = this.objectLiteral(options);
            params.push(options);

            this.push(this.source.functionCall('container.invokePartial', '', params));
        },

        // [assignToHash]
        //
        // On stack, before: value, ..., hash, ...
        // On stack, after: ..., hash, ...
        //
        // Pops a value off the stack and assigns it to the current hash
        assignToHash: function assignToHash(key) {
            var value = this.popStack(),
                context = undefined,
                type = undefined,
                id = undefined;

            if (this.trackIds) {
                id = this.popStack();
            }
            if (this.stringParams) {
                type = this.popStack();
                context = this.popStack();
            }

            var hash = this.hash;
            if (context) {
                hash.contexts[key] = context;
            }
            if (type) {
                hash.types[key] = type;
            }
            if (id) {
                hash.ids[key] = id;
            }
            hash.values[key] = value;
        },

        pushId: function pushId(type, name, child) {
            if (type === 'BlockParam') {
                this.pushStackLiteral('blockParams[' + name[0] + '].path[' + name[1] + ']' + (child ? ' + ' + JSON.stringify('.' + child) : ''));
            } else if (type === 'PathExpression') {
                this.pushString(name);
            } else if (type === 'SubExpression') {
                this.pushStackLiteral('true');
            } else {
                this.pushStackLiteral('null');
            }
        },

        // HELPERS

        compiler: JavaScriptCompiler,

        compileChildren: function compileChildren(environment, options) {
            var children = environment.children,
                child = undefined,
                compiler = undefined;

            for (var i = 0, l = children.length; i < l; i++) {
                child = children[i];
                compiler = new this.compiler(); // eslint-disable-line new-cap

                var index = this.matchExistingProgram(child);

                if (index == null) {
                    this.context.programs.push(''); // Placeholder to prevent name conflicts for nested children
                    index = this.context.programs.length;
                    child.index = index;
                    child.name = 'program' + index;
                    this.context.programs[index] = compiler.compile(child, options, this.context, !this.precompile);
                    this.context.decorators[index] = compiler.decorators;
                    this.context.environments[index] = child;

                    this.useDepths = this.useDepths || compiler.useDepths;
                    this.useBlockParams = this.useBlockParams || compiler.useBlockParams;
                } else {
                    child.index = index;
                    child.name = 'program' + index;

                    this.useDepths = this.useDepths || child.useDepths;
                    this.useBlockParams = this.useBlockParams || child.useBlockParams;
                }
            }
        },
        matchExistingProgram: function matchExistingProgram(child) {
            for (var i = 0, len = this.context.environments.length; i < len; i++) {
                var environment = this.context.environments[i];
                if (environment && environment.equals(child)) {
                    return i;
                }
            }
        },

        programExpression: function programExpression(guid) {
            var child = this.environment.children[guid],
                programParams = [child.index, 'data', child.blockParams];

            if (this.useBlockParams || this.useDepths) {
                programParams.push('blockParams');
            }
            if (this.useDepths) {
                programParams.push('depths');
            }

            return 'container.program(' + programParams.join(', ') + ')';
        },

        useRegister: function useRegister(name) {
            if (!this.registers[name]) {
                this.registers[name] = true;
                this.registers.list.push(name);
            }
        },

        push: function push(expr) {
            if (!(expr instanceof Literal)) {
                expr = this.source.wrap(expr);
            }

            this.inlineStack.push(expr);
            return expr;
        },

        pushStackLiteral: function pushStackLiteral(item) {
            this.push(new Literal(item));
        },

        pushSource: function pushSource(source) {
            if (this.pendingContent) {
                this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));
                this.pendingContent = undefined;
            }

            if (source) {
                this.source.push(source);
            }
        },

        replaceStack: function replaceStack(callback) {
            var prefix = ['('],
                stack = undefined,
                createdStack = undefined,
                usedLiteral = undefined;

            /* istanbul ignore next */
            if (!this.isInline()) {
                throw new _exception2['default']('replaceStack on non-inline');
            }

            // We want to merge the inline statement into the replacement statement via ','
            var top = this.popStack(true);

            if (top instanceof Literal) {
                // Literals do not need to be inlined
                stack = [top.value];
                prefix = ['(', stack];
                usedLiteral = true;
            } else {
                // Get or create the current stack name for use by the inline
                createdStack = true;
                var _name = this.incrStack();

                prefix = ['((', this.push(_name), ' = ', top, ')'];
                stack = this.topStack();
            }

            var item = callback.call(this, stack);

            if (!usedLiteral) {
                this.popStack();
            }
            if (createdStack) {
                this.stackSlot--;
            }
            this.push(prefix.concat(item, ')'));
        },

        incrStack: function incrStack() {
            this.stackSlot++;
            if (this.stackSlot > this.stackVars.length) {
                this.stackVars.push('stack' + this.stackSlot);
            }
            return this.topStackName();
        },
        topStackName: function topStackName() {
            return 'stack' + this.stackSlot;
        },
        flushInline: function flushInline() {
            var inlineStack = this.inlineStack;
            this.inlineStack = [];
            for (var i = 0, len = inlineStack.length; i < len; i++) {
                var entry = inlineStack[i];
                /* istanbul ignore if */
                if (entry instanceof Literal) {
                    this.compileStack.push(entry);
                } else {
                    var stack = this.incrStack();
                    this.pushSource([stack, ' = ', entry, ';']);
                    this.compileStack.push(stack);
                }
            }
        },
        isInline: function isInline() {
            return this.inlineStack.length;
        },

        popStack: function popStack(wrapped) {
            var inline = this.isInline(),
                item = (inline ? this.inlineStack : this.compileStack).pop();

            if (!wrapped && item instanceof Literal) {
                return item.value;
            } else {
                if (!inline) {
                    /* istanbul ignore next */
                    if (!this.stackSlot) {
                        throw new _exception2['default']('Invalid stack pop');
                    }
                    this.stackSlot--;
                }
                return item;
            }
        },

        topStack: function topStack() {
            var stack = this.isInline() ? this.inlineStack : this.compileStack,
                item = stack[stack.length - 1];

            /* istanbul ignore if */
            if (item instanceof Literal) {
                return item.value;
            } else {
                return item;
            }
        },

        contextName: function contextName(context) {
            if (this.useDepths && context) {
                return 'depths[' + context + ']';
            } else {
                return 'depth' + context;
            }
        },

        quotedString: function quotedString(str) {
            return this.source.quotedString(str);
        },

        objectLiteral: function objectLiteral(obj) {
            return this.source.objectLiteral(obj);
        },

        aliasable: function aliasable(name) {
            var ret = this.aliases[name];
            if (ret) {
                ret.referenceCount++;
                return ret;
            }

            ret = this.aliases[name] = this.source.wrap(name);
            ret.aliasable = true;
            ret.referenceCount = 1;

            return ret;
        },

        setupHelper: function setupHelper(paramSize, name, blockHelper) {
            var params = [],
                paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper);
            var foundHelper = this.nameLookup('helpers', name, 'helper'),
                callContext = this.aliasable(this.contextName(0) + ' != null ? ' + this.contextName(0) + ' : {}');

            return {
                params: params,
                paramsInit: paramsInit,
                name: foundHelper,
                callParams: [callContext].concat(params)
            };
        },

        setupParams: function setupParams(helper, paramSize, params) {
            var options = {},
                contexts = [],
                types = [],
                ids = [],
                objectArgs = !params,
                param = undefined;

            if (objectArgs) {
                params = [];
            }

            options.name = this.quotedString(helper);
            options.hash = this.popStack();

            if (this.trackIds) {
                options.hashIds = this.popStack();
            }
            if (this.stringParams) {
                options.hashTypes = this.popStack();
                options.hashContexts = this.popStack();
            }

            var inverse = this.popStack(),
                program = this.popStack();

            // Avoid setting fn and inverse if neither are set. This allows
            // helpers to do a check for `if (options.fn)`
            if (program || inverse) {
                options.fn = program || 'container.noop';
                options.inverse = inverse || 'container.noop';
            }

            // The parameters go on to the stack in order (making sure that they are evaluated in order)
            // so we need to pop them off the stack in reverse order
            var i = paramSize;
            while (i--) {
                param = this.popStack();
                params[i] = param;

                if (this.trackIds) {
                    ids[i] = this.popStack();
                }
                if (this.stringParams) {
                    types[i] = this.popStack();
                    contexts[i] = this.popStack();
                }
            }

            if (objectArgs) {
                options.args = this.source.generateArray(params);
            }

            if (this.trackIds) {
                options.ids = this.source.generateArray(ids);
            }
            if (this.stringParams) {
                options.types = this.source.generateArray(types);
                options.contexts = this.source.generateArray(contexts);
            }

            if (this.options.data) {
                options.data = 'data';
            }
            if (this.useBlockParams) {
                options.blockParams = 'blockParams';
            }
            return options;
        },

        setupHelperArgs: function setupHelperArgs(helper, paramSize, params, useRegister) {
            var options = this.setupParams(helper, paramSize, params);
            options = this.objectLiteral(options);
            if (useRegister) {
                this.useRegister('options');
                params.push('options');
                return ['options=', options];
            } else if (params) {
                params.push(options);
                return '';
            } else {
                return options;
            }
        }
    };

    (function () {
        var reservedWords = ('break else new var' + ' case finally return void' + ' catch for switch while' + ' continue function this with' + ' default if throw' + ' delete in try' + ' do instanceof typeof' + ' abstract enum int short' + ' boolean export interface static' + ' byte extends long super' + ' char final native synchronized' + ' class float package throws' + ' const goto private transient' + ' debugger implements protected volatile' + ' double import public let yield await' + ' null true false').split(' ');

        var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};

        for (var i = 0, l = reservedWords.length; i < l; i++) {
            compilerWords[reservedWords[i]] = true;
        }
    })();

    JavaScriptCompiler.isValidJavaScriptVariableName = function (name) {
        return !JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);
    };

    function strictLookup(requireTerminal, compiler, parts, type) {
        var stack = compiler.popStack(),
            i = 0,
            len = parts.length;
        if (requireTerminal) {
            len--;
        }

        for (; i < len; i++) {
            stack = compiler.nameLookup(stack, parts[i], type);
        }

        if (requireTerminal) {
            return [compiler.aliasable('container.strict'), '(', stack, ', ', compiler.quotedString(parts[i]), ')'];
        } else {
            return stack;
        }
    }

    exports['default'] = JavaScriptCompiler;
    module.exports = exports['default'];


},{"../base":333,"../exception":346,"../utils":359,"./code-gen":336}],340:[function(require,module,exports){
    /* istanbul ignore next */
    /* Jison generated parser */
    "use strict";

    var handlebars = (function () {
        var parser = { trace: function trace() {},
            yy: {},
            symbols_: { "error": 2, "root": 3, "program": 4, "EOF": 5, "program_repetition0": 6, "statement": 7, "mustache": 8, "block": 9, "rawBlock": 10, "partial": 11, "partialBlock": 12, "content": 13, "COMMENT": 14, "CONTENT": 15, "openRawBlock": 16, "rawBlock_repetition_plus0": 17, "END_RAW_BLOCK": 18, "OPEN_RAW_BLOCK": 19, "helperName": 20, "openRawBlock_repetition0": 21, "openRawBlock_option0": 22, "CLOSE_RAW_BLOCK": 23, "openBlock": 24, "block_option0": 25, "closeBlock": 26, "openInverse": 27, "block_option1": 28, "OPEN_BLOCK": 29, "openBlock_repetition0": 30, "openBlock_option0": 31, "openBlock_option1": 32, "CLOSE": 33, "OPEN_INVERSE": 34, "openInverse_repetition0": 35, "openInverse_option0": 36, "openInverse_option1": 37, "openInverseChain": 38, "OPEN_INVERSE_CHAIN": 39, "openInverseChain_repetition0": 40, "openInverseChain_option0": 41, "openInverseChain_option1": 42, "inverseAndProgram": 43, "INVERSE": 44, "inverseChain": 45, "inverseChain_option0": 46, "OPEN_ENDBLOCK": 47, "OPEN": 48, "mustache_repetition0": 49, "mustache_option0": 50, "OPEN_UNESCAPED": 51, "mustache_repetition1": 52, "mustache_option1": 53, "CLOSE_UNESCAPED": 54, "OPEN_PARTIAL": 55, "partialName": 56, "partial_repetition0": 57, "partial_option0": 58, "openPartialBlock": 59, "OPEN_PARTIAL_BLOCK": 60, "openPartialBlock_repetition0": 61, "openPartialBlock_option0": 62, "param": 63, "sexpr": 64, "OPEN_SEXPR": 65, "sexpr_repetition0": 66, "sexpr_option0": 67, "CLOSE_SEXPR": 68, "hash": 69, "hash_repetition_plus0": 70, "hashSegment": 71, "ID": 72, "EQUALS": 73, "blockParams": 74, "OPEN_BLOCK_PARAMS": 75, "blockParams_repetition_plus0": 76, "CLOSE_BLOCK_PARAMS": 77, "path": 78, "dataName": 79, "STRING": 80, "NUMBER": 81, "BOOLEAN": 82, "UNDEFINED": 83, "NULL": 84, "DATA": 85, "pathSegments": 86, "SEP": 87, "$accept": 0, "$end": 1 },
            terminals_: { 2: "error", 5: "EOF", 14: "COMMENT", 15: "CONTENT", 18: "END_RAW_BLOCK", 19: "OPEN_RAW_BLOCK", 23: "CLOSE_RAW_BLOCK", 29: "OPEN_BLOCK", 33: "CLOSE", 34: "OPEN_INVERSE", 39: "OPEN_INVERSE_CHAIN", 44: "INVERSE", 47: "OPEN_ENDBLOCK", 48: "OPEN", 51: "OPEN_UNESCAPED", 54: "CLOSE_UNESCAPED", 55: "OPEN_PARTIAL", 60: "OPEN_PARTIAL_BLOCK", 65: "OPEN_SEXPR", 68: "CLOSE_SEXPR", 72: "ID", 73: "EQUALS", 75: "OPEN_BLOCK_PARAMS", 77: "CLOSE_BLOCK_PARAMS", 80: "STRING", 81: "NUMBER", 82: "BOOLEAN", 83: "UNDEFINED", 84: "NULL", 85: "DATA", 87: "SEP" },
            productions_: [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [13, 1], [10, 3], [16, 5], [9, 4], [9, 4], [24, 6], [27, 6], [38, 6], [43, 2], [45, 3], [45, 1], [26, 3], [8, 5], [8, 5], [11, 5], [12, 3], [59, 5], [63, 1], [63, 1], [64, 5], [69, 1], [71, 3], [74, 3], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [56, 1], [56, 1], [79, 2], [78, 1], [86, 3], [86, 1], [6, 0], [6, 2], [17, 1], [17, 2], [21, 0], [21, 2], [22, 0], [22, 1], [25, 0], [25, 1], [28, 0], [28, 1], [30, 0], [30, 2], [31, 0], [31, 1], [32, 0], [32, 1], [35, 0], [35, 2], [36, 0], [36, 1], [37, 0], [37, 1], [40, 0], [40, 2], [41, 0], [41, 1], [42, 0], [42, 1], [46, 0], [46, 1], [49, 0], [49, 2], [50, 0], [50, 1], [52, 0], [52, 2], [53, 0], [53, 1], [57, 0], [57, 2], [58, 0], [58, 1], [61, 0], [61, 2], [62, 0], [62, 1], [66, 0], [66, 2], [67, 0], [67, 1], [70, 1], [70, 2], [76, 1], [76, 2]],
            performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$
                                              /**/) {

                var $0 = $$.length - 1;
                switch (yystate) {
                    case 1:
                        return $$[$0 - 1];
                        break;
                    case 2:
                        this.$ = yy.prepareProgram($$[$0]);
                        break;
                    case 3:
                        this.$ = $$[$0];
                        break;
                    case 4:
                        this.$ = $$[$0];
                        break;
                    case 5:
                        this.$ = $$[$0];
                        break;
                    case 6:
                        this.$ = $$[$0];
                        break;
                    case 7:
                        this.$ = $$[$0];
                        break;
                    case 8:
                        this.$ = $$[$0];
                        break;
                    case 9:
                        this.$ = {
                            type: 'CommentStatement',
                            value: yy.stripComment($$[$0]),
                            strip: yy.stripFlags($$[$0], $$[$0]),
                            loc: yy.locInfo(this._$)
                        };

                        break;
                    case 10:
                        this.$ = {
                            type: 'ContentStatement',
                            original: $$[$0],
                            value: $$[$0],
                            loc: yy.locInfo(this._$)
                        };

                        break;
                    case 11:
                        this.$ = yy.prepareRawBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                        break;
                    case 12:
                        this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1] };
                        break;
                    case 13:
                        this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);
                        break;
                    case 14:
                        this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);
                        break;
                    case 15:
                        this.$ = { open: $$[$0 - 5], path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
                        break;
                    case 16:
                        this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
                        break;
                    case 17:
                        this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
                        break;
                    case 18:
                        this.$ = { strip: yy.stripFlags($$[$0 - 1], $$[$0 - 1]), program: $$[$0] };
                        break;
                    case 19:
                        var inverse = yy.prepareBlock($$[$0 - 2], $$[$0 - 1], $$[$0], $$[$0], false, this._$),
                            program = yy.prepareProgram([inverse], $$[$0 - 1].loc);
                        program.chained = true;

                        this.$ = { strip: $$[$0 - 2].strip, program: program, chain: true };

                        break;
                    case 20:
                        this.$ = $$[$0];
                        break;
                    case 21:
                        this.$ = { path: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 2], $$[$0]) };
                        break;
                    case 22:
                        this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
                        break;
                    case 23:
                        this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
                        break;
                    case 24:
                        this.$ = {
                            type: 'PartialStatement',
                            name: $$[$0 - 3],
                            params: $$[$0 - 2],
                            hash: $$[$0 - 1],
                            indent: '',
                            strip: yy.stripFlags($$[$0 - 4], $$[$0]),
                            loc: yy.locInfo(this._$)
                        };

                        break;
                    case 25:
                        this.$ = yy.preparePartialBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                        break;
                    case 26:
                        this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 4], $$[$0]) };
                        break;
                    case 27:
                        this.$ = $$[$0];
                        break;
                    case 28:
                        this.$ = $$[$0];
                        break;
                    case 29:
                        this.$ = {
                            type: 'SubExpression',
                            path: $$[$0 - 3],
                            params: $$[$0 - 2],
                            hash: $$[$0 - 1],
                            loc: yy.locInfo(this._$)
                        };

                        break;
                    case 30:
                        this.$ = { type: 'Hash', pairs: $$[$0], loc: yy.locInfo(this._$) };
                        break;
                    case 31:
                        this.$ = { type: 'HashPair', key: yy.id($$[$0 - 2]), value: $$[$0], loc: yy.locInfo(this._$) };
                        break;
                    case 32:
                        this.$ = yy.id($$[$0 - 1]);
                        break;
                    case 33:
                        this.$ = $$[$0];
                        break;
                    case 34:
                        this.$ = $$[$0];
                        break;
                    case 35:
                        this.$ = { type: 'StringLiteral', value: $$[$0], original: $$[$0], loc: yy.locInfo(this._$) };
                        break;
                    case 36:
                        this.$ = { type: 'NumberLiteral', value: Number($$[$0]), original: Number($$[$0]), loc: yy.locInfo(this._$) };
                        break;
                    case 37:
                        this.$ = { type: 'BooleanLiteral', value: $$[$0] === 'true', original: $$[$0] === 'true', loc: yy.locInfo(this._$) };
                        break;
                    case 38:
                        this.$ = { type: 'UndefinedLiteral', original: undefined, value: undefined, loc: yy.locInfo(this._$) };
                        break;
                    case 39:
                        this.$ = { type: 'NullLiteral', original: null, value: null, loc: yy.locInfo(this._$) };
                        break;
                    case 40:
                        this.$ = $$[$0];
                        break;
                    case 41:
                        this.$ = $$[$0];
                        break;
                    case 42:
                        this.$ = yy.preparePath(true, $$[$0], this._$);
                        break;
                    case 43:
                        this.$ = yy.preparePath(false, $$[$0], this._$);
                        break;
                    case 44:
                        $$[$0 - 2].push({ part: yy.id($$[$0]), original: $$[$0], separator: $$[$0 - 1] });this.$ = $$[$0 - 2];
                        break;
                    case 45:
                        this.$ = [{ part: yy.id($$[$0]), original: $$[$0] }];
                        break;
                    case 46:
                        this.$ = [];
                        break;
                    case 47:
                        $$[$0 - 1].push($$[$0]);
                        break;
                    case 48:
                        this.$ = [$$[$0]];
                        break;
                    case 49:
                        $$[$0 - 1].push($$[$0]);
                        break;
                    case 50:
                        this.$ = [];
                        break;
                    case 51:
                        $$[$0 - 1].push($$[$0]);
                        break;
                    case 58:
                        this.$ = [];
                        break;
                    case 59:
                        $$[$0 - 1].push($$[$0]);
                        break;
                    case 64:
                        this.$ = [];
                        break;
                    case 65:
                        $$[$0 - 1].push($$[$0]);
                        break;
                    case 70:
                        this.$ = [];
                        break;
                    case 71:
                        $$[$0 - 1].push($$[$0]);
                        break;
                    case 78:
                        this.$ = [];
                        break;
                    case 79:
                        $$[$0 - 1].push($$[$0]);
                        break;
                    case 82:
                        this.$ = [];
                        break;
                    case 83:
                        $$[$0 - 1].push($$[$0]);
                        break;
                    case 86:
                        this.$ = [];
                        break;
                    case 87:
                        $$[$0 - 1].push($$[$0]);
                        break;
                    case 90:
                        this.$ = [];
                        break;
                    case 91:
                        $$[$0 - 1].push($$[$0]);
                        break;
                    case 94:
                        this.$ = [];
                        break;
                    case 95:
                        $$[$0 - 1].push($$[$0]);
                        break;
                    case 98:
                        this.$ = [$$[$0]];
                        break;
                    case 99:
                        $$[$0 - 1].push($$[$0]);
                        break;
                    case 100:
                        this.$ = [$$[$0]];
                        break;
                    case 101:
                        $$[$0 - 1].push($$[$0]);
                        break;
                }
            },
            table: [{ 3: 1, 4: 2, 5: [2, 46], 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 1: [3] }, { 5: [1, 4] }, { 5: [2, 2], 7: 5, 8: 6, 9: 7, 10: 8, 11: 9, 12: 10, 13: 11, 14: [1, 12], 15: [1, 20], 16: 17, 19: [1, 23], 24: 15, 27: 16, 29: [1, 21], 34: [1, 22], 39: [2, 2], 44: [2, 2], 47: [2, 2], 48: [1, 13], 51: [1, 14], 55: [1, 18], 59: 19, 60: [1, 24] }, { 1: [2, 1] }, { 5: [2, 47], 14: [2, 47], 15: [2, 47], 19: [2, 47], 29: [2, 47], 34: [2, 47], 39: [2, 47], 44: [2, 47], 47: [2, 47], 48: [2, 47], 51: [2, 47], 55: [2, 47], 60: [2, 47] }, { 5: [2, 3], 14: [2, 3], 15: [2, 3], 19: [2, 3], 29: [2, 3], 34: [2, 3], 39: [2, 3], 44: [2, 3], 47: [2, 3], 48: [2, 3], 51: [2, 3], 55: [2, 3], 60: [2, 3] }, { 5: [2, 4], 14: [2, 4], 15: [2, 4], 19: [2, 4], 29: [2, 4], 34: [2, 4], 39: [2, 4], 44: [2, 4], 47: [2, 4], 48: [2, 4], 51: [2, 4], 55: [2, 4], 60: [2, 4] }, { 5: [2, 5], 14: [2, 5], 15: [2, 5], 19: [2, 5], 29: [2, 5], 34: [2, 5], 39: [2, 5], 44: [2, 5], 47: [2, 5], 48: [2, 5], 51: [2, 5], 55: [2, 5], 60: [2, 5] }, { 5: [2, 6], 14: [2, 6], 15: [2, 6], 19: [2, 6], 29: [2, 6], 34: [2, 6], 39: [2, 6], 44: [2, 6], 47: [2, 6], 48: [2, 6], 51: [2, 6], 55: [2, 6], 60: [2, 6] }, { 5: [2, 7], 14: [2, 7], 15: [2, 7], 19: [2, 7], 29: [2, 7], 34: [2, 7], 39: [2, 7], 44: [2, 7], 47: [2, 7], 48: [2, 7], 51: [2, 7], 55: [2, 7], 60: [2, 7] }, { 5: [2, 8], 14: [2, 8], 15: [2, 8], 19: [2, 8], 29: [2, 8], 34: [2, 8], 39: [2, 8], 44: [2, 8], 47: [2, 8], 48: [2, 8], 51: [2, 8], 55: [2, 8], 60: [2, 8] }, { 5: [2, 9], 14: [2, 9], 15: [2, 9], 19: [2, 9], 29: [2, 9], 34: [2, 9], 39: [2, 9], 44: [2, 9], 47: [2, 9], 48: [2, 9], 51: [2, 9], 55: [2, 9], 60: [2, 9] }, { 20: 25, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 36, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 37, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 4: 38, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 13: 40, 15: [1, 20], 17: 39 }, { 20: 42, 56: 41, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 45, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 5: [2, 10], 14: [2, 10], 15: [2, 10], 18: [2, 10], 19: [2, 10], 29: [2, 10], 34: [2, 10], 39: [2, 10], 44: [2, 10], 47: [2, 10], 48: [2, 10], 51: [2, 10], 55: [2, 10], 60: [2, 10] }, { 20: 46, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 47, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 48, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 42, 56: 49, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [2, 78], 49: 50, 65: [2, 78], 72: [2, 78], 80: [2, 78], 81: [2, 78], 82: [2, 78], 83: [2, 78], 84: [2, 78], 85: [2, 78] }, { 23: [2, 33], 33: [2, 33], 54: [2, 33], 65: [2, 33], 68: [2, 33], 72: [2, 33], 75: [2, 33], 80: [2, 33], 81: [2, 33], 82: [2, 33], 83: [2, 33], 84: [2, 33], 85: [2, 33] }, { 23: [2, 34], 33: [2, 34], 54: [2, 34], 65: [2, 34], 68: [2, 34], 72: [2, 34], 75: [2, 34], 80: [2, 34], 81: [2, 34], 82: [2, 34], 83: [2, 34], 84: [2, 34], 85: [2, 34] }, { 23: [2, 35], 33: [2, 35], 54: [2, 35], 65: [2, 35], 68: [2, 35], 72: [2, 35], 75: [2, 35], 80: [2, 35], 81: [2, 35], 82: [2, 35], 83: [2, 35], 84: [2, 35], 85: [2, 35] }, { 23: [2, 36], 33: [2, 36], 54: [2, 36], 65: [2, 36], 68: [2, 36], 72: [2, 36], 75: [2, 36], 80: [2, 36], 81: [2, 36], 82: [2, 36], 83: [2, 36], 84: [2, 36], 85: [2, 36] }, { 23: [2, 37], 33: [2, 37], 54: [2, 37], 65: [2, 37], 68: [2, 37], 72: [2, 37], 75: [2, 37], 80: [2, 37], 81: [2, 37], 82: [2, 37], 83: [2, 37], 84: [2, 37], 85: [2, 37] }, { 23: [2, 38], 33: [2, 38], 54: [2, 38], 65: [2, 38], 68: [2, 38], 72: [2, 38], 75: [2, 38], 80: [2, 38], 81: [2, 38], 82: [2, 38], 83: [2, 38], 84: [2, 38], 85: [2, 38] }, { 23: [2, 39], 33: [2, 39], 54: [2, 39], 65: [2, 39], 68: [2, 39], 72: [2, 39], 75: [2, 39], 80: [2, 39], 81: [2, 39], 82: [2, 39], 83: [2, 39], 84: [2, 39], 85: [2, 39] }, { 23: [2, 43], 33: [2, 43], 54: [2, 43], 65: [2, 43], 68: [2, 43], 72: [2, 43], 75: [2, 43], 80: [2, 43], 81: [2, 43], 82: [2, 43], 83: [2, 43], 84: [2, 43], 85: [2, 43], 87: [1, 51] }, { 72: [1, 35], 86: 52 }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 52: 53, 54: [2, 82], 65: [2, 82], 72: [2, 82], 80: [2, 82], 81: [2, 82], 82: [2, 82], 83: [2, 82], 84: [2, 82], 85: [2, 82] }, { 25: 54, 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 55, 47: [2, 54] }, { 28: 60, 43: 61, 44: [1, 59], 47: [2, 56] }, { 13: 63, 15: [1, 20], 18: [1, 62] }, { 15: [2, 48], 18: [2, 48] }, { 33: [2, 86], 57: 64, 65: [2, 86], 72: [2, 86], 80: [2, 86], 81: [2, 86], 82: [2, 86], 83: [2, 86], 84: [2, 86], 85: [2, 86] }, { 33: [2, 40], 65: [2, 40], 72: [2, 40], 80: [2, 40], 81: [2, 40], 82: [2, 40], 83: [2, 40], 84: [2, 40], 85: [2, 40] }, { 33: [2, 41], 65: [2, 41], 72: [2, 41], 80: [2, 41], 81: [2, 41], 82: [2, 41], 83: [2, 41], 84: [2, 41], 85: [2, 41] }, { 20: 65, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 66, 47: [1, 67] }, { 30: 68, 33: [2, 58], 65: [2, 58], 72: [2, 58], 75: [2, 58], 80: [2, 58], 81: [2, 58], 82: [2, 58], 83: [2, 58], 84: [2, 58], 85: [2, 58] }, { 33: [2, 64], 35: 69, 65: [2, 64], 72: [2, 64], 75: [2, 64], 80: [2, 64], 81: [2, 64], 82: [2, 64], 83: [2, 64], 84: [2, 64], 85: [2, 64] }, { 21: 70, 23: [2, 50], 65: [2, 50], 72: [2, 50], 80: [2, 50], 81: [2, 50], 82: [2, 50], 83: [2, 50], 84: [2, 50], 85: [2, 50] }, { 33: [2, 90], 61: 71, 65: [2, 90], 72: [2, 90], 80: [2, 90], 81: [2, 90], 82: [2, 90], 83: [2, 90], 84: [2, 90], 85: [2, 90] }, { 20: 75, 33: [2, 80], 50: 72, 63: 73, 64: 76, 65: [1, 44], 69: 74, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 72: [1, 80] }, { 23: [2, 42], 33: [2, 42], 54: [2, 42], 65: [2, 42], 68: [2, 42], 72: [2, 42], 75: [2, 42], 80: [2, 42], 81: [2, 42], 82: [2, 42], 83: [2, 42], 84: [2, 42], 85: [2, 42], 87: [1, 51] }, { 20: 75, 53: 81, 54: [2, 84], 63: 82, 64: 76, 65: [1, 44], 69: 83, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 84, 47: [1, 67] }, { 47: [2, 55] }, { 4: 85, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 47: [2, 20] }, { 20: 86, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 87, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 26: 88, 47: [1, 67] }, { 47: [2, 57] }, { 5: [2, 11], 14: [2, 11], 15: [2, 11], 19: [2, 11], 29: [2, 11], 34: [2, 11], 39: [2, 11], 44: [2, 11], 47: [2, 11], 48: [2, 11], 51: [2, 11], 55: [2, 11], 60: [2, 11] }, { 15: [2, 49], 18: [2, 49] }, { 20: 75, 33: [2, 88], 58: 89, 63: 90, 64: 76, 65: [1, 44], 69: 91, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 65: [2, 94], 66: 92, 68: [2, 94], 72: [2, 94], 80: [2, 94], 81: [2, 94], 82: [2, 94], 83: [2, 94], 84: [2, 94], 85: [2, 94] }, { 5: [2, 25], 14: [2, 25], 15: [2, 25], 19: [2, 25], 29: [2, 25], 34: [2, 25], 39: [2, 25], 44: [2, 25], 47: [2, 25], 48: [2, 25], 51: [2, 25], 55: [2, 25], 60: [2, 25] }, { 20: 93, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 31: 94, 33: [2, 60], 63: 95, 64: 76, 65: [1, 44], 69: 96, 70: 77, 71: 78, 72: [1, 79], 75: [2, 60], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 66], 36: 97, 63: 98, 64: 76, 65: [1, 44], 69: 99, 70: 77, 71: 78, 72: [1, 79], 75: [2, 66], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 22: 100, 23: [2, 52], 63: 101, 64: 76, 65: [1, 44], 69: 102, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 92], 62: 103, 63: 104, 64: 76, 65: [1, 44], 69: 105, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 106] }, { 33: [2, 79], 65: [2, 79], 72: [2, 79], 80: [2, 79], 81: [2, 79], 82: [2, 79], 83: [2, 79], 84: [2, 79], 85: [2, 79] }, { 33: [2, 81] }, { 23: [2, 27], 33: [2, 27], 54: [2, 27], 65: [2, 27], 68: [2, 27], 72: [2, 27], 75: [2, 27], 80: [2, 27], 81: [2, 27], 82: [2, 27], 83: [2, 27], 84: [2, 27], 85: [2, 27] }, { 23: [2, 28], 33: [2, 28], 54: [2, 28], 65: [2, 28], 68: [2, 28], 72: [2, 28], 75: [2, 28], 80: [2, 28], 81: [2, 28], 82: [2, 28], 83: [2, 28], 84: [2, 28], 85: [2, 28] }, { 23: [2, 30], 33: [2, 30], 54: [2, 30], 68: [2, 30], 71: 107, 72: [1, 108], 75: [2, 30] }, { 23: [2, 98], 33: [2, 98], 54: [2, 98], 68: [2, 98], 72: [2, 98], 75: [2, 98] }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 73: [1, 109], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 23: [2, 44], 33: [2, 44], 54: [2, 44], 65: [2, 44], 68: [2, 44], 72: [2, 44], 75: [2, 44], 80: [2, 44], 81: [2, 44], 82: [2, 44], 83: [2, 44], 84: [2, 44], 85: [2, 44], 87: [2, 44] }, { 54: [1, 110] }, { 54: [2, 83], 65: [2, 83], 72: [2, 83], 80: [2, 83], 81: [2, 83], 82: [2, 83], 83: [2, 83], 84: [2, 83], 85: [2, 83] }, { 54: [2, 85] }, { 5: [2, 13], 14: [2, 13], 15: [2, 13], 19: [2, 13], 29: [2, 13], 34: [2, 13], 39: [2, 13], 44: [2, 13], 47: [2, 13], 48: [2, 13], 51: [2, 13], 55: [2, 13], 60: [2, 13] }, { 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 112, 46: 111, 47: [2, 76] }, { 33: [2, 70], 40: 113, 65: [2, 70], 72: [2, 70], 75: [2, 70], 80: [2, 70], 81: [2, 70], 82: [2, 70], 83: [2, 70], 84: [2, 70], 85: [2, 70] }, { 47: [2, 18] }, { 5: [2, 14], 14: [2, 14], 15: [2, 14], 19: [2, 14], 29: [2, 14], 34: [2, 14], 39: [2, 14], 44: [2, 14], 47: [2, 14], 48: [2, 14], 51: [2, 14], 55: [2, 14], 60: [2, 14] }, { 33: [1, 114] }, { 33: [2, 87], 65: [2, 87], 72: [2, 87], 80: [2, 87], 81: [2, 87], 82: [2, 87], 83: [2, 87], 84: [2, 87], 85: [2, 87] }, { 33: [2, 89] }, { 20: 75, 63: 116, 64: 76, 65: [1, 44], 67: 115, 68: [2, 96], 69: 117, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 118] }, { 32: 119, 33: [2, 62], 74: 120, 75: [1, 121] }, { 33: [2, 59], 65: [2, 59], 72: [2, 59], 75: [2, 59], 80: [2, 59], 81: [2, 59], 82: [2, 59], 83: [2, 59], 84: [2, 59], 85: [2, 59] }, { 33: [2, 61], 75: [2, 61] }, { 33: [2, 68], 37: 122, 74: 123, 75: [1, 121] }, { 33: [2, 65], 65: [2, 65], 72: [2, 65], 75: [2, 65], 80: [2, 65], 81: [2, 65], 82: [2, 65], 83: [2, 65], 84: [2, 65], 85: [2, 65] }, { 33: [2, 67], 75: [2, 67] }, { 23: [1, 124] }, { 23: [2, 51], 65: [2, 51], 72: [2, 51], 80: [2, 51], 81: [2, 51], 82: [2, 51], 83: [2, 51], 84: [2, 51], 85: [2, 51] }, { 23: [2, 53] }, { 33: [1, 125] }, { 33: [2, 91], 65: [2, 91], 72: [2, 91], 80: [2, 91], 81: [2, 91], 82: [2, 91], 83: [2, 91], 84: [2, 91], 85: [2, 91] }, { 33: [2, 93] }, { 5: [2, 22], 14: [2, 22], 15: [2, 22], 19: [2, 22], 29: [2, 22], 34: [2, 22], 39: [2, 22], 44: [2, 22], 47: [2, 22], 48: [2, 22], 51: [2, 22], 55: [2, 22], 60: [2, 22] }, { 23: [2, 99], 33: [2, 99], 54: [2, 99], 68: [2, 99], 72: [2, 99], 75: [2, 99] }, { 73: [1, 109] }, { 20: 75, 63: 126, 64: 76, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 23], 14: [2, 23], 15: [2, 23], 19: [2, 23], 29: [2, 23], 34: [2, 23], 39: [2, 23], 44: [2, 23], 47: [2, 23], 48: [2, 23], 51: [2, 23], 55: [2, 23], 60: [2, 23] }, { 47: [2, 19] }, { 47: [2, 77] }, { 20: 75, 33: [2, 72], 41: 127, 63: 128, 64: 76, 65: [1, 44], 69: 129, 70: 77, 71: 78, 72: [1, 79], 75: [2, 72], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 24], 14: [2, 24], 15: [2, 24], 19: [2, 24], 29: [2, 24], 34: [2, 24], 39: [2, 24], 44: [2, 24], 47: [2, 24], 48: [2, 24], 51: [2, 24], 55: [2, 24], 60: [2, 24] }, { 68: [1, 130] }, { 65: [2, 95], 68: [2, 95], 72: [2, 95], 80: [2, 95], 81: [2, 95], 82: [2, 95], 83: [2, 95], 84: [2, 95], 85: [2, 95] }, { 68: [2, 97] }, { 5: [2, 21], 14: [2, 21], 15: [2, 21], 19: [2, 21], 29: [2, 21], 34: [2, 21], 39: [2, 21], 44: [2, 21], 47: [2, 21], 48: [2, 21], 51: [2, 21], 55: [2, 21], 60: [2, 21] }, { 33: [1, 131] }, { 33: [2, 63] }, { 72: [1, 133], 76: 132 }, { 33: [1, 134] }, { 33: [2, 69] }, { 15: [2, 12] }, { 14: [2, 26], 15: [2, 26], 19: [2, 26], 29: [2, 26], 34: [2, 26], 47: [2, 26], 48: [2, 26], 51: [2, 26], 55: [2, 26], 60: [2, 26] }, { 23: [2, 31], 33: [2, 31], 54: [2, 31], 68: [2, 31], 72: [2, 31], 75: [2, 31] }, { 33: [2, 74], 42: 135, 74: 136, 75: [1, 121] }, { 33: [2, 71], 65: [2, 71], 72: [2, 71], 75: [2, 71], 80: [2, 71], 81: [2, 71], 82: [2, 71], 83: [2, 71], 84: [2, 71], 85: [2, 71] }, { 33: [2, 73], 75: [2, 73] }, { 23: [2, 29], 33: [2, 29], 54: [2, 29], 65: [2, 29], 68: [2, 29], 72: [2, 29], 75: [2, 29], 80: [2, 29], 81: [2, 29], 82: [2, 29], 83: [2, 29], 84: [2, 29], 85: [2, 29] }, { 14: [2, 15], 15: [2, 15], 19: [2, 15], 29: [2, 15], 34: [2, 15], 39: [2, 15], 44: [2, 15], 47: [2, 15], 48: [2, 15], 51: [2, 15], 55: [2, 15], 60: [2, 15] }, { 72: [1, 138], 77: [1, 137] }, { 72: [2, 100], 77: [2, 100] }, { 14: [2, 16], 15: [2, 16], 19: [2, 16], 29: [2, 16], 34: [2, 16], 44: [2, 16], 47: [2, 16], 48: [2, 16], 51: [2, 16], 55: [2, 16], 60: [2, 16] }, { 33: [1, 139] }, { 33: [2, 75] }, { 33: [2, 32] }, { 72: [2, 101], 77: [2, 101] }, { 14: [2, 17], 15: [2, 17], 19: [2, 17], 29: [2, 17], 34: [2, 17], 39: [2, 17], 44: [2, 17], 47: [2, 17], 48: [2, 17], 51: [2, 17], 55: [2, 17], 60: [2, 17] }],
            defaultActions: { 4: [2, 1], 55: [2, 55], 57: [2, 20], 61: [2, 57], 74: [2, 81], 83: [2, 85], 87: [2, 18], 91: [2, 89], 102: [2, 53], 105: [2, 93], 111: [2, 19], 112: [2, 77], 117: [2, 97], 120: [2, 63], 123: [2, 69], 124: [2, 12], 136: [2, 75], 137: [2, 32] },
            parseError: function parseError(str, hash) {
                throw new Error(str);
            },
            parse: function parse(input) {
                var self = this,
                    stack = [0],
                    vstack = [null],
                    lstack = [],
                    table = this.table,
                    yytext = "",
                    yylineno = 0,
                    yyleng = 0,
                    recovering = 0,
                    TERROR = 2,
                    EOF = 1;
                this.lexer.setInput(input);
                this.lexer.yy = this.yy;
                this.yy.lexer = this.lexer;
                this.yy.parser = this;
                if (typeof this.lexer.yylloc == "undefined") this.lexer.yylloc = {};
                var yyloc = this.lexer.yylloc;
                lstack.push(yyloc);
                var ranges = this.lexer.options && this.lexer.options.ranges;
                if (typeof this.yy.parseError === "function") this.parseError = this.yy.parseError;
                function popStack(n) {
                    stack.length = stack.length - 2 * n;
                    vstack.length = vstack.length - n;
                    lstack.length = lstack.length - n;
                }
                function lex() {
                    var token;
                    token = self.lexer.lex() || 1;
                    if (typeof token !== "number") {
                        token = self.symbols_[token] || token;
                    }
                    return token;
                }
                var symbol,
                    preErrorSymbol,
                    state,
                    action,
                    a,
                    r,
                    yyval = {},
                    p,
                    len,
                    newState,
                    expected;
                while (true) {
                    state = stack[stack.length - 1];
                    if (this.defaultActions[state]) {
                        action = this.defaultActions[state];
                    } else {
                        if (symbol === null || typeof symbol == "undefined") {
                            symbol = lex();
                        }
                        action = table[state] && table[state][symbol];
                    }
                    if (typeof action === "undefined" || !action.length || !action[0]) {
                        var errStr = "";
                        if (!recovering) {
                            expected = [];
                            for (p in table[state]) if (this.terminals_[p] && p > 2) {
                                expected.push("'" + this.terminals_[p] + "'");
                            }
                            if (this.lexer.showPosition) {
                                errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                            } else {
                                errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1 ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
                            }
                            this.parseError(errStr, { text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected });
                        }
                    }
                    if (action[0] instanceof Array && action.length > 1) {
                        throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
                    }
                    switch (action[0]) {
                        case 1:
                            stack.push(symbol);
                            vstack.push(this.lexer.yytext);
                            lstack.push(this.lexer.yylloc);
                            stack.push(action[1]);
                            symbol = null;
                            if (!preErrorSymbol) {
                                yyleng = this.lexer.yyleng;
                                yytext = this.lexer.yytext;
                                yylineno = this.lexer.yylineno;
                                yyloc = this.lexer.yylloc;
                                if (recovering > 0) recovering--;
                            } else {
                                symbol = preErrorSymbol;
                                preErrorSymbol = null;
                            }
                            break;
                        case 2:
                            len = this.productions_[action[1]][1];
                            yyval.$ = vstack[vstack.length - len];
                            yyval._$ = { first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column };
                            if (ranges) {
                                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                            }
                            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
                            if (typeof r !== "undefined") {
                                return r;
                            }
                            if (len) {
                                stack = stack.slice(0, -1 * len * 2);
                                vstack = vstack.slice(0, -1 * len);
                                lstack = lstack.slice(0, -1 * len);
                            }
                            stack.push(this.productions_[action[1]][0]);
                            vstack.push(yyval.$);
                            lstack.push(yyval._$);
                            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                            stack.push(newState);
                            break;
                        case 3:
                            return true;
                    }
                }
                return true;
            }
        };
        /* Jison generated lexer */
        var lexer = (function () {
            var lexer = { EOF: 1,
                parseError: function parseError(str, hash) {
                    if (this.yy.parser) {
                        this.yy.parser.parseError(str, hash);
                    } else {
                        throw new Error(str);
                    }
                },
                setInput: function setInput(input) {
                    this._input = input;
                    this._more = this._less = this.done = false;
                    this.yylineno = this.yyleng = 0;
                    this.yytext = this.matched = this.match = '';
                    this.conditionStack = ['INITIAL'];
                    this.yylloc = { first_line: 1, first_column: 0, last_line: 1, last_column: 0 };
                    if (this.options.ranges) this.yylloc.range = [0, 0];
                    this.offset = 0;
                    return this;
                },
                input: function input() {
                    var ch = this._input[0];
                    this.yytext += ch;
                    this.yyleng++;
                    this.offset++;
                    this.match += ch;
                    this.matched += ch;
                    var lines = ch.match(/(?:\r\n?|\n).*/g);
                    if (lines) {
                        this.yylineno++;
                        this.yylloc.last_line++;
                    } else {
                        this.yylloc.last_column++;
                    }
                    if (this.options.ranges) this.yylloc.range[1]++;

                    this._input = this._input.slice(1);
                    return ch;
                },
                unput: function unput(ch) {
                    var len = ch.length;
                    var lines = ch.split(/(?:\r\n?|\n)/g);

                    this._input = ch + this._input;
                    this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
                    //this.yyleng -= len;
                    this.offset -= len;
                    var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                    this.match = this.match.substr(0, this.match.length - 1);
                    this.matched = this.matched.substr(0, this.matched.length - 1);

                    if (lines.length - 1) this.yylineno -= lines.length - 1;
                    var r = this.yylloc.range;

                    this.yylloc = { first_line: this.yylloc.first_line,
                        last_line: this.yylineno + 1,
                        first_column: this.yylloc.first_column,
                        last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                    };

                    if (this.options.ranges) {
                        this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                    }
                    return this;
                },
                more: function more() {
                    this._more = true;
                    return this;
                },
                less: function less(n) {
                    this.unput(this.match.slice(n));
                },
                pastInput: function pastInput() {
                    var past = this.matched.substr(0, this.matched.length - this.match.length);
                    return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
                },
                upcomingInput: function upcomingInput() {
                    var next = this.match;
                    if (next.length < 20) {
                        next += this._input.substr(0, 20 - next.length);
                    }
                    return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
                },
                showPosition: function showPosition() {
                    var pre = this.pastInput();
                    var c = new Array(pre.length + 1).join("-");
                    return pre + this.upcomingInput() + "\n" + c + "^";
                },
                next: function next() {
                    if (this.done) {
                        return this.EOF;
                    }
                    if (!this._input) this.done = true;

                    var token, match, tempMatch, index, col, lines;
                    if (!this._more) {
                        this.yytext = '';
                        this.match = '';
                    }
                    var rules = this._currentRules();
                    for (var i = 0; i < rules.length; i++) {
                        tempMatch = this._input.match(this.rules[rules[i]]);
                        if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                            match = tempMatch;
                            index = i;
                            if (!this.options.flex) break;
                        }
                    }
                    if (match) {
                        lines = match[0].match(/(?:\r\n?|\n).*/g);
                        if (lines) this.yylineno += lines.length;
                        this.yylloc = { first_line: this.yylloc.last_line,
                            last_line: this.yylineno + 1,
                            first_column: this.yylloc.last_column,
                            last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length };
                        this.yytext += match[0];
                        this.match += match[0];
                        this.matches = match;
                        this.yyleng = this.yytext.length;
                        if (this.options.ranges) {
                            this.yylloc.range = [this.offset, this.offset += this.yyleng];
                        }
                        this._more = false;
                        this._input = this._input.slice(match[0].length);
                        this.matched += match[0];
                        token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]);
                        if (this.done && this._input) this.done = false;
                        if (token) return token;else return;
                    }
                    if (this._input === "") {
                        return this.EOF;
                    } else {
                        return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), { text: "", token: null, line: this.yylineno });
                    }
                },
                lex: function lex() {
                    var r = this.next();
                    if (typeof r !== 'undefined') {
                        return r;
                    } else {
                        return this.lex();
                    }
                },
                begin: function begin(condition) {
                    this.conditionStack.push(condition);
                },
                popState: function popState() {
                    return this.conditionStack.pop();
                },
                _currentRules: function _currentRules() {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                },
                topState: function topState() {
                    return this.conditionStack[this.conditionStack.length - 2];
                },
                pushState: function begin(condition) {
                    this.begin(condition);
                } };
            lexer.options = {};
            lexer.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START
                                                     /**/) {

                function strip(start, end) {
                    return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng - end);
                }

                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:
                        if (yy_.yytext.slice(-2) === "\\\\") {
                            strip(0, 1);
                            this.begin("mu");
                        } else if (yy_.yytext.slice(-1) === "\\") {
                            strip(0, 1);
                            this.begin("emu");
                        } else {
                            this.begin("mu");
                        }
                        if (yy_.yytext) return 15;

                        break;
                    case 1:
                        return 15;
                        break;
                    case 2:
                        this.popState();
                        return 15;

                        break;
                    case 3:
                        this.begin('raw');return 15;
                        break;
                    case 4:
                        this.popState();
                        // Should be using `this.topState()` below, but it currently
                        // returns the second top instead of the first top. Opened an
                        // issue about it at https://github.com/zaach/jison/issues/291
                        if (this.conditionStack[this.conditionStack.length - 1] === 'raw') {
                            return 15;
                        } else {
                            yy_.yytext = yy_.yytext.substr(5, yy_.yyleng - 9);
                            return 'END_RAW_BLOCK';
                        }

                        break;
                    case 5:
                        return 15;
                        break;
                    case 6:
                        this.popState();
                        return 14;

                        break;
                    case 7:
                        return 65;
                        break;
                    case 8:
                        return 68;
                        break;
                    case 9:
                        return 19;
                        break;
                    case 10:
                        this.popState();
                        this.begin('raw');
                        return 23;

                        break;
                    case 11:
                        return 55;
                        break;
                    case 12:
                        return 60;
                        break;
                    case 13:
                        return 29;
                        break;
                    case 14:
                        return 47;
                        break;
                    case 15:
                        this.popState();return 44;
                        break;
                    case 16:
                        this.popState();return 44;
                        break;
                    case 17:
                        return 34;
                        break;
                    case 18:
                        return 39;
                        break;
                    case 19:
                        return 51;
                        break;
                    case 20:
                        return 48;
                        break;
                    case 21:
                        this.unput(yy_.yytext);
                        this.popState();
                        this.begin('com');

                        break;
                    case 22:
                        this.popState();
                        return 14;

                        break;
                    case 23:
                        return 48;
                        break;
                    case 24:
                        return 73;
                        break;
                    case 25:
                        return 72;
                        break;
                    case 26:
                        return 72;
                        break;
                    case 27:
                        return 87;
                        break;
                    case 28:
                        // ignore whitespace
                        break;
                    case 29:
                        this.popState();return 54;
                        break;
                    case 30:
                        this.popState();return 33;
                        break;
                    case 31:
                        yy_.yytext = strip(1, 2).replace(/\\"/g, '"');return 80;
                        break;
                    case 32:
                        yy_.yytext = strip(1, 2).replace(/\\'/g, "'");return 80;
                        break;
                    case 33:
                        return 85;
                        break;
                    case 34:
                        return 82;
                        break;
                    case 35:
                        return 82;
                        break;
                    case 36:
                        return 83;
                        break;
                    case 37:
                        return 84;
                        break;
                    case 38:
                        return 81;
                        break;
                    case 39:
                        return 75;
                        break;
                    case 40:
                        return 77;
                        break;
                    case 41:
                        return 72;
                        break;
                    case 42:
                        yy_.yytext = yy_.yytext.replace(/\\([\\\]])/g, '$1');return 72;
                        break;
                    case 43:
                        return 'INVALID';
                        break;
                    case 44:
                        return 5;
                        break;
                }
            };
            lexer.rules = [/^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/, /^(?:\{\{\{\{(?=[^\/]))/, /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/, /^(?:[^\x00]*?(?=(\{\{\{\{)))/, /^(?:[\s\S]*?--(~)?\}\})/, /^(?:\()/, /^(?:\))/, /^(?:\{\{\{\{)/, /^(?:\}\}\}\})/, /^(?:\{\{(~)?>)/, /^(?:\{\{(~)?#>)/, /^(?:\{\{(~)?#\*?)/, /^(?:\{\{(~)?\/)/, /^(?:\{\{(~)?\^\s*(~)?\}\})/, /^(?:\{\{(~)?\s*else\s*(~)?\}\})/, /^(?:\{\{(~)?\^)/, /^(?:\{\{(~)?\s*else\b)/, /^(?:\{\{(~)?\{)/, /^(?:\{\{(~)?&)/, /^(?:\{\{(~)?!--)/, /^(?:\{\{(~)?![\s\S]*?\}\})/, /^(?:\{\{(~)?\*?)/, /^(?:=)/, /^(?:\.\.)/, /^(?:\.(?=([=~}\s\/.)|])))/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}(~)?\}\})/, /^(?:(~)?\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\s)])))/, /^(?:false(?=([~}\s)])))/, /^(?:undefined(?=([~}\s)])))/, /^(?:null(?=([~}\s)])))/, /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/, /^(?:as\s+\|)/, /^(?:\|)/, /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/, /^(?:\[(\\\]|[^\]])*\])/, /^(?:.)/, /^(?:$)/];
            lexer.conditions = { "mu": { "rules": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "inclusive": false }, "emu": { "rules": [2], "inclusive": false }, "com": { "rules": [6], "inclusive": false }, "raw": { "rules": [3, 4, 5], "inclusive": false }, "INITIAL": { "rules": [0, 1, 44], "inclusive": true } };
            return lexer;
        })();
        parser.lexer = lexer;
        function Parser() {
            this.yy = {};
        }Parser.prototype = parser;parser.Parser = Parser;
        return new Parser();
    })();exports.__esModule = true;
    exports['default'] = handlebars;


},{}],341:[function(require,module,exports){
    /* eslint-disable new-cap */
    'use strict';

    exports.__esModule = true;
    exports.print = print;
    exports.PrintVisitor = PrintVisitor;
// istanbul ignore next

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _visitor = require('./visitor');

    var _visitor2 = _interopRequireDefault(_visitor);

    function print(ast) {
        return new PrintVisitor().accept(ast);
    }

    function PrintVisitor() {
        this.padding = 0;
    }

    PrintVisitor.prototype = new _visitor2['default']();

    PrintVisitor.prototype.pad = function (string) {
        var out = '';

        for (var i = 0, l = this.padding; i < l; i++) {
            out += '  ';
        }

        out += string + '\n';
        return out;
    };

    PrintVisitor.prototype.Program = function (program) {
        var out = '',
            body = program.body,
            i = undefined,
            l = undefined;

        if (program.blockParams) {
            var blockParams = 'BLOCK PARAMS: [';
            for (i = 0, l = program.blockParams.length; i < l; i++) {
                blockParams += ' ' + program.blockParams[i];
            }
            blockParams += ' ]';
            out += this.pad(blockParams);
        }

        for (i = 0, l = body.length; i < l; i++) {
            out += this.accept(body[i]);
        }

        this.padding--;

        return out;
    };

    PrintVisitor.prototype.MustacheStatement = function (mustache) {
        return this.pad('{{ ' + this.SubExpression(mustache) + ' }}');
    };
    PrintVisitor.prototype.Decorator = function (mustache) {
        return this.pad('{{ DIRECTIVE ' + this.SubExpression(mustache) + ' }}');
    };

    PrintVisitor.prototype.BlockStatement = PrintVisitor.prototype.DecoratorBlock = function (block) {
        var out = '';

        out += this.pad((block.type === 'DecoratorBlock' ? 'DIRECTIVE ' : '') + 'BLOCK:');
        this.padding++;
        out += this.pad(this.SubExpression(block));
        if (block.program) {
            out += this.pad('PROGRAM:');
            this.padding++;
            out += this.accept(block.program);
            this.padding--;
        }
        if (block.inverse) {
            if (block.program) {
                this.padding++;
            }
            out += this.pad('{{^}}');
            this.padding++;
            out += this.accept(block.inverse);
            this.padding--;
            if (block.program) {
                this.padding--;
            }
        }
        this.padding--;

        return out;
    };

    PrintVisitor.prototype.PartialStatement = function (partial) {
        var content = 'PARTIAL:' + partial.name.original;
        if (partial.params[0]) {
            content += ' ' + this.accept(partial.params[0]);
        }
        if (partial.hash) {
            content += ' ' + this.accept(partial.hash);
        }
        return this.pad('{{> ' + content + ' }}');
    };
    PrintVisitor.prototype.PartialBlockStatement = function (partial) {
        var content = 'PARTIAL BLOCK:' + partial.name.original;
        if (partial.params[0]) {
            content += ' ' + this.accept(partial.params[0]);
        }
        if (partial.hash) {
            content += ' ' + this.accept(partial.hash);
        }

        content += ' ' + this.pad('PROGRAM:');
        this.padding++;
        content += this.accept(partial.program);
        this.padding--;

        return this.pad('{{> ' + content + ' }}');
    };

    PrintVisitor.prototype.ContentStatement = function (content) {
        return this.pad("CONTENT[ '" + content.value + "' ]");
    };

    PrintVisitor.prototype.CommentStatement = function (comment) {
        return this.pad("{{! '" + comment.value + "' }}");
    };

    PrintVisitor.prototype.SubExpression = function (sexpr) {
        var params = sexpr.params,
            paramStrings = [],
            hash = undefined;

        for (var i = 0, l = params.length; i < l; i++) {
            paramStrings.push(this.accept(params[i]));
        }

        params = '[' + paramStrings.join(', ') + ']';

        hash = sexpr.hash ? ' ' + this.accept(sexpr.hash) : '';

        return this.accept(sexpr.path) + ' ' + params + hash;
    };

    PrintVisitor.prototype.PathExpression = function (id) {
        var path = id.parts.join('/');
        return (id.data ? '@' : '') + 'PATH:' + path;
    };

    PrintVisitor.prototype.StringLiteral = function (string) {
        return '"' + string.value + '"';
    };

    PrintVisitor.prototype.NumberLiteral = function (number) {
        return 'NUMBER{' + number.value + '}';
    };

    PrintVisitor.prototype.BooleanLiteral = function (bool) {
        return 'BOOLEAN{' + bool.value + '}';
    };

    PrintVisitor.prototype.UndefinedLiteral = function () {
        return 'UNDEFINED';
    };

    PrintVisitor.prototype.NullLiteral = function () {
        return 'NULL';
    };

    PrintVisitor.prototype.Hash = function (hash) {
        var pairs = hash.pairs,
            joinedPairs = [];

        for (var i = 0, l = pairs.length; i < l; i++) {
            joinedPairs.push(this.accept(pairs[i]));
        }

        return 'HASH{' + joinedPairs.join(', ') + '}';
    };
    PrintVisitor.prototype.HashPair = function (pair) {
        return pair.key + '=' + this.accept(pair.value);
    };
    /* eslint-enable new-cap */


},{"./visitor":342}],342:[function(require,module,exports){
    'use strict';

    exports.__esModule = true;
// istanbul ignore next

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _exception = require('../exception');

    var _exception2 = _interopRequireDefault(_exception);

    function Visitor() {
        this.parents = [];
    }

    Visitor.prototype = {
        constructor: Visitor,
        mutating: false,

        // Visits a given value. If mutating, will replace the value if necessary.
        acceptKey: function acceptKey(node, name) {
            var value = this.accept(node[name]);
            if (this.mutating) {
                // Hacky sanity check: This may have a few false positives for type for the helper
                // methods but will generally do the right thing without a lot of overhead.
                if (value && !Visitor.prototype[value.type]) {
                    throw new _exception2['default']('Unexpected node type "' + value.type + '" found when accepting ' + name + ' on ' + node.type);
                }
                node[name] = value;
            }
        },

        // Performs an accept operation with added sanity check to ensure
        // required keys are not removed.
        acceptRequired: function acceptRequired(node, name) {
            this.acceptKey(node, name);

            if (!node[name]) {
                throw new _exception2['default'](node.type + ' requires ' + name);
            }
        },

        // Traverses a given array. If mutating, empty respnses will be removed
        // for child elements.
        acceptArray: function acceptArray(array) {
            for (var i = 0, l = array.length; i < l; i++) {
                this.acceptKey(array, i);

                if (!array[i]) {
                    array.splice(i, 1);
                    i--;
                    l--;
                }
            }
        },

        accept: function accept(object) {
            if (!object) {
                return;
            }

            /* istanbul ignore next: Sanity code */
            if (!this[object.type]) {
                throw new _exception2['default']('Unknown type: ' + object.type, object);
            }

            if (this.current) {
                this.parents.unshift(this.current);
            }
            this.current = object;

            var ret = this[object.type](object);

            this.current = this.parents.shift();

            if (!this.mutating || ret) {
                return ret;
            } else if (ret !== false) {
                return object;
            }
        },

        Program: function Program(program) {
            this.acceptArray(program.body);
        },

        MustacheStatement: visitSubExpression,
        Decorator: visitSubExpression,

        BlockStatement: visitBlock,
        DecoratorBlock: visitBlock,

        PartialStatement: visitPartial,
        PartialBlockStatement: function PartialBlockStatement(partial) {
            visitPartial.call(this, partial);

            this.acceptKey(partial, 'program');
        },

        ContentStatement: function ContentStatement() /* content */{},
        CommentStatement: function CommentStatement() /* comment */{},

        SubExpression: visitSubExpression,

        PathExpression: function PathExpression() /* path */{},

        StringLiteral: function StringLiteral() /* string */{},
        NumberLiteral: function NumberLiteral() /* number */{},
        BooleanLiteral: function BooleanLiteral() /* bool */{},
        UndefinedLiteral: function UndefinedLiteral() /* literal */{},
        NullLiteral: function NullLiteral() /* literal */{},

        Hash: function Hash(hash) {
            this.acceptArray(hash.pairs);
        },
        HashPair: function HashPair(pair) {
            this.acceptRequired(pair, 'value');
        }
    };

    function visitSubExpression(mustache) {
        this.acceptRequired(mustache, 'path');
        this.acceptArray(mustache.params);
        this.acceptKey(mustache, 'hash');
    }
    function visitBlock(block) {
        visitSubExpression.call(this, block);

        this.acceptKey(block, 'program');
        this.acceptKey(block, 'inverse');
    }
    function visitPartial(partial) {
        this.acceptRequired(partial, 'name');
        this.acceptArray(partial.params);
        this.acceptKey(partial, 'hash');
    }

    exports['default'] = Visitor;
    module.exports = exports['default'];


},{"../exception":346}],343:[function(require,module,exports){
    'use strict';

    exports.__esModule = true;
// istanbul ignore next

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _visitor = require('./visitor');

    var _visitor2 = _interopRequireDefault(_visitor);

    function WhitespaceControl() {
        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        this.options = options;
    }
    WhitespaceControl.prototype = new _visitor2['default']();

    WhitespaceControl.prototype.Program = function (program) {
        var doStandalone = !this.options.ignoreStandalone;

        var isRoot = !this.isRootSeen;
        this.isRootSeen = true;

        var body = program.body;
        for (var i = 0, l = body.length; i < l; i++) {
            var current = body[i],
                strip = this.accept(current);

            if (!strip) {
                continue;
            }

            var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),
                _isNextWhitespace = isNextWhitespace(body, i, isRoot),
                openStandalone = strip.openStandalone && _isPrevWhitespace,
                closeStandalone = strip.closeStandalone && _isNextWhitespace,
                inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;

            if (strip.close) {
                omitRight(body, i, true);
            }
            if (strip.open) {
                omitLeft(body, i, true);
            }

            if (doStandalone && inlineStandalone) {
                omitRight(body, i);

                if (omitLeft(body, i)) {
                    // If we are on a standalone node, save the indent info for partials
                    if (current.type === 'PartialStatement') {
                        // Pull out the whitespace from the final line
                        current.indent = /([ \t]+$)/.exec(body[i - 1].original)[1];
                    }
                }
            }
            if (doStandalone && openStandalone) {
                omitRight((current.program || current.inverse).body);

                // Strip out the previous content node if it's whitespace only
                omitLeft(body, i);
            }
            if (doStandalone && closeStandalone) {
                // Always strip the next node
                omitRight(body, i);

                omitLeft((current.inverse || current.program).body);
            }
        }

        return program;
    };

    WhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function (block) {
        this.accept(block.program);
        this.accept(block.inverse);

        // Find the inverse program that is involed with whitespace stripping.
        var program = block.program || block.inverse,
            inverse = block.program && block.inverse,
            firstInverse = inverse,
            lastInverse = inverse;

        if (inverse && inverse.chained) {
            firstInverse = inverse.body[0].program;

            // Walk the inverse chain to find the last inverse that is actually in the chain.
            while (lastInverse.chained) {
                lastInverse = lastInverse.body[lastInverse.body.length - 1].program;
            }
        }

        var strip = {
            open: block.openStrip.open,
            close: block.closeStrip.close,

            // Determine the standalone candiacy. Basically flag our content as being possibly standalone
            // so our parent can determine if we actually are standalone
            openStandalone: isNextWhitespace(program.body),
            closeStandalone: isPrevWhitespace((firstInverse || program).body)
        };

        if (block.openStrip.close) {
            omitRight(program.body, null, true);
        }

        if (inverse) {
            var inverseStrip = block.inverseStrip;

            if (inverseStrip.open) {
                omitLeft(program.body, null, true);
            }

            if (inverseStrip.close) {
                omitRight(firstInverse.body, null, true);
            }
            if (block.closeStrip.open) {
                omitLeft(lastInverse.body, null, true);
            }

            // Find standalone else statments
            if (!this.options.ignoreStandalone && isPrevWhitespace(program.body) && isNextWhitespace(firstInverse.body)) {
                omitLeft(program.body);
                omitRight(firstInverse.body);
            }
        } else if (block.closeStrip.open) {
            omitLeft(program.body, null, true);
        }

        return strip;
    };

    WhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function (mustache) {
        return mustache.strip;
    };

    WhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function (node) {
        /* istanbul ignore next */
        var strip = node.strip || {};
        return {
            inlineStandalone: true,
            open: strip.open,
            close: strip.close
        };
    };

    function isPrevWhitespace(body, i, isRoot) {
        if (i === undefined) {
            i = body.length;
        }

        // Nodes that end with newlines are considered whitespace (but are special
        // cased for strip operations)
        var prev = body[i - 1],
            sibling = body[i - 2];
        if (!prev) {
            return isRoot;
        }

        if (prev.type === 'ContentStatement') {
            return (sibling || !isRoot ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(prev.original);
        }
    }
    function isNextWhitespace(body, i, isRoot) {
        if (i === undefined) {
            i = -1;
        }

        var next = body[i + 1],
            sibling = body[i + 2];
        if (!next) {
            return isRoot;
        }

        if (next.type === 'ContentStatement') {
            return (sibling || !isRoot ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(next.original);
        }
    }

// Marks the node to the right of the position as omitted.
// I.e. {{foo}}' ' will mark the ' ' node as omitted.
//
// If i is undefined, then the first child will be marked as such.
//
// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
// content is met.
    function omitRight(body, i, multiple) {
        var current = body[i == null ? 0 : i + 1];
        if (!current || current.type !== 'ContentStatement' || !multiple && current.rightStripped) {
            return;
        }

        var original = current.value;
        current.value = current.value.replace(multiple ? /^\s+/ : /^[ \t]*\r?\n?/, '');
        current.rightStripped = current.value !== original;
    }

// Marks the node to the left of the position as omitted.
// I.e. ' '{{foo}} will mark the ' ' node as omitted.
//
// If i is undefined then the last child will be marked as such.
//
// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
// content is met.
    function omitLeft(body, i, multiple) {
        var current = body[i == null ? body.length - 1 : i - 1];
        if (!current || current.type !== 'ContentStatement' || !multiple && current.leftStripped) {
            return;
        }

        // We omit the last node if it's whitespace only and not preceeded by a non-content node.
        var original = current.value;
        current.value = current.value.replace(multiple ? /\s+$/ : /[ \t]+$/, '');
        current.leftStripped = current.value !== original;
        return current.leftStripped;
    }

    exports['default'] = WhitespaceControl;
    module.exports = exports['default'];


},{"./visitor":342}],344:[function(require,module,exports){
    'use strict';

    exports.__esModule = true;
    exports.registerDefaultDecorators = registerDefaultDecorators;
// istanbul ignore next

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _decoratorsInline = require('./decorators/inline');

    var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);

    function registerDefaultDecorators(instance) {
        _decoratorsInline2['default'](instance);
    }


},{"./decorators/inline":345}],345:[function(require,module,exports){
    'use strict';

    exports.__esModule = true;

    var _utils = require('../utils');

    exports['default'] = function (instance) {
        instance.registerDecorator('inline', function (fn, props, container, options) {
            var ret = fn;
            if (!props.partials) {
                props.partials = {};
                ret = function (context, options) {
                    // Create a new partials stack frame prior to exec.
                    var original = container.partials;
                    container.partials = _utils.extend({}, original, props.partials);
                    var ret = fn(context, options);
                    container.partials = original;
                    return ret;
                };
            }

            props.partials[options.args[0]] = options.fn;

            return ret;
        });
    };

    module.exports = exports['default'];


},{"../utils":359}],346:[function(require,module,exports){
    'use strict';

    exports.__esModule = true;

    var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

    function Exception(message, node) {
        var loc = node && node.loc,
            line = undefined,
            column = undefined;
        if (loc) {
            line = loc.start.line;
            column = loc.start.column;

            message += ' - ' + line + ':' + column;
        }

        var tmp = Error.prototype.constructor.call(this, message);

        // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
        for (var idx = 0; idx < errorProps.length; idx++) {
            this[errorProps[idx]] = tmp[errorProps[idx]];
        }

        /* istanbul ignore else */
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, Exception);
        }

        if (loc) {
            this.lineNumber = line;
            this.column = column;
        }
    }

    Exception.prototype = new Error();

    exports['default'] = Exception;
    module.exports = exports['default'];


},{}],347:[function(require,module,exports){
    'use strict';

    exports.__esModule = true;
    exports.registerDefaultHelpers = registerDefaultHelpers;
// istanbul ignore next

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _helpersBlockHelperMissing = require('./helpers/block-helper-missing');

    var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);

    var _helpersEach = require('./helpers/each');

    var _helpersEach2 = _interopRequireDefault(_helpersEach);

    var _helpersHelperMissing = require('./helpers/helper-missing');

    var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);

    var _helpersIf = require('./helpers/if');

    var _helpersIf2 = _interopRequireDefault(_helpersIf);

    var _helpersLog = require('./helpers/log');

    var _helpersLog2 = _interopRequireDefault(_helpersLog);

    var _helpersLookup = require('./helpers/lookup');

    var _helpersLookup2 = _interopRequireDefault(_helpersLookup);

    var _helpersWith = require('./helpers/with');

    var _helpersWith2 = _interopRequireDefault(_helpersWith);

    function registerDefaultHelpers(instance) {
        _helpersBlockHelperMissing2['default'](instance);
        _helpersEach2['default'](instance);
        _helpersHelperMissing2['default'](instance);
        _helpersIf2['default'](instance);
        _helpersLog2['default'](instance);
        _helpersLookup2['default'](instance);
        _helpersWith2['default'](instance);
    }


},{"./helpers/block-helper-missing":348,"./helpers/each":349,"./helpers/helper-missing":350,"./helpers/if":351,"./helpers/log":352,"./helpers/lookup":353,"./helpers/with":354}],348:[function(require,module,exports){
    'use strict';

    exports.__esModule = true;

    var _utils = require('../utils');

    exports['default'] = function (instance) {
        instance.registerHelper('blockHelperMissing', function (context, options) {
            var inverse = options.inverse,
                fn = options.fn;

            if (context === true) {
                return fn(this);
            } else if (context === false || context == null) {
                return inverse(this);
            } else if (_utils.isArray(context)) {
                if (context.length > 0) {
                    if (options.ids) {
                        options.ids = [options.name];
                    }

                    return instance.helpers.each(context, options);
                } else {
                    return inverse(this);
                }
            } else {
                if (options.data && options.ids) {
                    var data = _utils.createFrame(options.data);
                    data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
                    options = { data: data };
                }

                return fn(context, options);
            }
        });
    };

    module.exports = exports['default'];


},{"../utils":359}],349:[function(require,module,exports){
    'use strict';

    exports.__esModule = true;
// istanbul ignore next

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _utils = require('../utils');

    var _exception = require('../exception');

    var _exception2 = _interopRequireDefault(_exception);

    exports['default'] = function (instance) {
        instance.registerHelper('each', function (context, options) {
            if (!options) {
                throw new _exception2['default']('Must pass iterator to #each');
            }

            var fn = options.fn,
                inverse = options.inverse,
                i = 0,
                ret = '',
                data = undefined,
                contextPath = undefined;

            if (options.data && options.ids) {
                contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
            }

            if (_utils.isFunction(context)) {
                context = context.call(this);
            }

            if (options.data) {
                data = _utils.createFrame(options.data);
            }

            function execIteration(field, index, last) {
                if (data) {
                    data.key = field;
                    data.index = index;
                    data.first = index === 0;
                    data.last = !!last;

                    if (contextPath) {
                        data.contextPath = contextPath + field;
                    }
                }

                ret = ret + fn(context[field], {
                        data: data,
                        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
                    });
            }

            if (context && typeof context === 'object') {
                if (_utils.isArray(context)) {
                    for (var j = context.length; i < j; i++) {
                        if (i in context) {
                            execIteration(i, i, i === context.length - 1);
                        }
                    }
                } else {
                    var priorKey = undefined;

                    for (var key in context) {
                        if (context.hasOwnProperty(key)) {
                            // We're running the iterations one step out of sync so we can detect
                            // the last iteration without have to scan the object twice and create
                            // an itermediate keys array.
                            if (priorKey !== undefined) {
                                execIteration(priorKey, i - 1);
                            }
                            priorKey = key;
                            i++;
                        }
                    }
                    if (priorKey !== undefined) {
                        execIteration(priorKey, i - 1, true);
                    }
                }
            }

            if (i === 0) {
                ret = inverse(this);
            }

            return ret;
        });
    };

    module.exports = exports['default'];


},{"../exception":346,"../utils":359}],350:[function(require,module,exports){
    'use strict';

    exports.__esModule = true;
// istanbul ignore next

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _exception = require('../exception');

    var _exception2 = _interopRequireDefault(_exception);

    exports['default'] = function (instance) {
        instance.registerHelper('helperMissing', function () /* [args, ]options */{
            if (arguments.length === 1) {
                // A missing field in a {{foo}} construct.
                return undefined;
            } else {
                // Someone is actually trying to call something, blow up.
                throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
            }
        });
    };

    module.exports = exports['default'];


},{"../exception":346}],351:[function(require,module,exports){
    'use strict';

    exports.__esModule = true;

    var _utils = require('../utils');

    exports['default'] = function (instance) {
        instance.registerHelper('if', function (conditional, options) {
            if (_utils.isFunction(conditional)) {
                conditional = conditional.call(this);
            }

            // Default behavior is to render the positive path if the value is truthy and not empty.
            // The `includeZero` option may be set to treat the condtional as purely not empty based on the
            // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
            if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
                return options.inverse(this);
            } else {
                return options.fn(this);
            }
        });

        instance.registerHelper('unless', function (conditional, options) {
            return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });
        });
    };

    module.exports = exports['default'];


},{"../utils":359}],352:[function(require,module,exports){
    'use strict';

    exports.__esModule = true;

    exports['default'] = function (instance) {
        instance.registerHelper('log', function () /* message, options */{
            var args = [undefined],
                options = arguments[arguments.length - 1];
            for (var i = 0; i < arguments.length - 1; i++) {
                args.push(arguments[i]);
            }

            var level = 1;
            if (options.hash.level != null) {
                level = options.hash.level;
            } else if (options.data && options.data.level != null) {
                level = options.data.level;
            }
            args[0] = level;

            instance.log.apply(instance, args);
        });
    };

    module.exports = exports['default'];


},{}],353:[function(require,module,exports){
    'use strict';

    exports.__esModule = true;

    exports['default'] = function (instance) {
        instance.registerHelper('lookup', function (obj, field) {
            return obj && obj[field];
        });
    };

    module.exports = exports['default'];


},{}],354:[function(require,module,exports){
    'use strict';

    exports.__esModule = true;

    var _utils = require('../utils');

    exports['default'] = function (instance) {
        instance.registerHelper('with', function (context, options) {
            if (_utils.isFunction(context)) {
                context = context.call(this);
            }

            var fn = options.fn;

            if (!_utils.isEmpty(context)) {
                var data = options.data;
                if (options.data && options.ids) {
                    data = _utils.createFrame(options.data);
                    data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
                }

                return fn(context, {
                    data: data,
                    blockParams: _utils.blockParams([context], [data && data.contextPath])
                });
            } else {
                return options.inverse(this);
            }
        });
    };

    module.exports = exports['default'];


},{"../utils":359}],355:[function(require,module,exports){
    'use strict';

    exports.__esModule = true;

    var _utils = require('./utils');

    var logger = {
        methodMap: ['debug', 'info', 'warn', 'error'],
        level: 'info',

        // Maps a given level value to the `methodMap` indexes above.
        lookupLevel: function lookupLevel(level) {
            if (typeof level === 'string') {
                var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
                if (levelMap >= 0) {
                    level = levelMap;
                } else {
                    level = parseInt(level, 10);
                }
            }

            return level;
        },

        // Can be overridden in the host environment
        log: function log(level) {
            level = logger.lookupLevel(level);

            if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
                var method = logger.methodMap[level];
                if (!console[method]) {
                    // eslint-disable-line no-console
                    method = 'log';
                }

                for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    message[_key - 1] = arguments[_key];
                }

                console[method].apply(console, message); // eslint-disable-line no-console
            }
        }
    };

    exports['default'] = logger;
    module.exports = exports['default'];


},{"./utils":359}],356:[function(require,module,exports){
    (function (global){
        /* global window */
        'use strict';

        exports.__esModule = true;

        exports['default'] = function (Handlebars) {
            /* istanbul ignore next */
            var root = typeof global !== 'undefined' ? global : window,
                $Handlebars = root.Handlebars;
            /* istanbul ignore next */
            Handlebars.noConflict = function () {
                if (root.Handlebars === Handlebars) {
                    root.Handlebars = $Handlebars;
                }
                return Handlebars;
            };
        };

        module.exports = exports['default'];


    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],357:[function(require,module,exports){
    'use strict';

    exports.__esModule = true;
    exports.checkRevision = checkRevision;
    exports.template = template;
    exports.wrapProgram = wrapProgram;
    exports.resolvePartial = resolvePartial;
    exports.invokePartial = invokePartial;
    exports.noop = noop;
// istanbul ignore next

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

// istanbul ignore next

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

    var _utils = require('./utils');

    var Utils = _interopRequireWildcard(_utils);

    var _exception = require('./exception');

    var _exception2 = _interopRequireDefault(_exception);

    var _base = require('./base');

    function checkRevision(compilerInfo) {
        var compilerRevision = compilerInfo && compilerInfo[0] || 1,
            currentRevision = _base.COMPILER_REVISION;

        if (compilerRevision !== currentRevision) {
            if (compilerRevision < currentRevision) {
                var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
                    compilerVersions = _base.REVISION_CHANGES[compilerRevision];
                throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
            } else {
                // Use the embedded version info since the runtime doesn't know about this revision yet
                throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
            }
        }
    }

    function template(templateSpec, env) {
        /* istanbul ignore next */
        if (!env) {
            throw new _exception2['default']('No environment passed to template');
        }
        if (!templateSpec || !templateSpec.main) {
            throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);
        }

        templateSpec.main.decorator = templateSpec.main_d;

        // Note: Using env.VM references rather than local var references throughout this section to allow
        // for external users to override these as psuedo-supported APIs.
        env.VM.checkRevision(templateSpec.compiler);

        function invokePartialWrapper(partial, context, options) {
            if (options.hash) {
                context = Utils.extend({}, context, options.hash);
                if (options.ids) {
                    options.ids[0] = true;
                }
            }

            partial = env.VM.resolvePartial.call(this, partial, context, options);
            var result = env.VM.invokePartial.call(this, partial, context, options);

            if (result == null && env.compile) {
                options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
                result = options.partials[options.name](context, options);
            }
            if (result != null) {
                if (options.indent) {
                    var lines = result.split('\n');
                    for (var i = 0, l = lines.length; i < l; i++) {
                        if (!lines[i] && i + 1 === l) {
                            break;
                        }

                        lines[i] = options.indent + lines[i];
                    }
                    result = lines.join('\n');
                }
                return result;
            } else {
                throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
            }
        }

        // Just add water
        var container = {
            strict: function strict(obj, name) {
                if (!(name in obj)) {
                    throw new _exception2['default']('"' + name + '" not defined in ' + obj);
                }
                return obj[name];
            },
            lookup: function lookup(depths, name) {
                var len = depths.length;
                for (var i = 0; i < len; i++) {
                    if (depths[i] && depths[i][name] != null) {
                        return depths[i][name];
                    }
                }
            },
            lambda: function lambda(current, context) {
                return typeof current === 'function' ? current.call(context) : current;
            },

            escapeExpression: Utils.escapeExpression,
            invokePartial: invokePartialWrapper,

            fn: function fn(i) {
                var ret = templateSpec[i];
                ret.decorator = templateSpec[i + '_d'];
                return ret;
            },

            programs: [],
            program: function program(i, data, declaredBlockParams, blockParams, depths) {
                var programWrapper = this.programs[i],
                    fn = this.fn(i);
                if (data || depths || blockParams || declaredBlockParams) {
                    programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
                } else if (!programWrapper) {
                    programWrapper = this.programs[i] = wrapProgram(this, i, fn);
                }
                return programWrapper;
            },

            data: function data(value, depth) {
                while (value && depth--) {
                    value = value._parent;
                }
                return value;
            },
            merge: function merge(param, common) {
                var obj = param || common;

                if (param && common && param !== common) {
                    obj = Utils.extend({}, common, param);
                }

                return obj;
            },

            noop: env.VM.noop,
            compilerInfo: templateSpec.compiler
        };

        function ret(context) {
            var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

            var data = options.data;

            ret._setup(options);
            if (!options.partial && templateSpec.useData) {
                data = initData(context, data);
            }
            var depths = undefined,
                blockParams = templateSpec.useBlockParams ? [] : undefined;
            if (templateSpec.useDepths) {
                if (options.depths) {
                    depths = context !== options.depths[0] ? [context].concat(options.depths) : options.depths;
                } else {
                    depths = [context];
                }
            }

            function main(context /*, options*/) {
                return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
            }
            main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
            return main(context, options);
        }
        ret.isTop = true;

        ret._setup = function (options) {
            if (!options.partial) {
                container.helpers = container.merge(options.helpers, env.helpers);

                if (templateSpec.usePartial) {
                    container.partials = container.merge(options.partials, env.partials);
                }
                if (templateSpec.usePartial || templateSpec.useDecorators) {
                    container.decorators = container.merge(options.decorators, env.decorators);
                }
            } else {
                container.helpers = options.helpers;
                container.partials = options.partials;
                container.decorators = options.decorators;
            }
        };

        ret._child = function (i, data, blockParams, depths) {
            if (templateSpec.useBlockParams && !blockParams) {
                throw new _exception2['default']('must pass block params');
            }
            if (templateSpec.useDepths && !depths) {
                throw new _exception2['default']('must pass parent depths');
            }

            return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
        };
        return ret;
    }

    function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
        function prog(context) {
            var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

            var currentDepths = depths;
            if (depths && context !== depths[0]) {
                currentDepths = [context].concat(depths);
            }

            return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
        }

        prog = executeDecorators(fn, prog, container, depths, data, blockParams);

        prog.program = i;
        prog.depth = depths ? depths.length : 0;
        prog.blockParams = declaredBlockParams || 0;
        return prog;
    }

    function resolvePartial(partial, context, options) {
        if (!partial) {
            if (options.name === '@partial-block') {
                partial = options.data['partial-block'];
            } else {
                partial = options.partials[options.name];
            }
        } else if (!partial.call && !options.name) {
            // This is a dynamic partial that returned a string
            options.name = partial;
            partial = options.partials[partial];
        }
        return partial;
    }

    function invokePartial(partial, context, options) {
        options.partial = true;
        if (options.ids) {
            options.data.contextPath = options.ids[0] || options.data.contextPath;
        }

        var partialBlock = undefined;
        if (options.fn && options.fn !== noop) {
            options.data = _base.createFrame(options.data);
            partialBlock = options.data['partial-block'] = options.fn;

            if (partialBlock.partials) {
                options.partials = Utils.extend({}, options.partials, partialBlock.partials);
            }
        }

        if (partial === undefined && partialBlock) {
            partial = partialBlock;
        }

        if (partial === undefined) {
            throw new _exception2['default']('The partial ' + options.name + ' could not be found');
        } else if (partial instanceof Function) {
            return partial(context, options);
        }
    }

    function noop() {
        return '';
    }

    function initData(context, data) {
        if (!data || !('root' in data)) {
            data = data ? _base.createFrame(data) : {};
            data.root = context;
        }
        return data;
    }

    function executeDecorators(fn, prog, container, depths, data, blockParams) {
        if (fn.decorator) {
            var props = {};
            prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
            Utils.extend(prog, props);
        }
        return prog;
    }


},{"./base":333,"./exception":346,"./utils":359}],358:[function(require,module,exports){
// Build out our basic SafeString type
    'use strict';

    exports.__esModule = true;
    function SafeString(string) {
        this.string = string;
    }

    SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
        return '' + this.string;
    };

    exports['default'] = SafeString;
    module.exports = exports['default'];


},{}],359:[function(require,module,exports){
    'use strict';

    exports.__esModule = true;
    exports.extend = extend;
    exports.indexOf = indexOf;
    exports.escapeExpression = escapeExpression;
    exports.isEmpty = isEmpty;
    exports.createFrame = createFrame;
    exports.blockParams = blockParams;
    exports.appendContextPath = appendContextPath;
    var escape = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#x27;',
        '`': '&#x60;',
        '=': '&#x3D;'
    };

    var badChars = /[&<>"'`=]/g,
        possible = /[&<>"'`=]/;

    function escapeChar(chr) {
        return escape[chr];
    }

    function extend(obj /* , ...source */) {
        for (var i = 1; i < arguments.length; i++) {
            for (var key in arguments[i]) {
                if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
                    obj[key] = arguments[i][key];
                }
            }
        }

        return obj;
    }

    var toString = Object.prototype.toString;

    exports.toString = toString;
// Sourced from lodash
// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
    /* eslint-disable func-style */
    var isFunction = function isFunction(value) {
        return typeof value === 'function';
    };
// fallback for older versions of Chrome and Safari
    /* istanbul ignore next */
    if (isFunction(/x/)) {
        exports.isFunction = isFunction = function (value) {
            return typeof value === 'function' && toString.call(value) === '[object Function]';
        };
    }
    exports.isFunction = isFunction;

    /* eslint-enable func-style */

    /* istanbul ignore next */
    var isArray = Array.isArray || function (value) {
            return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
        };

    exports.isArray = isArray;
// Older IE versions do not directly support indexOf so we must implement our own, sadly.

    function indexOf(array, value) {
        for (var i = 0, len = array.length; i < len; i++) {
            if (array[i] === value) {
                return i;
            }
        }
        return -1;
    }

    function escapeExpression(string) {
        if (typeof string !== 'string') {
            // don't escape SafeStrings, since they're already safe
            if (string && string.toHTML) {
                return string.toHTML();
            } else if (string == null) {
                return '';
            } else if (!string) {
                return string + '';
            }

            // Force a string conversion as this will be done by the append regardless and
            // the regex test will do this transparently behind the scenes, causing issues if
            // an object's to string has escaped characters in it.
            string = '' + string;
        }

        if (!possible.test(string)) {
            return string;
        }
        return string.replace(badChars, escapeChar);
    }

    function isEmpty(value) {
        if (!value && value !== 0) {
            return true;
        } else if (isArray(value) && value.length === 0) {
            return true;
        } else {
            return false;
        }
    }

    function createFrame(object) {
        var frame = extend({}, object);
        frame._parent = object;
        return frame;
    }

    function blockParams(params, ids) {
        params.path = ids;
        return params;
    }

    function appendContextPath(contextPath, id) {
        return (contextPath ? contextPath + '.' : '') + id;
    }


},{}],360:[function(require,module,exports){
// USAGE:
// var handlebars = require('handlebars');
    /* eslint-disable no-var */

// var local = handlebars.create();

    var handlebars = require('../dist/cjs/handlebars')['default'];

    var printer = require('../dist/cjs/handlebars/compiler/printer');
    handlebars.PrintVisitor = printer.PrintVisitor;
    handlebars.print = printer.print;

    module.exports = handlebars;

// Publish a Node.js require() handler for .handlebars and .hbs files
    function extension(module, filename) {
        var fs = require('fs');
        var templateString = fs.readFileSync(filename, 'utf8');
        module.exports = handlebars.compile(templateString);
    }
    /* istanbul ignore else */
    if (typeof require !== 'undefined' && require.extensions) {
        require.extensions['.handlebars'] = extension;
        require.extensions['.hbs'] = extension;
    }

},{"../dist/cjs/handlebars":331,"../dist/cjs/handlebars/compiler/printer":341,"fs":330}],361:[function(require,module,exports){
    /*
     * Copyright 2009-2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE.txt or:
     * http://opensource.org/licenses/BSD-3-Clause
     */
    exports.SourceMapGenerator = require('./source-map/source-map-generator').SourceMapGenerator;
    exports.SourceMapConsumer = require('./source-map/source-map-consumer').SourceMapConsumer;
    exports.SourceNode = require('./source-map/source-node').SourceNode;

},{"./source-map/source-map-consumer":368,"./source-map/source-map-generator":369,"./source-map/source-node":370}],362:[function(require,module,exports){
    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */
    if (typeof define !== 'function') {
        var define = require('amdefine')(module, require);
    }
    define(function (require, exports, module) {

        var util = require('./util');

        /**
         * A data structure which is a combination of an array and a set. Adding a new
         * member is O(1), testing for membership is O(1), and finding the index of an
         * element is O(1). Removing elements from the set is not supported. Only
         * strings are supported for membership.
         */
        function ArraySet() {
            this._array = [];
            this._set = {};
        }

        /**
         * Static method for creating ArraySet instances from an existing array.
         */
        ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
            var set = new ArraySet();
            for (var i = 0, len = aArray.length; i < len; i++) {
                set.add(aArray[i], aAllowDuplicates);
            }
            return set;
        };

        /**
         * Return how many unique items are in this ArraySet. If duplicates have been
         * added, than those do not count towards the size.
         *
         * @returns Number
         */
        ArraySet.prototype.size = function ArraySet_size() {
            return Object.getOwnPropertyNames(this._set).length;
        };

        /**
         * Add the given string to this set.
         *
         * @param String aStr
         */
        ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
            var isDuplicate = this.has(aStr);
            var idx = this._array.length;
            if (!isDuplicate || aAllowDuplicates) {
                this._array.push(aStr);
            }
            if (!isDuplicate) {
                this._set[util.toSetString(aStr)] = idx;
            }
        };

        /**
         * Is the given string a member of this set?
         *
         * @param String aStr
         */
        ArraySet.prototype.has = function ArraySet_has(aStr) {
            return Object.prototype.hasOwnProperty.call(this._set,
                util.toSetString(aStr));
        };

        /**
         * What is the index of the given string in the array?
         *
         * @param String aStr
         */
        ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
            if (this.has(aStr)) {
                return this._set[util.toSetString(aStr)];
            }
            throw new Error('"' + aStr + '" is not in the set.');
        };

        /**
         * What is the element at the given index?
         *
         * @param Number aIdx
         */
        ArraySet.prototype.at = function ArraySet_at(aIdx) {
            if (aIdx >= 0 && aIdx < this._array.length) {
                return this._array[aIdx];
            }
            throw new Error('No element indexed by ' + aIdx);
        };

        /**
         * Returns the array representation of this set (which has the proper indices
         * indicated by indexOf). Note that this is a copy of the internal array used
         * for storing the members so that no one can mess with internal state.
         */
        ArraySet.prototype.toArray = function ArraySet_toArray() {
            return this._array.slice();
        };

        exports.ArraySet = ArraySet;

    });

},{"./util":371,"amdefine":329}],363:[function(require,module,exports){
    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     *
     * Based on the Base 64 VLQ implementation in Closure Compiler:
     * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
     *
     * Copyright 2011 The Closure Compiler Authors. All rights reserved.
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     *  * Redistributions of source code must retain the above copyright
     *    notice, this list of conditions and the following disclaimer.
     *  * Redistributions in binary form must reproduce the above
     *    copyright notice, this list of conditions and the following
     *    disclaimer in the documentation and/or other materials provided
     *    with the distribution.
     *  * Neither the name of Google Inc. nor the names of its
     *    contributors may be used to endorse or promote products derived
     *    from this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
     * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    if (typeof define !== 'function') {
        var define = require('amdefine')(module, require);
    }
    define(function (require, exports, module) {

        var base64 = require('./base64');

        // A single base 64 digit can contain 6 bits of data. For the base 64 variable
        // length quantities we use in the source map spec, the first bit is the sign,
        // the next four bits are the actual value, and the 6th bit is the
        // continuation bit. The continuation bit tells us whether there are more
        // digits in this value following this digit.
        //
        //   Continuation
        //   |    Sign
        //   |    |
        //   V    V
        //   101011

        var VLQ_BASE_SHIFT = 5;

        // binary: 100000
        var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

        // binary: 011111
        var VLQ_BASE_MASK = VLQ_BASE - 1;

        // binary: 100000
        var VLQ_CONTINUATION_BIT = VLQ_BASE;

        /**
         * Converts from a two-complement value to a value where the sign bit is
         * placed in the least significant bit.  For example, as decimals:
         *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
         *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
         */
        function toVLQSigned(aValue) {
            return aValue < 0
                ? ((-aValue) << 1) + 1
                : (aValue << 1) + 0;
        }

        /**
         * Converts to a two-complement value from a value where the sign bit is
         * placed in the least significant bit.  For example, as decimals:
         *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
         *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
         */
        function fromVLQSigned(aValue) {
            var isNegative = (aValue & 1) === 1;
            var shifted = aValue >> 1;
            return isNegative
                ? -shifted
                : shifted;
        }

        /**
         * Returns the base 64 VLQ encoded value.
         */
        exports.encode = function base64VLQ_encode(aValue) {
            var encoded = "";
            var digit;

            var vlq = toVLQSigned(aValue);

            do {
                digit = vlq & VLQ_BASE_MASK;
                vlq >>>= VLQ_BASE_SHIFT;
                if (vlq > 0) {
                    // There are still more digits in this value, so we must make sure the
                    // continuation bit is marked.
                    digit |= VLQ_CONTINUATION_BIT;
                }
                encoded += base64.encode(digit);
            } while (vlq > 0);

            return encoded;
        };

        /**
         * Decodes the next base 64 VLQ value from the given string and returns the
         * value and the rest of the string via the out parameter.
         */
        exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
            var strLen = aStr.length;
            var result = 0;
            var shift = 0;
            var continuation, digit;

            do {
                if (aIndex >= strLen) {
                    throw new Error("Expected more digits in base 64 VLQ value.");
                }

                digit = base64.decode(aStr.charCodeAt(aIndex++));
                if (digit === -1) {
                    throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
                }

                continuation = !!(digit & VLQ_CONTINUATION_BIT);
                digit &= VLQ_BASE_MASK;
                result = result + (digit << shift);
                shift += VLQ_BASE_SHIFT;
            } while (continuation);

            aOutParam.value = fromVLQSigned(result);
            aOutParam.rest = aIndex;
        };

    });

},{"./base64":364,"amdefine":329}],364:[function(require,module,exports){
    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */
    if (typeof define !== 'function') {
        var define = require('amdefine')(module, require);
    }
    define(function (require, exports, module) {

        var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

        /**
         * Encode an integer in the range of 0 to 63 to a single base 64 digit.
         */
        exports.encode = function (number) {
            if (0 <= number && number < intToCharMap.length) {
                return intToCharMap[number];
            }
            throw new TypeError("Must be between 0 and 63: " + aNumber);
        };

        /**
         * Decode a single base 64 character code digit to an integer. Returns -1 on
         * failure.
         */
        exports.decode = function (charCode) {
            var bigA = 65;     // 'A'
            var bigZ = 90;     // 'Z'

            var littleA = 97;  // 'a'
            var littleZ = 122; // 'z'

            var zero = 48;     // '0'
            var nine = 57;     // '9'

            var plus = 43;     // '+'
            var slash = 47;    // '/'

            var littleOffset = 26;
            var numberOffset = 52;

            // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
            if (bigA <= charCode && charCode <= bigZ) {
                return (charCode - bigA);
            }

            // 26 - 51: abcdefghijklmnopqrstuvwxyz
            if (littleA <= charCode && charCode <= littleZ) {
                return (charCode - littleA + littleOffset);
            }

            // 52 - 61: 0123456789
            if (zero <= charCode && charCode <= nine) {
                return (charCode - zero + numberOffset);
            }

            // 62: +
            if (charCode == plus) {
                return 62;
            }

            // 63: /
            if (charCode == slash) {
                return 63;
            }

            // Invalid base64 digit.
            return -1;
        };

    });

},{"amdefine":329}],365:[function(require,module,exports){
    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */
    if (typeof define !== 'function') {
        var define = require('amdefine')(module, require);
    }
    define(function (require, exports, module) {

        exports.GREATEST_LOWER_BOUND = 1;
        exports.LEAST_UPPER_BOUND = 2;

        /**
         * Recursive implementation of binary search.
         *
         * @param aLow Indices here and lower do not contain the needle.
         * @param aHigh Indices here and higher do not contain the needle.
         * @param aNeedle The element being searched for.
         * @param aHaystack The non-empty array being searched.
         * @param aCompare Function which takes two elements and returns -1, 0, or 1.
         * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
         *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
         *     closest element that is smaller than or greater than the one we are
         *     searching for, respectively, if the exact element cannot be found.
         */
        function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
            // This function terminates when one of the following is true:
            //
            //   1. We find the exact element we are looking for.
            //
            //   2. We did not find the exact element, but we can return the index of
            //      the next-closest element.
            //
            //   3. We did not find the exact element, and there is no next-closest
            //      element than the one we are searching for, so we return -1.
            var mid = Math.floor((aHigh - aLow) / 2) + aLow;
            var cmp = aCompare(aNeedle, aHaystack[mid], true);
            if (cmp === 0) {
                // Found the element we are looking for.
                return mid;
            }
            else if (cmp > 0) {
                // Our needle is greater than aHaystack[mid].
                if (aHigh - mid > 1) {
                    // The element is in the upper half.
                    return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
                }

                // The exact needle element was not found in this haystack. Determine if
                // we are in termination case (3) or (2) and return the appropriate thing.
                if (aBias == exports.LEAST_UPPER_BOUND) {
                    return aHigh < aHaystack.length ? aHigh : -1;
                } else {
                    return mid;
                }
            }
            else {
                // Our needle is less than aHaystack[mid].
                if (mid - aLow > 1) {
                    // The element is in the lower half.
                    return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
                }

                // we are in termination case (3) or (2) and return the appropriate thing.
                if (aBias == exports.LEAST_UPPER_BOUND) {
                    return mid;
                } else {
                    return aLow < 0 ? -1 : aLow;
                }
            }
        }

        /**
         * This is an implementation of binary search which will always try and return
         * the index of the closest element if there is no exact hit. This is because
         * mappings between original and generated line/col pairs are single points,
         * and there is an implicit region between each of them, so a miss just means
         * that you aren't on the very start of a region.
         *
         * @param aNeedle The element you are looking for.
         * @param aHaystack The array that is being searched.
         * @param aCompare A function which takes the needle and an element in the
         *     array and returns -1, 0, or 1 depending on whether the needle is less
         *     than, equal to, or greater than the element, respectively.
         * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
         *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
         *     closest element that is smaller than or greater than the one we are
         *     searching for, respectively, if the exact element cannot be found.
         *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
         */
        exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
            if (aHaystack.length === 0) {
                return -1;
            }

            var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
                aCompare, aBias || exports.GREATEST_LOWER_BOUND);
            if (index < 0) {
                return -1;
            }

            // We have found either the exact element, or the next-closest element than
            // the one we are searching for. However, there may be more than one such
            // element. Make sure we always return the smallest of these.
            while (index - 1 >= 0) {
                if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
                    break;
                }
                --index;
            }

            return index;
        };

    });

},{"amdefine":329}],366:[function(require,module,exports){
    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
     * Copyright 2014 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */
    if (typeof define !== 'function') {
        var define = require('amdefine')(module, require);
    }
    define(function (require, exports, module) {

        var util = require('./util');

        /**
         * Determine whether mappingB is after mappingA with respect to generated
         * position.
         */
        function generatedPositionAfter(mappingA, mappingB) {
            // Optimized for most common case
            var lineA = mappingA.generatedLine;
            var lineB = mappingB.generatedLine;
            var columnA = mappingA.generatedColumn;
            var columnB = mappingB.generatedColumn;
            return lineB > lineA || lineB == lineA && columnB >= columnA ||
                util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
        }

        /**
         * A data structure to provide a sorted view of accumulated mappings in a
         * performance conscious manner. It trades a neglibable overhead in general
         * case for a large speedup in case of mappings being added in order.
         */
        function MappingList() {
            this._array = [];
            this._sorted = true;
            // Serves as infimum
            this._last = {generatedLine: -1, generatedColumn: 0};
        }

        /**
         * Iterate through internal items. This method takes the same arguments that
         * `Array.prototype.forEach` takes.
         *
         * NOTE: The order of the mappings is NOT guaranteed.
         */
        MappingList.prototype.unsortedForEach =
            function MappingList_forEach(aCallback, aThisArg) {
                this._array.forEach(aCallback, aThisArg);
            };

        /**
         * Add the given source mapping.
         *
         * @param Object aMapping
         */
        MappingList.prototype.add = function MappingList_add(aMapping) {
            var mapping;
            if (generatedPositionAfter(this._last, aMapping)) {
                this._last = aMapping;
                this._array.push(aMapping);
            } else {
                this._sorted = false;
                this._array.push(aMapping);
            }
        };

        /**
         * Returns the flat, sorted array of mappings. The mappings are sorted by
         * generated position.
         *
         * WARNING: This method returns internal data without copying, for
         * performance. The return value must NOT be mutated, and should be treated as
         * an immutable borrow. If you want to take ownership, you must make your own
         * copy.
         */
        MappingList.prototype.toArray = function MappingList_toArray() {
            if (!this._sorted) {
                this._array.sort(util.compareByGeneratedPositionsInflated);
                this._sorted = true;
            }
            return this._array;
        };

        exports.MappingList = MappingList;

    });

},{"./util":371,"amdefine":329}],367:[function(require,module,exports){
    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */
    if (typeof define !== 'function') {
        var define = require('amdefine')(module, require);
    }
    define(function (require, exports, module) {

        // It turns out that some (most?) JavaScript engines don't self-host
        // `Array.prototype.sort`. This makes sense because C++ will likely remain
        // faster than JS when doing raw CPU-intensive sorting. However, when using a
        // custom comparator function, calling back and forth between the VM's C++ and
        // JIT'd JS is rather slow *and* loses JIT type information, resulting in
        // worse generated code for the comparator function than would be optimal. In
        // fact, when sorting with a comparator, these costs outweigh the benefits of
        // sorting in C++. By using our own JS-implemented Quick Sort (below), we get
        // a ~3500ms mean speed-up in `bench/bench.html`.

        /**
         * Swap the elements indexed by `x` and `y` in the array `ary`.
         *
         * @param {Array} ary
         *        The array.
         * @param {Number} x
         *        The index of the first item.
         * @param {Number} y
         *        The index of the second item.
         */
        function swap(ary, x, y) {
            var temp = ary[x];
            ary[x] = ary[y];
            ary[y] = temp;
        }

        /**
         * Returns a random integer within the range `low .. high` inclusive.
         *
         * @param {Number} low
         *        The lower bound on the range.
         * @param {Number} high
         *        The upper bound on the range.
         */
        function randomIntInRange(low, high) {
            return Math.round(low + (Math.random() * (high - low)));
        }

        /**
         * The Quick Sort algorithm.
         *
         * @param {Array} ary
         *        An array to sort.
         * @param {function} comparator
         *        Function to use to compare two items.
         * @param {Number} p
         *        Start index of the array
         * @param {Number} r
         *        End index of the array
         */
        function doQuickSort(ary, comparator, p, r) {
            // If our lower bound is less than our upper bound, we (1) partition the
            // array into two pieces and (2) recurse on each half. If it is not, this is
            // the empty array and our base case.

            if (p < r) {
                // (1) Partitioning.
                //
                // The partitioning chooses a pivot between `p` and `r` and moves all
                // elements that are less than or equal to the pivot to the before it, and
                // all the elements that are greater than it after it. The effect is that
                // once partition is done, the pivot is in the exact place it will be when
                // the array is put in sorted order, and it will not need to be moved
                // again. This runs in O(n) time.

                // Always choose a random pivot so that an input array which is reverse
                // sorted does not cause O(n^2) running time.
                var pivotIndex = randomIntInRange(p, r);
                var i = p - 1;

                swap(ary, pivotIndex, r);
                var pivot = ary[r];

                // Immediately after `j` is incremented in this loop, the following hold
                // true:
                //
                //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
                //
                //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
                for (var j = p; j < r; j++) {
                    if (comparator(ary[j], pivot) <= 0) {
                        i += 1;
                        swap(ary, i, j);
                    }
                }

                swap(ary, i + 1, j);
                var q = i + 1;

                // (2) Recurse on each half.

                doQuickSort(ary, comparator, p, q - 1);
                doQuickSort(ary, comparator, q + 1, r);
            }
        }

        /**
         * Sort the given array in-place with the given comparator function.
         *
         * @param {Array} ary
         *        An array to sort.
         * @param {function} comparator
         *        Function to use to compare two items.
         */
        exports.quickSort = function (ary, comparator) {
            doQuickSort(ary, comparator, 0, ary.length - 1);
        };

    });

},{"amdefine":329}],368:[function(require,module,exports){
    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */
    if (typeof define !== 'function') {
        var define = require('amdefine')(module, require);
    }
    define(function (require, exports, module) {

        var util = require('./util');
        var binarySearch = require('./binary-search');
        var ArraySet = require('./array-set').ArraySet;
        var base64VLQ = require('./base64-vlq');
        var quickSort = require('./quick-sort').quickSort;

        function SourceMapConsumer(aSourceMap) {
            var sourceMap = aSourceMap;
            if (typeof aSourceMap === 'string') {
                sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
            }

            return sourceMap.sections != null
                ? new IndexedSourceMapConsumer(sourceMap)
                : new BasicSourceMapConsumer(sourceMap);
        }

        SourceMapConsumer.fromSourceMap = function(aSourceMap) {
            return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
        }

        /**
         * The version of the source mapping spec that we are consuming.
         */
        SourceMapConsumer.prototype._version = 3;

        // `__generatedMappings` and `__originalMappings` are arrays that hold the
        // parsed mapping coordinates from the source map's "mappings" attribute. They
        // are lazily instantiated, accessed via the `_generatedMappings` and
        // `_originalMappings` getters respectively, and we only parse the mappings
        // and create these arrays once queried for a source location. We jump through
        // these hoops because there can be many thousands of mappings, and parsing
        // them is expensive, so we only want to do it if we must.
        //
        // Each object in the arrays is of the form:
        //
        //     {
        //       generatedLine: The line number in the generated code,
        //       generatedColumn: The column number in the generated code,
        //       source: The path to the original source file that generated this
        //               chunk of code,
        //       originalLine: The line number in the original source that
        //                     corresponds to this chunk of generated code,
        //       originalColumn: The column number in the original source that
        //                       corresponds to this chunk of generated code,
        //       name: The name of the original symbol which generated this chunk of
        //             code.
        //     }
        //
        // All properties except for `generatedLine` and `generatedColumn` can be
        // `null`.
        //
        // `_generatedMappings` is ordered by the generated positions.
        //
        // `_originalMappings` is ordered by the original positions.

        SourceMapConsumer.prototype.__generatedMappings = null;
        Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
            get: function () {
                if (!this.__generatedMappings) {
                    this._parseMappings(this._mappings, this.sourceRoot);
                }

                return this.__generatedMappings;
            }
        });

        SourceMapConsumer.prototype.__originalMappings = null;
        Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
            get: function () {
                if (!this.__originalMappings) {
                    this._parseMappings(this._mappings, this.sourceRoot);
                }

                return this.__originalMappings;
            }
        });

        SourceMapConsumer.prototype._charIsMappingSeparator =
            function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
                var c = aStr.charAt(index);
                return c === ";" || c === ",";
            };

        /**
         * Parse the mappings in a string in to a data structure which we can easily
         * query (the ordered arrays in the `this.__generatedMappings` and
         * `this.__originalMappings` properties).
         */
        SourceMapConsumer.prototype._parseMappings =
            function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
                throw new Error("Subclasses must implement _parseMappings");
            };

        SourceMapConsumer.GENERATED_ORDER = 1;
        SourceMapConsumer.ORIGINAL_ORDER = 2;

        SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
        SourceMapConsumer.LEAST_UPPER_BOUND = 2;

        /**
         * Iterate over each mapping between an original source/line/column and a
         * generated line/column in this source map.
         *
         * @param Function aCallback
         *        The function that is called with each mapping.
         * @param Object aContext
         *        Optional. If specified, this object will be the value of `this` every
         *        time that `aCallback` is called.
         * @param aOrder
         *        Either `SourceMapConsumer.GENERATED_ORDER` or
         *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
         *        iterate over the mappings sorted by the generated file's line/column
         *        order or the original's source/line/column order, respectively. Defaults to
         *        `SourceMapConsumer.GENERATED_ORDER`.
         */
        SourceMapConsumer.prototype.eachMapping =
            function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
                var context = aContext || null;
                var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

                var mappings;
                switch (order) {
                    case SourceMapConsumer.GENERATED_ORDER:
                        mappings = this._generatedMappings;
                        break;
                    case SourceMapConsumer.ORIGINAL_ORDER:
                        mappings = this._originalMappings;
                        break;
                    default:
                        throw new Error("Unknown order of iteration.");
                }

                var sourceRoot = this.sourceRoot;
                mappings.map(function (mapping) {
                    var source = mapping.source === null ? null : this._sources.at(mapping.source);
                    if (source != null && sourceRoot != null) {
                        source = util.join(sourceRoot, source);
                    }
                    return {
                        source: source,
                        generatedLine: mapping.generatedLine,
                        generatedColumn: mapping.generatedColumn,
                        originalLine: mapping.originalLine,
                        originalColumn: mapping.originalColumn,
                        name: mapping.name === null ? null : this._names.at(mapping.name)
                    };
                }, this).forEach(aCallback, context);
            };

        /**
         * Returns all generated line and column information for the original source,
         * line, and column provided. If no column is provided, returns all mappings
         * corresponding to a either the line we are searching for or the next
         * closest line that has any mappings. Otherwise, returns all mappings
         * corresponding to the given line and either the column we are searching for
         * or the next closest column that has any offsets.
         *
         * The only argument is an object with the following properties:
         *
         *   - source: The filename of the original source.
         *   - line: The line number in the original source.
         *   - column: Optional. the column number in the original source.
         *
         * and an array of objects is returned, each with the following properties:
         *
         *   - line: The line number in the generated source, or null.
         *   - column: The column number in the generated source, or null.
         */
        SourceMapConsumer.prototype.allGeneratedPositionsFor =
            function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
                var line = util.getArg(aArgs, 'line');

                // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
                // returns the index of the closest mapping less than the needle. By
                // setting needle.originalColumn to 0, we thus find the last mapping for
                // the given line, provided such a mapping exists.
                var needle = {
                    source: util.getArg(aArgs, 'source'),
                    originalLine: line,
                    originalColumn: util.getArg(aArgs, 'column', 0)
                };

                if (this.sourceRoot != null) {
                    needle.source = util.relative(this.sourceRoot, needle.source);
                }
                if (!this._sources.has(needle.source)) {
                    return [];
                }
                needle.source = this._sources.indexOf(needle.source);

                var mappings = [];

                var index = this._findMapping(needle,
                    this._originalMappings,
                    "originalLine",
                    "originalColumn",
                    util.compareByOriginalPositions,
                    binarySearch.LEAST_UPPER_BOUND);
                if (index >= 0) {
                    var mapping = this._originalMappings[index];

                    if (aArgs.column === undefined) {
                        var originalLine = mapping.originalLine;

                        // Iterate until either we run out of mappings, or we run into
                        // a mapping for a different line than the one we found. Since
                        // mappings are sorted, this is guaranteed to find all mappings for
                        // the line we found.
                        while (mapping && mapping.originalLine === originalLine) {
                            mappings.push({
                                line: util.getArg(mapping, 'generatedLine', null),
                                column: util.getArg(mapping, 'generatedColumn', null),
                                lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
                            });

                            mapping = this._originalMappings[++index];
                        }
                    } else {
                        var originalColumn = mapping.originalColumn;

                        // Iterate until either we run out of mappings, or we run into
                        // a mapping for a different line than the one we were searching for.
                        // Since mappings are sorted, this is guaranteed to find all mappings for
                        // the line we are searching for.
                        while (mapping &&
                        mapping.originalLine === line &&
                        mapping.originalColumn == originalColumn) {
                            mappings.push({
                                line: util.getArg(mapping, 'generatedLine', null),
                                column: util.getArg(mapping, 'generatedColumn', null),
                                lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
                            });

                            mapping = this._originalMappings[++index];
                        }
                    }
                }

                return mappings;
            };

        exports.SourceMapConsumer = SourceMapConsumer;

        /**
         * A BasicSourceMapConsumer instance represents a parsed source map which we can
         * query for information about the original file positions by giving it a file
         * position in the generated source.
         *
         * The only parameter is the raw source map (either as a JSON string, or
         * already parsed to an object). According to the spec, source maps have the
         * following attributes:
         *
         *   - version: Which version of the source map spec this map is following.
         *   - sources: An array of URLs to the original source files.
         *   - names: An array of identifiers which can be referrenced by individual mappings.
         *   - sourceRoot: Optional. The URL root from which all sources are relative.
         *   - sourcesContent: Optional. An array of contents of the original source files.
         *   - mappings: A string of base64 VLQs which contain the actual mappings.
         *   - file: Optional. The generated file this source map is associated with.
         *
         * Here is an example source map, taken from the source map spec[0]:
         *
         *     {
   *       version : 3,
   *       file: "out.js",
   *       sourceRoot : "",
   *       sources: ["foo.js", "bar.js"],
   *       names: ["src", "maps", "are", "fun"],
   *       mappings: "AA,AB;;ABCDE;"
   *     }
         *
         * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
         */
        function BasicSourceMapConsumer(aSourceMap) {
            var sourceMap = aSourceMap;
            if (typeof aSourceMap === 'string') {
                sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
            }

            var version = util.getArg(sourceMap, 'version');
            var sources = util.getArg(sourceMap, 'sources');
            // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
            // requires the array) to play nice here.
            var names = util.getArg(sourceMap, 'names', []);
            var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
            var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
            var mappings = util.getArg(sourceMap, 'mappings');
            var file = util.getArg(sourceMap, 'file', null);

            // Once again, Sass deviates from the spec and supplies the version as a
            // string rather than a number, so we use loose equality checking here.
            if (version != this._version) {
                throw new Error('Unsupported version: ' + version);
            }

            // Some source maps produce relative source paths like "./foo.js" instead of
            // "foo.js".  Normalize these first so that future comparisons will succeed.
            // See bugzil.la/1090768.
            sources = sources.map(util.normalize);

            // Pass `true` below to allow duplicate names and sources. While source maps
            // are intended to be compressed and deduplicated, the TypeScript compiler
            // sometimes generates source maps with duplicates in them. See Github issue
            // #72 and bugzil.la/889492.
            this._names = ArraySet.fromArray(names, true);
            this._sources = ArraySet.fromArray(sources, true);

            this.sourceRoot = sourceRoot;
            this.sourcesContent = sourcesContent;
            this._mappings = mappings;
            this.file = file;
        }

        BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
        BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

        /**
         * Create a BasicSourceMapConsumer from a SourceMapGenerator.
         *
         * @param SourceMapGenerator aSourceMap
         *        The source map that will be consumed.
         * @returns BasicSourceMapConsumer
         */
        BasicSourceMapConsumer.fromSourceMap =
            function SourceMapConsumer_fromSourceMap(aSourceMap) {
                var smc = Object.create(BasicSourceMapConsumer.prototype);

                var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
                var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
                smc.sourceRoot = aSourceMap._sourceRoot;
                smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                    smc.sourceRoot);
                smc.file = aSourceMap._file;

                // Because we are modifying the entries (by converting string sources and
                // names to indices into the sources and names ArraySets), we have to make
                // a copy of the entry or else bad things happen. Shared mutable state
                // strikes again! See github issue #191.

                var generatedMappings = aSourceMap._mappings.toArray().slice();
                var destGeneratedMappings = smc.__generatedMappings = [];
                var destOriginalMappings = smc.__originalMappings = [];

                for (var i = 0, length = generatedMappings.length; i < length; i++) {
                    var srcMapping = generatedMappings[i];
                    var destMapping = new Mapping;
                    destMapping.generatedLine = srcMapping.generatedLine;
                    destMapping.generatedColumn = srcMapping.generatedColumn;

                    if (srcMapping.source) {
                        destMapping.source = sources.indexOf(srcMapping.source);
                        destMapping.originalLine = srcMapping.originalLine;
                        destMapping.originalColumn = srcMapping.originalColumn;

                        if (srcMapping.name) {
                            destMapping.name = names.indexOf(srcMapping.name);
                        }

                        destOriginalMappings.push(destMapping);
                    }

                    destGeneratedMappings.push(destMapping);
                }

                quickSort(smc.__originalMappings, util.compareByOriginalPositions);

                return smc;
            };

        /**
         * The version of the source mapping spec that we are consuming.
         */
        BasicSourceMapConsumer.prototype._version = 3;

        /**
         * The list of original sources.
         */
        Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
            get: function () {
                return this._sources.toArray().map(function (s) {
                    return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
                }, this);
            }
        });

        /**
         * Provide the JIT with a nice shape / hidden class.
         */
        function Mapping() {
            this.generatedLine = 0;
            this.generatedColumn = 0;
            this.source = null;
            this.originalLine = null;
            this.originalColumn = null;
            this.name = null;
        }

        /**
         * Parse the mappings in a string in to a data structure which we can easily
         * query (the ordered arrays in the `this.__generatedMappings` and
         * `this.__originalMappings` properties).
         */
        BasicSourceMapConsumer.prototype._parseMappings =
            function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
                var generatedLine = 1;
                var previousGeneratedColumn = 0;
                var previousOriginalLine = 0;
                var previousOriginalColumn = 0;
                var previousSource = 0;
                var previousName = 0;
                var length = aStr.length;
                var index = 0;
                var cachedSegments = {};
                var temp = {};
                var originalMappings = [];
                var generatedMappings = [];
                var mapping, str, segment, end, value;

                while (index < length) {
                    if (aStr.charAt(index) === ';') {
                        generatedLine++;
                        index++;
                        previousGeneratedColumn = 0;
                    }
                    else if (aStr.charAt(index) === ',') {
                        index++;
                    }
                    else {
                        mapping = new Mapping();
                        mapping.generatedLine = generatedLine;

                        // Because each offset is encoded relative to the previous one,
                        // many segments often have the same encoding. We can exploit this
                        // fact by caching the parsed variable length fields of each segment,
                        // allowing us to avoid a second parse if we encounter the same
                        // segment again.
                        for (end = index; end < length; end++) {
                            if (this._charIsMappingSeparator(aStr, end)) {
                                break;
                            }
                        }
                        str = aStr.slice(index, end);

                        segment = cachedSegments[str];
                        if (segment) {
                            index += str.length;
                        } else {
                            segment = [];
                            while (index < end) {
                                base64VLQ.decode(aStr, index, temp);
                                value = temp.value;
                                index = temp.rest;
                                segment.push(value);
                            }

                            if (segment.length === 2) {
                                throw new Error('Found a source, but no line and column');
                            }

                            if (segment.length === 3) {
                                throw new Error('Found a source and line, but no column');
                            }

                            cachedSegments[str] = segment;
                        }

                        // Generated column.
                        mapping.generatedColumn = previousGeneratedColumn + segment[0];
                        previousGeneratedColumn = mapping.generatedColumn;

                        if (segment.length > 1) {
                            // Original source.
                            mapping.source = previousSource + segment[1];
                            previousSource += segment[1];

                            // Original line.
                            mapping.originalLine = previousOriginalLine + segment[2];
                            previousOriginalLine = mapping.originalLine;
                            // Lines are stored 0-based
                            mapping.originalLine += 1;

                            // Original column.
                            mapping.originalColumn = previousOriginalColumn + segment[3];
                            previousOriginalColumn = mapping.originalColumn;

                            if (segment.length > 4) {
                                // Original name.
                                mapping.name = previousName + segment[4];
                                previousName += segment[4];
                            }
                        }

                        generatedMappings.push(mapping);
                        if (typeof mapping.originalLine === 'number') {
                            originalMappings.push(mapping);
                        }
                    }
                }

                quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
                this.__generatedMappings = generatedMappings;

                quickSort(originalMappings, util.compareByOriginalPositions);
                this.__originalMappings = originalMappings;
            };

        /**
         * Find the mapping that best matches the hypothetical "needle" mapping that
         * we are searching for in the given "haystack" of mappings.
         */
        BasicSourceMapConsumer.prototype._findMapping =
            function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                                   aColumnName, aComparator, aBias) {
                // To return the position we are searching for, we must first find the
                // mapping for the given position and then return the opposite position it
                // points to. Because the mappings are sorted, we can use binary search to
                // find the best mapping.

                if (aNeedle[aLineName] <= 0) {
                    throw new TypeError('Line must be greater than or equal to 1, got '
                        + aNeedle[aLineName]);
                }
                if (aNeedle[aColumnName] < 0) {
                    throw new TypeError('Column must be greater than or equal to 0, got '
                        + aNeedle[aColumnName]);
                }

                return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
            };

        /**
         * Compute the last column for each generated mapping. The last column is
         * inclusive.
         */
        BasicSourceMapConsumer.prototype.computeColumnSpans =
            function SourceMapConsumer_computeColumnSpans() {
                for (var index = 0; index < this._generatedMappings.length; ++index) {
                    var mapping = this._generatedMappings[index];

                    // Mappings do not contain a field for the last generated columnt. We
                    // can come up with an optimistic estimate, however, by assuming that
                    // mappings are contiguous (i.e. given two consecutive mappings, the
                    // first mapping ends where the second one starts).
                    if (index + 1 < this._generatedMappings.length) {
                        var nextMapping = this._generatedMappings[index + 1];

                        if (mapping.generatedLine === nextMapping.generatedLine) {
                            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
                            continue;
                        }
                    }

                    // The last mapping for each line spans the entire line.
                    mapping.lastGeneratedColumn = Infinity;
                }
            };

        /**
         * Returns the original source, line, and column information for the generated
         * source's line and column positions provided. The only argument is an object
         * with the following properties:
         *
         *   - line: The line number in the generated source.
         *   - column: The column number in the generated source.
         *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
         *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
         *     closest element that is smaller than or greater than the one we are
         *     searching for, respectively, if the exact element cannot be found.
         *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
         *
         * and an object is returned with the following properties:
         *
         *   - source: The original source file, or null.
         *   - line: The line number in the original source, or null.
         *   - column: The column number in the original source, or null.
         *   - name: The original identifier, or null.
         */
        BasicSourceMapConsumer.prototype.originalPositionFor =
            function SourceMapConsumer_originalPositionFor(aArgs) {
                var needle = {
                    generatedLine: util.getArg(aArgs, 'line'),
                    generatedColumn: util.getArg(aArgs, 'column')
                };

                var index = this._findMapping(
                    needle,
                    this._generatedMappings,
                    "generatedLine",
                    "generatedColumn",
                    util.compareByGeneratedPositionsDeflated,
                    util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
                );

                if (index >= 0) {
                    var mapping = this._generatedMappings[index];

                    if (mapping.generatedLine === needle.generatedLine) {
                        var source = util.getArg(mapping, 'source', null);
                        if (source !== null) {
                            source = this._sources.at(source);
                            if (this.sourceRoot != null) {
                                source = util.join(this.sourceRoot, source);
                            }
                        }
                        var name = util.getArg(mapping, 'name', null);
                        if (name !== null) {
                            name = this._names.at(name);
                        }
                        return {
                            source: source,
                            line: util.getArg(mapping, 'originalLine', null),
                            column: util.getArg(mapping, 'originalColumn', null),
                            name: name
                        };
                    }
                }

                return {
                    source: null,
                    line: null,
                    column: null,
                    name: null
                };
            };

        /**
         * Return true if we have the source content for every source in the source
         * map, false otherwise.
         */
        BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
            function BasicSourceMapConsumer_hasContentsOfAllSources() {
                if (!this.sourcesContent) {
                    return false;
                }
                return this.sourcesContent.length >= this._sources.size() &&
                    !this.sourcesContent.some(function (sc) { return sc == null; });
            };

        /**
         * Returns the original source content. The only argument is the url of the
         * original source file. Returns null if no original source content is
         * availible.
         */
        BasicSourceMapConsumer.prototype.sourceContentFor =
            function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
                if (!this.sourcesContent) {
                    return null;
                }

                if (this.sourceRoot != null) {
                    aSource = util.relative(this.sourceRoot, aSource);
                }

                if (this._sources.has(aSource)) {
                    return this.sourcesContent[this._sources.indexOf(aSource)];
                }

                var url;
                if (this.sourceRoot != null
                    && (url = util.urlParse(this.sourceRoot))) {
                    // XXX: file:// URIs and absolute paths lead to unexpected behavior for
                    // many users. We can help them out when they expect file:// URIs to
                    // behave like it would if they were running a local HTTP server. See
                    // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
                    var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
                    if (url.scheme == "file"
                        && this._sources.has(fileUriAbsPath)) {
                        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
                    }

                    if ((!url.path || url.path == "/")
                        && this._sources.has("/" + aSource)) {
                        return this.sourcesContent[this._sources.indexOf("/" + aSource)];
                    }
                }

                // This function is used recursively from
                // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
                // don't want to throw if we can't find the source - we just want to
                // return null, so we provide a flag to exit gracefully.
                if (nullOnMissing) {
                    return null;
                }
                else {
                    throw new Error('"' + aSource + '" is not in the SourceMap.');
                }
            };

        /**
         * Returns the generated line and column information for the original source,
         * line, and column positions provided. The only argument is an object with
         * the following properties:
         *
         *   - source: The filename of the original source.
         *   - line: The line number in the original source.
         *   - column: The column number in the original source.
         *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
         *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
         *     closest element that is smaller than or greater than the one we are
         *     searching for, respectively, if the exact element cannot be found.
         *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
         *
         * and an object is returned with the following properties:
         *
         *   - line: The line number in the generated source, or null.
         *   - column: The column number in the generated source, or null.
         */
        BasicSourceMapConsumer.prototype.generatedPositionFor =
            function SourceMapConsumer_generatedPositionFor(aArgs) {
                var source = util.getArg(aArgs, 'source');
                if (this.sourceRoot != null) {
                    source = util.relative(this.sourceRoot, source);
                }
                if (!this._sources.has(source)) {
                    return {
                        line: null,
                        column: null,
                        lastColumn: null
                    };
                }
                source = this._sources.indexOf(source);

                var needle = {
                    source: source,
                    originalLine: util.getArg(aArgs, 'line'),
                    originalColumn: util.getArg(aArgs, 'column')
                };

                var index = this._findMapping(
                    needle,
                    this._originalMappings,
                    "originalLine",
                    "originalColumn",
                    util.compareByOriginalPositions,
                    util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
                );

                if (index >= 0) {
                    var mapping = this._originalMappings[index];

                    if (mapping.source === needle.source) {
                        return {
                            line: util.getArg(mapping, 'generatedLine', null),
                            column: util.getArg(mapping, 'generatedColumn', null),
                            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
                        };
                    }
                }

                return {
                    line: null,
                    column: null,
                    lastColumn: null
                };
            };

        exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

        /**
         * An IndexedSourceMapConsumer instance represents a parsed source map which
         * we can query for information. It differs from BasicSourceMapConsumer in
         * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
         * input.
         *
         * The only parameter is a raw source map (either as a JSON string, or already
         * parsed to an object). According to the spec for indexed source maps, they
         * have the following attributes:
         *
         *   - version: Which version of the source map spec this map is following.
         *   - file: Optional. The generated file this source map is associated with.
         *   - sections: A list of section definitions.
         *
         * Each value under the "sections" field has two fields:
         *   - offset: The offset into the original specified at which this section
         *       begins to apply, defined as an object with a "line" and "column"
         *       field.
         *   - map: A source map definition. This source map could also be indexed,
         *       but doesn't have to be.
         *
         * Instead of the "map" field, it's also possible to have a "url" field
         * specifying a URL to retrieve a source map from, but that's currently
         * unsupported.
         *
         * Here's an example source map, taken from the source map spec[0], but
         * modified to omit a section which uses the "url" field.
         *
         *  {
   *    version : 3,
   *    file: "app.js",
   *    sections: [{
   *      offset: {line:100, column:10},
   *      map: {
   *        version : 3,
   *        file: "section.js",
   *        sources: ["foo.js", "bar.js"],
   *        names: ["src", "maps", "are", "fun"],
   *        mappings: "AAAA,E;;ABCDE;"
   *      }
   *    }],
   *  }
         *
         * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
         */
        function IndexedSourceMapConsumer(aSourceMap) {
            var sourceMap = aSourceMap;
            if (typeof aSourceMap === 'string') {
                sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
            }

            var version = util.getArg(sourceMap, 'version');
            var sections = util.getArg(sourceMap, 'sections');

            if (version != this._version) {
                throw new Error('Unsupported version: ' + version);
            }

            this._sources = new ArraySet();
            this._names = new ArraySet();

            var lastOffset = {
                line: -1,
                column: 0
            };
            this._sections = sections.map(function (s) {
                if (s.url) {
                    // The url field will require support for asynchronicity.
                    // See https://github.com/mozilla/source-map/issues/16
                    throw new Error('Support for url field in sections not implemented.');
                }
                var offset = util.getArg(s, 'offset');
                var offsetLine = util.getArg(offset, 'line');
                var offsetColumn = util.getArg(offset, 'column');

                if (offsetLine < lastOffset.line ||
                    (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
                    throw new Error('Section offsets must be ordered and non-overlapping.');
                }
                lastOffset = offset;

                return {
                    generatedOffset: {
                        // The offset fields are 0-based, but we use 1-based indices when
                        // encoding/decoding from VLQ.
                        generatedLine: offsetLine + 1,
                        generatedColumn: offsetColumn + 1
                    },
                    consumer: new SourceMapConsumer(util.getArg(s, 'map'))
                }
            });
        }

        IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
        IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

        /**
         * The version of the source mapping spec that we are consuming.
         */
        IndexedSourceMapConsumer.prototype._version = 3;

        /**
         * The list of original sources.
         */
        Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
            get: function () {
                var sources = [];
                for (var i = 0; i < this._sections.length; i++) {
                    for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
                        sources.push(this._sections[i].consumer.sources[j]);
                    }
                };
                return sources;
            }
        });

        /**
         * Returns the original source, line, and column information for the generated
         * source's line and column positions provided. The only argument is an object
         * with the following properties:
         *
         *   - line: The line number in the generated source.
         *   - column: The column number in the generated source.
         *
         * and an object is returned with the following properties:
         *
         *   - source: The original source file, or null.
         *   - line: The line number in the original source, or null.
         *   - column: The column number in the original source, or null.
         *   - name: The original identifier, or null.
         */
        IndexedSourceMapConsumer.prototype.originalPositionFor =
            function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
                var needle = {
                    generatedLine: util.getArg(aArgs, 'line'),
                    generatedColumn: util.getArg(aArgs, 'column')
                };

                // Find the section containing the generated position we're trying to map
                // to an original position.
                var sectionIndex = binarySearch.search(needle, this._sections,
                    function(needle, section) {
                        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
                        if (cmp) {
                            return cmp;
                        }

                        return (needle.generatedColumn -
                        section.generatedOffset.generatedColumn);
                    });
                var section = this._sections[sectionIndex];

                if (!section) {
                    return {
                        source: null,
                        line: null,
                        column: null,
                        name: null
                    };
                }

                return section.consumer.originalPositionFor({
                    line: needle.generatedLine -
                    (section.generatedOffset.generatedLine - 1),
                    column: needle.generatedColumn -
                    (section.generatedOffset.generatedLine === needle.generatedLine
                        ? section.generatedOffset.generatedColumn - 1
                        : 0),
                    bias: aArgs.bias
                });
            };

        /**
         * Return true if we have the source content for every source in the source
         * map, false otherwise.
         */
        IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
            function IndexedSourceMapConsumer_hasContentsOfAllSources() {
                return this._sections.every(function (s) {
                    return s.consumer.hasContentsOfAllSources();
                });
            };

        /**
         * Returns the original source content. The only argument is the url of the
         * original source file. Returns null if no original source content is
         * available.
         */
        IndexedSourceMapConsumer.prototype.sourceContentFor =
            function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
                for (var i = 0; i < this._sections.length; i++) {
                    var section = this._sections[i];

                    var content = section.consumer.sourceContentFor(aSource, true);
                    if (content) {
                        return content;
                    }
                }
                if (nullOnMissing) {
                    return null;
                }
                else {
                    throw new Error('"' + aSource + '" is not in the SourceMap.');
                }
            };

        /**
         * Returns the generated line and column information for the original source,
         * line, and column positions provided. The only argument is an object with
         * the following properties:
         *
         *   - source: The filename of the original source.
         *   - line: The line number in the original source.
         *   - column: The column number in the original source.
         *
         * and an object is returned with the following properties:
         *
         *   - line: The line number in the generated source, or null.
         *   - column: The column number in the generated source, or null.
         */
        IndexedSourceMapConsumer.prototype.generatedPositionFor =
            function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
                for (var i = 0; i < this._sections.length; i++) {
                    var section = this._sections[i];

                    // Only consider this section if the requested source is in the list of
                    // sources of the consumer.
                    if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
                        continue;
                    }
                    var generatedPosition = section.consumer.generatedPositionFor(aArgs);
                    if (generatedPosition) {
                        var ret = {
                            line: generatedPosition.line +
                            (section.generatedOffset.generatedLine - 1),
                            column: generatedPosition.column +
                            (section.generatedOffset.generatedLine === generatedPosition.line
                                ? section.generatedOffset.generatedColumn - 1
                                : 0)
                        };
                        return ret;
                    }
                }

                return {
                    line: null,
                    column: null
                };
            };

        /**
         * Parse the mappings in a string in to a data structure which we can easily
         * query (the ordered arrays in the `this.__generatedMappings` and
         * `this.__originalMappings` properties).
         */
        IndexedSourceMapConsumer.prototype._parseMappings =
            function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
                this.__generatedMappings = [];
                this.__originalMappings = [];
                for (var i = 0; i < this._sections.length; i++) {
                    var section = this._sections[i];
                    var sectionMappings = section.consumer._generatedMappings;
                    for (var j = 0; j < sectionMappings.length; j++) {
                        var mapping = sectionMappings[i];

                        var source = section.consumer._sources.at(mapping.source);
                        if (section.consumer.sourceRoot !== null) {
                            source = util.join(section.consumer.sourceRoot, source);
                        }
                        this._sources.add(source);
                        source = this._sources.indexOf(source);

                        var name = section.consumer._names.at(mapping.name);
                        this._names.add(name);
                        name = this._names.indexOf(name);

                        // The mappings coming from the consumer for the section have
                        // generated positions relative to the start of the section, so we
                        // need to offset them to be relative to the start of the concatenated
                        // generated file.
                        var adjustedMapping = {
                            source: source,
                            generatedLine: mapping.generatedLine +
                            (section.generatedOffset.generatedLine - 1),
                            generatedColumn: mapping.column +
                            (section.generatedOffset.generatedLine === mapping.generatedLine)
                                ? section.generatedOffset.generatedColumn - 1
                                : 0,
                            originalLine: mapping.originalLine,
                            originalColumn: mapping.originalColumn,
                            name: name
                        };

                        this.__generatedMappings.push(adjustedMapping);
                        if (typeof adjustedMapping.originalLine === 'number') {
                            this.__originalMappings.push(adjustedMapping);
                        }
                    };
                };

                quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
                quickSort(this.__originalMappings, util.compareByOriginalPositions);
            };

        exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;

    });

},{"./array-set":362,"./base64-vlq":363,"./binary-search":365,"./quick-sort":367,"./util":371,"amdefine":329}],369:[function(require,module,exports){
    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */
    if (typeof define !== 'function') {
        var define = require('amdefine')(module, require);
    }
    define(function (require, exports, module) {

        var base64VLQ = require('./base64-vlq');
        var util = require('./util');
        var ArraySet = require('./array-set').ArraySet;
        var MappingList = require('./mapping-list').MappingList;

        /**
         * An instance of the SourceMapGenerator represents a source map which is
         * being built incrementally. You may pass an object with the following
         * properties:
         *
         *   - file: The filename of the generated source.
         *   - sourceRoot: A root for all relative URLs in this source map.
         */
        function SourceMapGenerator(aArgs) {
            if (!aArgs) {
                aArgs = {};
            }
            this._file = util.getArg(aArgs, 'file', null);
            this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
            this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
            this._sources = new ArraySet();
            this._names = new ArraySet();
            this._mappings = new MappingList();
            this._sourcesContents = null;
        }

        SourceMapGenerator.prototype._version = 3;

        /**
         * Creates a new SourceMapGenerator based on a SourceMapConsumer
         *
         * @param aSourceMapConsumer The SourceMap.
         */
        SourceMapGenerator.fromSourceMap =
            function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
                var sourceRoot = aSourceMapConsumer.sourceRoot;
                var generator = new SourceMapGenerator({
                    file: aSourceMapConsumer.file,
                    sourceRoot: sourceRoot
                });
                aSourceMapConsumer.eachMapping(function (mapping) {
                    var newMapping = {
                        generated: {
                            line: mapping.generatedLine,
                            column: mapping.generatedColumn
                        }
                    };

                    if (mapping.source != null) {
                        newMapping.source = mapping.source;
                        if (sourceRoot != null) {
                            newMapping.source = util.relative(sourceRoot, newMapping.source);
                        }

                        newMapping.original = {
                            line: mapping.originalLine,
                            column: mapping.originalColumn
                        };

                        if (mapping.name != null) {
                            newMapping.name = mapping.name;
                        }
                    }

                    generator.addMapping(newMapping);
                });
                aSourceMapConsumer.sources.forEach(function (sourceFile) {
                    var content = aSourceMapConsumer.sourceContentFor(sourceFile);
                    if (content != null) {
                        generator.setSourceContent(sourceFile, content);
                    }
                });
                return generator;
            };

        /**
         * Add a single mapping from original source line and column to the generated
         * source's line and column for this source map being created. The mapping
         * object should have the following properties:
         *
         *   - generated: An object with the generated line and column positions.
         *   - original: An object with the original line and column positions.
         *   - source: The original source file (relative to the sourceRoot).
         *   - name: An optional original token name for this mapping.
         */
        SourceMapGenerator.prototype.addMapping =
            function SourceMapGenerator_addMapping(aArgs) {
                var generated = util.getArg(aArgs, 'generated');
                var original = util.getArg(aArgs, 'original', null);
                var source = util.getArg(aArgs, 'source', null);
                var name = util.getArg(aArgs, 'name', null);

                if (!this._skipValidation) {
                    this._validateMapping(generated, original, source, name);
                }

                if (source != null && !this._sources.has(source)) {
                    this._sources.add(source);
                }

                if (name != null && !this._names.has(name)) {
                    this._names.add(name);
                }

                this._mappings.add({
                    generatedLine: generated.line,
                    generatedColumn: generated.column,
                    originalLine: original != null && original.line,
                    originalColumn: original != null && original.column,
                    source: source,
                    name: name
                });
            };

        /**
         * Set the source content for a source file.
         */
        SourceMapGenerator.prototype.setSourceContent =
            function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
                var source = aSourceFile;
                if (this._sourceRoot != null) {
                    source = util.relative(this._sourceRoot, source);
                }

                if (aSourceContent != null) {
                    // Add the source content to the _sourcesContents map.
                    // Create a new _sourcesContents map if the property is null.
                    if (!this._sourcesContents) {
                        this._sourcesContents = {};
                    }
                    this._sourcesContents[util.toSetString(source)] = aSourceContent;
                } else if (this._sourcesContents) {
                    // Remove the source file from the _sourcesContents map.
                    // If the _sourcesContents map is empty, set the property to null.
                    delete this._sourcesContents[util.toSetString(source)];
                    if (Object.keys(this._sourcesContents).length === 0) {
                        this._sourcesContents = null;
                    }
                }
            };

        /**
         * Applies the mappings of a sub-source-map for a specific source file to the
         * source map being generated. Each mapping to the supplied source file is
         * rewritten using the supplied source map. Note: The resolution for the
         * resulting mappings is the minimium of this map and the supplied map.
         *
         * @param aSourceMapConsumer The source map to be applied.
         * @param aSourceFile Optional. The filename of the source file.
         *        If omitted, SourceMapConsumer's file property will be used.
         * @param aSourceMapPath Optional. The dirname of the path to the source map
         *        to be applied. If relative, it is relative to the SourceMapConsumer.
         *        This parameter is needed when the two source maps aren't in the same
         *        directory, and the source map to be applied contains relative source
         *        paths. If so, those relative source paths need to be rewritten
         *        relative to the SourceMapGenerator.
         */
        SourceMapGenerator.prototype.applySourceMap =
            function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
                var sourceFile = aSourceFile;
                // If aSourceFile is omitted, we will use the file property of the SourceMap
                if (aSourceFile == null) {
                    if (aSourceMapConsumer.file == null) {
                        throw new Error(
                            'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
                            'or the source map\'s "file" property. Both were omitted.'
                        );
                    }
                    sourceFile = aSourceMapConsumer.file;
                }
                var sourceRoot = this._sourceRoot;
                // Make "sourceFile" relative if an absolute Url is passed.
                if (sourceRoot != null) {
                    sourceFile = util.relative(sourceRoot, sourceFile);
                }
                // Applying the SourceMap can add and remove items from the sources and
                // the names array.
                var newSources = new ArraySet();
                var newNames = new ArraySet();

                // Find mappings for the "sourceFile"
                this._mappings.unsortedForEach(function (mapping) {
                    if (mapping.source === sourceFile && mapping.originalLine != null) {
                        // Check if it can be mapped by the source map, then update the mapping.
                        var original = aSourceMapConsumer.originalPositionFor({
                            line: mapping.originalLine,
                            column: mapping.originalColumn
                        });
                        if (original.source != null) {
                            // Copy mapping
                            mapping.source = original.source;
                            if (aSourceMapPath != null) {
                                mapping.source = util.join(aSourceMapPath, mapping.source)
                            }
                            if (sourceRoot != null) {
                                mapping.source = util.relative(sourceRoot, mapping.source);
                            }
                            mapping.originalLine = original.line;
                            mapping.originalColumn = original.column;
                            if (original.name != null) {
                                mapping.name = original.name;
                            }
                        }
                    }

                    var source = mapping.source;
                    if (source != null && !newSources.has(source)) {
                        newSources.add(source);
                    }

                    var name = mapping.name;
                    if (name != null && !newNames.has(name)) {
                        newNames.add(name);
                    }

                }, this);
                this._sources = newSources;
                this._names = newNames;

                // Copy sourcesContents of applied map.
                aSourceMapConsumer.sources.forEach(function (sourceFile) {
                    var content = aSourceMapConsumer.sourceContentFor(sourceFile);
                    if (content != null) {
                        if (aSourceMapPath != null) {
                            sourceFile = util.join(aSourceMapPath, sourceFile);
                        }
                        if (sourceRoot != null) {
                            sourceFile = util.relative(sourceRoot, sourceFile);
                        }
                        this.setSourceContent(sourceFile, content);
                    }
                }, this);
            };

        /**
         * A mapping can have one of the three levels of data:
         *
         *   1. Just the generated position.
         *   2. The Generated position, original position, and original source.
         *   3. Generated and original position, original source, as well as a name
         *      token.
         *
         * To maintain consistency, we validate that any new mapping being added falls
         * in to one of these categories.
         */
        SourceMapGenerator.prototype._validateMapping =
            function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                                        aName) {
                if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
                    && aGenerated.line > 0 && aGenerated.column >= 0
                    && !aOriginal && !aSource && !aName) {
                    // Case 1.
                    return;
                }
                else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
                    && aOriginal && 'line' in aOriginal && 'column' in aOriginal
                    && aGenerated.line > 0 && aGenerated.column >= 0
                    && aOriginal.line > 0 && aOriginal.column >= 0
                    && aSource) {
                    // Cases 2 and 3.
                    return;
                }
                else {
                    throw new Error('Invalid mapping: ' + JSON.stringify({
                            generated: aGenerated,
                            source: aSource,
                            original: aOriginal,
                            name: aName
                        }));
                }
            };

        /**
         * Serialize the accumulated mappings in to the stream of base 64 VLQs
         * specified by the source map format.
         */
        SourceMapGenerator.prototype._serializeMappings =
            function SourceMapGenerator_serializeMappings() {
                var previousGeneratedColumn = 0;
                var previousGeneratedLine = 1;
                var previousOriginalColumn = 0;
                var previousOriginalLine = 0;
                var previousName = 0;
                var previousSource = 0;
                var result = '';
                var mapping;

                var mappings = this._mappings.toArray();
                for (var i = 0, len = mappings.length; i < len; i++) {
                    mapping = mappings[i];

                    if (mapping.generatedLine !== previousGeneratedLine) {
                        previousGeneratedColumn = 0;
                        while (mapping.generatedLine !== previousGeneratedLine) {
                            result += ';';
                            previousGeneratedLine++;
                        }
                    }
                    else {
                        if (i > 0) {
                            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
                                continue;
                            }
                            result += ',';
                        }
                    }

                    result += base64VLQ.encode(mapping.generatedColumn
                        - previousGeneratedColumn);
                    previousGeneratedColumn = mapping.generatedColumn;

                    if (mapping.source != null) {
                        result += base64VLQ.encode(this._sources.indexOf(mapping.source)
                            - previousSource);
                        previousSource = this._sources.indexOf(mapping.source);

                        // lines are stored 0-based in SourceMap spec version 3
                        result += base64VLQ.encode(mapping.originalLine - 1
                            - previousOriginalLine);
                        previousOriginalLine = mapping.originalLine - 1;

                        result += base64VLQ.encode(mapping.originalColumn
                            - previousOriginalColumn);
                        previousOriginalColumn = mapping.originalColumn;

                        if (mapping.name != null) {
                            result += base64VLQ.encode(this._names.indexOf(mapping.name)
                                - previousName);
                            previousName = this._names.indexOf(mapping.name);
                        }
                    }
                }

                return result;
            };

        SourceMapGenerator.prototype._generateSourcesContent =
            function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
                return aSources.map(function (source) {
                    if (!this._sourcesContents) {
                        return null;
                    }
                    if (aSourceRoot != null) {
                        source = util.relative(aSourceRoot, source);
                    }
                    var key = util.toSetString(source);
                    return Object.prototype.hasOwnProperty.call(this._sourcesContents,
                        key)
                        ? this._sourcesContents[key]
                        : null;
                }, this);
            };

        /**
         * Externalize the source map.
         */
        SourceMapGenerator.prototype.toJSON =
            function SourceMapGenerator_toJSON() {
                var map = {
                    version: this._version,
                    sources: this._sources.toArray(),
                    names: this._names.toArray(),
                    mappings: this._serializeMappings()
                };
                if (this._file != null) {
                    map.file = this._file;
                }
                if (this._sourceRoot != null) {
                    map.sourceRoot = this._sourceRoot;
                }
                if (this._sourcesContents) {
                    map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
                }

                return map;
            };

        /**
         * Render the source map being generated to a string.
         */
        SourceMapGenerator.prototype.toString =
            function SourceMapGenerator_toString() {
                return JSON.stringify(this.toJSON());
            };

        exports.SourceMapGenerator = SourceMapGenerator;

    });

},{"./array-set":362,"./base64-vlq":363,"./mapping-list":366,"./util":371,"amdefine":329}],370:[function(require,module,exports){
    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */
    if (typeof define !== 'function') {
        var define = require('amdefine')(module, require);
    }
    define(function (require, exports, module) {

        var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;
        var util = require('./util');

        // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
        // operating systems these days (capturing the result).
        var REGEX_NEWLINE = /(\r?\n)/;

        // Newline character code for charCodeAt() comparisons
        var NEWLINE_CODE = 10;

        // Private symbol for identifying `SourceNode`s when multiple versions of
        // the source-map library are loaded. This MUST NOT CHANGE across
        // versions!
        var isSourceNode = "$$$isSourceNode$$$";

        /**
         * SourceNodes provide a way to abstract over interpolating/concatenating
         * snippets of generated JavaScript source code while maintaining the line and
         * column information associated with the original source code.
         *
         * @param aLine The original line number.
         * @param aColumn The original column number.
         * @param aSource The original source's filename.
         * @param aChunks Optional. An array of strings which are snippets of
         *        generated JS, or other SourceNodes.
         * @param aName The original identifier.
         */
        function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
            this.children = [];
            this.sourceContents = {};
            this.line = aLine == null ? null : aLine;
            this.column = aColumn == null ? null : aColumn;
            this.source = aSource == null ? null : aSource;
            this.name = aName == null ? null : aName;
            this[isSourceNode] = true;
            if (aChunks != null) this.add(aChunks);
        }

        /**
         * Creates a SourceNode from generated code and a SourceMapConsumer.
         *
         * @param aGeneratedCode The generated code
         * @param aSourceMapConsumer The SourceMap for the generated code
         * @param aRelativePath Optional. The path that relative sources in the
         *        SourceMapConsumer should be relative to.
         */
        SourceNode.fromStringWithSourceMap =
            function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
                // The SourceNode we want to fill with the generated code
                // and the SourceMap
                var node = new SourceNode();

                // All even indices of this array are one line of the generated code,
                // while all odd indices are the newlines between two adjacent lines
                // (since `REGEX_NEWLINE` captures its match).
                // Processed fragments are removed from this array, by calling `shiftNextLine`.
                var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
                var shiftNextLine = function() {
                    var lineContents = remainingLines.shift();
                    // The last line of a file might not have a newline.
                    var newLine = remainingLines.shift() || "";
                    return lineContents + newLine;
                };

                // We need to remember the position of "remainingLines"
                var lastGeneratedLine = 1, lastGeneratedColumn = 0;

                // The generate SourceNodes we need a code range.
                // To extract it current and last mapping is used.
                // Here we store the last mapping.
                var lastMapping = null;

                aSourceMapConsumer.eachMapping(function (mapping) {
                    if (lastMapping !== null) {
                        // We add the code from "lastMapping" to "mapping":
                        // First check if there is a new line in between.
                        if (lastGeneratedLine < mapping.generatedLine) {
                            var code = "";
                            // Associate first line with "lastMapping"
                            addMappingWithCode(lastMapping, shiftNextLine());
                            lastGeneratedLine++;
                            lastGeneratedColumn = 0;
                            // The remaining code is added without mapping
                        } else {
                            // There is no new line in between.
                            // Associate the code between "lastGeneratedColumn" and
                            // "mapping.generatedColumn" with "lastMapping"
                            var nextLine = remainingLines[0];
                            var code = nextLine.substr(0, mapping.generatedColumn -
                                lastGeneratedColumn);
                            remainingLines[0] = nextLine.substr(mapping.generatedColumn -
                                lastGeneratedColumn);
                            lastGeneratedColumn = mapping.generatedColumn;
                            addMappingWithCode(lastMapping, code);
                            // No more remaining code, continue
                            lastMapping = mapping;
                            return;
                        }
                    }
                    // We add the generated code until the first mapping
                    // to the SourceNode without any mapping.
                    // Each line is added as separate string.
                    while (lastGeneratedLine < mapping.generatedLine) {
                        node.add(shiftNextLine());
                        lastGeneratedLine++;
                    }
                    if (lastGeneratedColumn < mapping.generatedColumn) {
                        var nextLine = remainingLines[0];
                        node.add(nextLine.substr(0, mapping.generatedColumn));
                        remainingLines[0] = nextLine.substr(mapping.generatedColumn);
                        lastGeneratedColumn = mapping.generatedColumn;
                    }
                    lastMapping = mapping;
                }, this);
                // We have processed all mappings.
                if (remainingLines.length > 0) {
                    if (lastMapping) {
                        // Associate the remaining code in the current line with "lastMapping"
                        addMappingWithCode(lastMapping, shiftNextLine());
                    }
                    // and add the remaining lines without any mapping
                    node.add(remainingLines.join(""));
                }

                // Copy sourcesContent into SourceNode
                aSourceMapConsumer.sources.forEach(function (sourceFile) {
                    var content = aSourceMapConsumer.sourceContentFor(sourceFile);
                    if (content != null) {
                        if (aRelativePath != null) {
                            sourceFile = util.join(aRelativePath, sourceFile);
                        }
                        node.setSourceContent(sourceFile, content);
                    }
                });

                return node;

                function addMappingWithCode(mapping, code) {
                    if (mapping === null || mapping.source === undefined) {
                        node.add(code);
                    } else {
                        var source = aRelativePath
                            ? util.join(aRelativePath, mapping.source)
                            : mapping.source;
                        node.add(new SourceNode(mapping.originalLine,
                            mapping.originalColumn,
                            source,
                            code,
                            mapping.name));
                    }
                }
            };

        /**
         * Add a chunk of generated JS to this source node.
         *
         * @param aChunk A string snippet of generated JS code, another instance of
         *        SourceNode, or an array where each member is one of those things.
         */
        SourceNode.prototype.add = function SourceNode_add(aChunk) {
            if (Array.isArray(aChunk)) {
                aChunk.forEach(function (chunk) {
                    this.add(chunk);
                }, this);
            }
            else if (aChunk[isSourceNode] || typeof aChunk === "string") {
                if (aChunk) {
                    this.children.push(aChunk);
                }
            }
            else {
                throw new TypeError(
                    "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
                );
            }
            return this;
        };

        /**
         * Add a chunk of generated JS to the beginning of this source node.
         *
         * @param aChunk A string snippet of generated JS code, another instance of
         *        SourceNode, or an array where each member is one of those things.
         */
        SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
            if (Array.isArray(aChunk)) {
                for (var i = aChunk.length-1; i >= 0; i--) {
                    this.prepend(aChunk[i]);
                }
            }
            else if (aChunk[isSourceNode] || typeof aChunk === "string") {
                this.children.unshift(aChunk);
            }
            else {
                throw new TypeError(
                    "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
                );
            }
            return this;
        };

        /**
         * Walk over the tree of JS snippets in this node and its children. The
         * walking function is called once for each snippet of JS and is passed that
         * snippet and the its original associated source's line/column location.
         *
         * @param aFn The traversal function.
         */
        SourceNode.prototype.walk = function SourceNode_walk(aFn) {
            var chunk;
            for (var i = 0, len = this.children.length; i < len; i++) {
                chunk = this.children[i];
                if (chunk[isSourceNode]) {
                    chunk.walk(aFn);
                }
                else {
                    if (chunk !== '') {
                        aFn(chunk, { source: this.source,
                            line: this.line,
                            column: this.column,
                            name: this.name });
                    }
                }
            }
        };

        /**
         * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
         * each of `this.children`.
         *
         * @param aSep The separator.
         */
        SourceNode.prototype.join = function SourceNode_join(aSep) {
            var newChildren;
            var i;
            var len = this.children.length;
            if (len > 0) {
                newChildren = [];
                for (i = 0; i < len-1; i++) {
                    newChildren.push(this.children[i]);
                    newChildren.push(aSep);
                }
                newChildren.push(this.children[i]);
                this.children = newChildren;
            }
            return this;
        };

        /**
         * Call String.prototype.replace on the very right-most source snippet. Useful
         * for trimming whitespace from the end of a source node, etc.
         *
         * @param aPattern The pattern to replace.
         * @param aReplacement The thing to replace the pattern with.
         */
        SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
            var lastChild = this.children[this.children.length - 1];
            if (lastChild[isSourceNode]) {
                lastChild.replaceRight(aPattern, aReplacement);
            }
            else if (typeof lastChild === 'string') {
                this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
            }
            else {
                this.children.push(''.replace(aPattern, aReplacement));
            }
            return this;
        };

        /**
         * Set the source content for a source file. This will be added to the SourceMapGenerator
         * in the sourcesContent field.
         *
         * @param aSourceFile The filename of the source file
         * @param aSourceContent The content of the source file
         */
        SourceNode.prototype.setSourceContent =
            function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
                this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
            };

        /**
         * Walk over the tree of SourceNodes. The walking function is called for each
         * source file content and is passed the filename and source content.
         *
         * @param aFn The traversal function.
         */
        SourceNode.prototype.walkSourceContents =
            function SourceNode_walkSourceContents(aFn) {
                for (var i = 0, len = this.children.length; i < len; i++) {
                    if (this.children[i][isSourceNode]) {
                        this.children[i].walkSourceContents(aFn);
                    }
                }

                var sources = Object.keys(this.sourceContents);
                for (var i = 0, len = sources.length; i < len; i++) {
                    aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
                }
            };

        /**
         * Return the string representation of this source node. Walks over the tree
         * and concatenates all the various snippets together to one string.
         */
        SourceNode.prototype.toString = function SourceNode_toString() {
            var str = "";
            this.walk(function (chunk) {
                str += chunk;
            });
            return str;
        };

        /**
         * Returns the string representation of this source node along with a source
         * map.
         */
        SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
            var generated = {
                code: "",
                line: 1,
                column: 0
            };
            var map = new SourceMapGenerator(aArgs);
            var sourceMappingActive = false;
            var lastOriginalSource = null;
            var lastOriginalLine = null;
            var lastOriginalColumn = null;
            var lastOriginalName = null;
            this.walk(function (chunk, original) {
                generated.code += chunk;
                if (original.source !== null
                    && original.line !== null
                    && original.column !== null) {
                    if(lastOriginalSource !== original.source
                        || lastOriginalLine !== original.line
                        || lastOriginalColumn !== original.column
                        || lastOriginalName !== original.name) {
                        map.addMapping({
                            source: original.source,
                            original: {
                                line: original.line,
                                column: original.column
                            },
                            generated: {
                                line: generated.line,
                                column: generated.column
                            },
                            name: original.name
                        });
                    }
                    lastOriginalSource = original.source;
                    lastOriginalLine = original.line;
                    lastOriginalColumn = original.column;
                    lastOriginalName = original.name;
                    sourceMappingActive = true;
                } else if (sourceMappingActive) {
                    map.addMapping({
                        generated: {
                            line: generated.line,
                            column: generated.column
                        }
                    });
                    lastOriginalSource = null;
                    sourceMappingActive = false;
                }
                for (var idx = 0, length = chunk.length; idx < length; idx++) {
                    if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
                        generated.line++;
                        generated.column = 0;
                        // Mappings end at eol
                        if (idx + 1 === length) {
                            lastOriginalSource = null;
                            sourceMappingActive = false;
                        } else if (sourceMappingActive) {
                            map.addMapping({
                                source: original.source,
                                original: {
                                    line: original.line,
                                    column: original.column
                                },
                                generated: {
                                    line: generated.line,
                                    column: generated.column
                                },
                                name: original.name
                            });
                        }
                    } else {
                        generated.column++;
                    }
                }
            });
            this.walkSourceContents(function (sourceFile, sourceContent) {
                map.setSourceContent(sourceFile, sourceContent);
            });

            return { code: generated.code, map: map };
        };

        exports.SourceNode = SourceNode;

    });

},{"./source-map-generator":369,"./util":371,"amdefine":329}],371:[function(require,module,exports){
    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */
    if (typeof define !== 'function') {
        var define = require('amdefine')(module, require);
    }
    define(function (require, exports, module) {

        /**
         * This is a helper function for getting values from parameter/options
         * objects.
         *
         * @param args The object we are extracting values from
         * @param name The name of the property we are getting.
         * @param defaultValue An optional value to return if the property is missing
         * from the object. If this is not specified and the property is missing, an
         * error will be thrown.
         */
        function getArg(aArgs, aName, aDefaultValue) {
            if (aName in aArgs) {
                return aArgs[aName];
            } else if (arguments.length === 3) {
                return aDefaultValue;
            } else {
                throw new Error('"' + aName + '" is a required argument.');
            }
        }
        exports.getArg = getArg;

        var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
        var dataUrlRegexp = /^data:.+\,.+$/;

        function urlParse(aUrl) {
            var match = aUrl.match(urlRegexp);
            if (!match) {
                return null;
            }
            return {
                scheme: match[1],
                auth: match[2],
                host: match[3],
                port: match[4],
                path: match[5]
            };
        }
        exports.urlParse = urlParse;

        function urlGenerate(aParsedUrl) {
            var url = '';
            if (aParsedUrl.scheme) {
                url += aParsedUrl.scheme + ':';
            }
            url += '//';
            if (aParsedUrl.auth) {
                url += aParsedUrl.auth + '@';
            }
            if (aParsedUrl.host) {
                url += aParsedUrl.host;
            }
            if (aParsedUrl.port) {
                url += ":" + aParsedUrl.port
            }
            if (aParsedUrl.path) {
                url += aParsedUrl.path;
            }
            return url;
        }
        exports.urlGenerate = urlGenerate;

        /**
         * Normalizes a path, or the path portion of a URL:
         *
         * - Replaces consequtive slashes with one slash.
         * - Removes unnecessary '.' parts.
         * - Removes unnecessary '<dir>/..' parts.
         *
         * Based on code in the Node.js 'path' core module.
         *
         * @param aPath The path or url to normalize.
         */
        function normalize(aPath) {
            var path = aPath;
            var url = urlParse(aPath);
            if (url) {
                if (!url.path) {
                    return aPath;
                }
                path = url.path;
            }
            var isAbsolute = (path.charAt(0) === '/');

            var parts = path.split(/\/+/);
            for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
                part = parts[i];
                if (part === '.') {
                    parts.splice(i, 1);
                } else if (part === '..') {
                    up++;
                } else if (up > 0) {
                    if (part === '') {
                        // The first part is blank if the path is absolute. Trying to go
                        // above the root is a no-op. Therefore we can remove all '..' parts
                        // directly after the root.
                        parts.splice(i + 1, up);
                        up = 0;
                    } else {
                        parts.splice(i, 2);
                        up--;
                    }
                }
            }
            path = parts.join('/');

            if (path === '') {
                path = isAbsolute ? '/' : '.';
            }

            if (url) {
                url.path = path;
                return urlGenerate(url);
            }
            return path;
        }
        exports.normalize = normalize;

        /**
         * Joins two paths/URLs.
         *
         * @param aRoot The root path or URL.
         * @param aPath The path or URL to be joined with the root.
         *
         * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
         *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
         *   first.
         * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
         *   is updated with the result and aRoot is returned. Otherwise the result
         *   is returned.
         *   - If aPath is absolute, the result is aPath.
         *   - Otherwise the two paths are joined with a slash.
         * - Joining for example 'http://' and 'www.example.com' is also supported.
         */
        function join(aRoot, aPath) {
            if (aRoot === "") {
                aRoot = ".";
            }
            if (aPath === "") {
                aPath = ".";
            }
            var aPathUrl = urlParse(aPath);
            var aRootUrl = urlParse(aRoot);
            if (aRootUrl) {
                aRoot = aRootUrl.path || '/';
            }

            // `join(foo, '//www.example.org')`
            if (aPathUrl && !aPathUrl.scheme) {
                if (aRootUrl) {
                    aPathUrl.scheme = aRootUrl.scheme;
                }
                return urlGenerate(aPathUrl);
            }

            if (aPathUrl || aPath.match(dataUrlRegexp)) {
                return aPath;
            }

            // `join('http://', 'www.example.com')`
            if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
                aRootUrl.host = aPath;
                return urlGenerate(aRootUrl);
            }

            var joined = aPath.charAt(0) === '/'
                ? aPath
                : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

            if (aRootUrl) {
                aRootUrl.path = joined;
                return urlGenerate(aRootUrl);
            }
            return joined;
        }
        exports.join = join;

        /**
         * Make a path relative to a URL or another path.
         *
         * @param aRoot The root path or URL.
         * @param aPath The path or URL to be made relative to aRoot.
         */
        function relative(aRoot, aPath) {
            if (aRoot === "") {
                aRoot = ".";
            }

            aRoot = aRoot.replace(/\/$/, '');

            // It is possible for the path to be above the root. In this case, simply
            // checking whether the root is a prefix of the path won't work. Instead, we
            // need to remove components from the root one by one, until either we find
            // a prefix that fits, or we run out of components to remove.
            var level = 0;
            while (aPath.indexOf(aRoot + '/') !== 0) {
                var index = aRoot.lastIndexOf("/");
                if (index < 0) {
                    return aPath;
                }

                // If the only part of the root that is left is the scheme (i.e. http://,
                // file:///, etc.), one or more slashes (/), or simply nothing at all, we
                // have exhausted all components, so the path is not relative to the root.
                aRoot = aRoot.slice(0, index);
                if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
                    return aPath;
                }

                ++level;
            }

            // Make sure we add a "../" for each component we removed from the root.
            return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
        }
        exports.relative = relative;

        /**
         * Because behavior goes wacky when you set `__proto__` on objects, we
         * have to prefix all the strings in our set with an arbitrary character.
         *
         * See https://github.com/mozilla/source-map/pull/31 and
         * https://github.com/mozilla/source-map/issues/30
         *
         * @param String aStr
         */
        function toSetString(aStr) {
            return '$' + aStr;
        }
        exports.toSetString = toSetString;

        function fromSetString(aStr) {
            return aStr.substr(1);
        }
        exports.fromSetString = fromSetString;

        /**
         * Comparator between two mappings where the original positions are compared.
         *
         * Optionally pass in `true` as `onlyCompareGenerated` to consider two
         * mappings with the same original source/line/column, but different generated
         * line and column the same. Useful when searching for a mapping with a
         * stubbed out mapping.
         */
        function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
            var cmp = mappingA.source - mappingB.source;
            if (cmp !== 0) {
                return cmp;
            }

            cmp = mappingA.originalLine - mappingB.originalLine;
            if (cmp !== 0) {
                return cmp;
            }

            cmp = mappingA.originalColumn - mappingB.originalColumn;
            if (cmp !== 0 || onlyCompareOriginal) {
                return cmp;
            }

            cmp = mappingA.generatedColumn - mappingB.generatedColumn;
            if (cmp !== 0) {
                return cmp;
            }

            cmp = mappingA.generatedLine - mappingB.generatedLine;
            if (cmp !== 0) {
                return cmp;
            }

            return mappingA.name - mappingB.name;
        };
        exports.compareByOriginalPositions = compareByOriginalPositions;

        /**
         * Comparator between two mappings with deflated source and name indices where
         * the generated positions are compared.
         *
         * Optionally pass in `true` as `onlyCompareGenerated` to consider two
         * mappings with the same generated line and column, but different
         * source/name/original line and column the same. Useful when searching for a
         * mapping with a stubbed out mapping.
         */
        function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
            var cmp = mappingA.generatedLine - mappingB.generatedLine;
            if (cmp !== 0) {
                return cmp;
            }

            cmp = mappingA.generatedColumn - mappingB.generatedColumn;
            if (cmp !== 0 || onlyCompareGenerated) {
                return cmp;
            }

            cmp = mappingA.source - mappingB.source;
            if (cmp !== 0) {
                return cmp;
            }

            cmp = mappingA.originalLine - mappingB.originalLine;
            if (cmp !== 0) {
                return cmp;
            }

            cmp = mappingA.originalColumn - mappingB.originalColumn;
            if (cmp !== 0) {
                return cmp;
            }

            return mappingA.name - mappingB.name;
        };
        exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

        function strcmp(aStr1, aStr2) {
            if (aStr1 === aStr2) {
                return 0;
            }

            if (aStr1 > aStr2) {
                return 1;
            }

            return -1;
        }

        /**
         * Comparator between two mappings with inflated source and name strings where
         * the generated positions are compared.
         */
        function compareByGeneratedPositionsInflated(mappingA, mappingB) {
            var cmp = mappingA.generatedLine - mappingB.generatedLine;
            if (cmp !== 0) {
                return cmp;
            }

            cmp = mappingA.generatedColumn - mappingB.generatedColumn;
            if (cmp !== 0) {
                return cmp;
            }

            cmp = strcmp(mappingA.source, mappingB.source);
            if (cmp !== 0) {
                return cmp;
            }

            cmp = mappingA.originalLine - mappingB.originalLine;
            if (cmp !== 0) {
                return cmp;
            }

            cmp = mappingA.originalColumn - mappingB.originalColumn;
            if (cmp !== 0) {
                return cmp;
            }

            return strcmp(mappingA.name, mappingB.name);
        };
        exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

    });

},{"amdefine":329}],372:[function(require,module,exports){
// Create a simple path alias to allow browserify to resolve
// the runtime on a supported path.
    module.exports = require('./dist/cjs/handlebars.runtime')['default'];

},{"./dist/cjs/handlebars.runtime":332}],373:[function(require,module,exports){
    module.exports = require("handlebars/runtime")["default"];

},{"handlebars/runtime":372}],374:[function(require,module,exports){
    (function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
        function normalizeArray(parts, allowAboveRoot) {
            // if the path tries to go above the root, `up` ends up > 0
            var up = 0;
            for (var i = parts.length - 1; i >= 0; i--) {
                var last = parts[i];
                if (last === '.') {
                    parts.splice(i, 1);
                } else if (last === '..') {
                    parts.splice(i, 1);
                    up++;
                } else if (up) {
                    parts.splice(i, 1);
                    up--;
                }
            }

            // if the path is allowed to go above the root, restore leading ..s
            if (allowAboveRoot) {
                for (; up--; up) {
                    parts.unshift('..');
                }
            }

            return parts;
        }

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
        var splitPathRe =
            /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        var splitPath = function(filename) {
            return splitPathRe.exec(filename).slice(1);
        };

// path.resolve([from ...], to)
// posix version
        exports.resolve = function() {
            var resolvedPath = '',
                resolvedAbsolute = false;

            for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
                var path = (i >= 0) ? arguments[i] : process.cwd();

                // Skip empty and invalid entries
                if (typeof path !== 'string') {
                    throw new TypeError('Arguments to path.resolve must be strings');
                } else if (!path) {
                    continue;
                }

                resolvedPath = path + '/' + resolvedPath;
                resolvedAbsolute = path.charAt(0) === '/';
            }

            // At this point the path should be resolved to a full absolute path, but
            // handle relative paths to be safe (might happen when process.cwd() fails)

            // Normalize the path
            resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
                return !!p;
            }), !resolvedAbsolute).join('/');

            return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
        };

// path.normalize(path)
// posix version
        exports.normalize = function(path) {
            var isAbsolute = exports.isAbsolute(path),
                trailingSlash = substr(path, -1) === '/';

            // Normalize the path
            path = normalizeArray(filter(path.split('/'), function(p) {
                return !!p;
            }), !isAbsolute).join('/');

            if (!path && !isAbsolute) {
                path = '.';
            }
            if (path && trailingSlash) {
                path += '/';
            }

            return (isAbsolute ? '/' : '') + path;
        };

// posix version
        exports.isAbsolute = function(path) {
            return path.charAt(0) === '/';
        };

// posix version
        exports.join = function() {
            var paths = Array.prototype.slice.call(arguments, 0);
            return exports.normalize(filter(paths, function(p, index) {
                if (typeof p !== 'string') {
                    throw new TypeError('Arguments to path.join must be strings');
                }
                return p;
            }).join('/'));
        };


// path.relative(from, to)
// posix version
        exports.relative = function(from, to) {
            from = exports.resolve(from).substr(1);
            to = exports.resolve(to).substr(1);

            function trim(arr) {
                var start = 0;
                for (; start < arr.length; start++) {
                    if (arr[start] !== '') break;
                }

                var end = arr.length - 1;
                for (; end >= 0; end--) {
                    if (arr[end] !== '') break;
                }

                if (start > end) return [];
                return arr.slice(start, end - start + 1);
            }

            var fromParts = trim(from.split('/'));
            var toParts = trim(to.split('/'));

            var length = Math.min(fromParts.length, toParts.length);
            var samePartsLength = length;
            for (var i = 0; i < length; i++) {
                if (fromParts[i] !== toParts[i]) {
                    samePartsLength = i;
                    break;
                }
            }

            var outputParts = [];
            for (var i = samePartsLength; i < fromParts.length; i++) {
                outputParts.push('..');
            }

            outputParts = outputParts.concat(toParts.slice(samePartsLength));

            return outputParts.join('/');
        };

        exports.sep = '/';
        exports.delimiter = ':';

        exports.dirname = function(path) {
            var result = splitPath(path),
                root = result[0],
                dir = result[1];

            if (!root && !dir) {
                // No dirname whatsoever
                return '.';
            }

            if (dir) {
                // It has a dirname, strip trailing slash
                dir = dir.substr(0, dir.length - 1);
            }

            return root + dir;
        };


        exports.basename = function(path, ext) {
            var f = splitPath(path)[2];
            // TODO: make this comparison case-insensitive on windows?
            if (ext && f.substr(-1 * ext.length) === ext) {
                f = f.substr(0, f.length - ext.length);
            }
            return f;
        };


        exports.extname = function(path) {
            return splitPath(path)[3];
        };

        function filter (xs, f) {
            if (xs.filter) return xs.filter(f);
            var res = [];
            for (var i = 0; i < xs.length; i++) {
                if (f(xs[i], i, xs)) res.push(xs[i]);
            }
            return res;
        }

// String.prototype.substr - negative index don't work in IE8
        var substr = 'ab'.substr(-1) === 'b'
                ? function (str, start, len) { return str.substr(start, len) }
                : function (str, start, len) {
                if (start < 0) start = str.length + start;
                return str.substr(start, len);
            }
            ;

    }).call(this,require('_process'))

},{"_process":375}],375:[function(require,module,exports){
// shim for using process in browser
    var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

    var cachedSetTimeout;
    var cachedClearTimeout;

    (function () {
        try {
            cachedSetTimeout = setTimeout;
        } catch (e) {
            cachedSetTimeout = function () {
                throw new Error('setTimeout is not defined');
            }
        }
        try {
            cachedClearTimeout = clearTimeout;
        } catch (e) {
            cachedClearTimeout = function () {
                throw new Error('clearTimeout is not defined');
            }
        }
    } ())
    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
        } catch(e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
            } catch(e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
            }
        }


    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
        } catch (e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
            } catch (e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
            }
        }



    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return;
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }

    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while(len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
    }

    process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
        }
    };

// v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    process.title = 'browser';
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = ''; // empty string to avoid regexp issues
    process.versions = {};

    function noop() {}

    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;

    process.binding = function (name) {
        throw new Error('process.binding is not supported');
    };

    process.cwd = function () { return '/' };
    process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
    };
    process.umask = function() { return 0; };

},{}]},{},[82])


//# sourceMappingURL=build.js.map
